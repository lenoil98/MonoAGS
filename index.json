{
  "articles/game-structure.html": {
    "href": "articles/game-structure.html",
    "title": "Game Structure | MonoAGS Documentation",
    "keywords": "Game Structure The main steps of creating your game, generally speaking, from the technical side (we will not be discussing the creative side here) are: Compose your assets (graphics & audio) and add to the project Create the rooms in which the game takes place- add graphics to the room and set the areas in which the characters can walk (and optionally areas for scaling the characters, zooming the camera, walk behind the graphics, etc) Create the objects that can be interacted with in the rooms, and place them in their starting rooms Create the characters- player character(s) and NPCs, and place them in their starting rooms Create all the inventory items which your player might pick up Create your GUIs (graphical user interface)- decide how you want the game to be played (will it be a \"right click to look\" and \"left click to interact\" or do you want a rotating cursor system between multiple verbs, or maybe a list of verbs to choose from, etc) and create your buttons, menus, inventory window, mouse cursors and other controls. Create animations for all of the above as desired Code all of the interactions between the player character and other characters, objects, inventory items ang GUIs, including puzzles, dialogs and cut-scenes. ... Profit! That's the basic layout of everything you need to do for a \"classic\" point & click game, the rest of this section will be dedicated to fleshing out all of those concepts and things you can do with them in the engine."
  },
  "articles/faq.html": {
    "href": "articles/faq.html",
    "title": "FAQ (Frequently Asked Questions) | MonoAGS Documentation",
    "keywords": "FAQ (Frequently Asked Questions) Troubleshooting \"The version of Visual Studio is unable to open the following projects.\" If you see this error when loading the projects: It means that Xamarin for Android/IOS is not installed. Check out the Getting Started section for instructions on how to set up android/ios development. If you are not interested in developing for android/ios, you can safely ignore this error. Note that if you are developing from a Linux machine, then developing for ios/android is not available. You can ignore these error and develop your game, and then switch to a Windows/Mac machine at a time when you're interested in testing/developing mobile. \"The current .NET SDK does not support targeting .NET Standard 2.0. ...\" Check that you have .Net Core installed. You can type dotnet --info from the console to verify. If you don't have it installed, you can install it from here . The solution builds fine but the project won't start Check if you have a message similar to \"you can't run that type of project\". If so, it means that your startup project is currently a library and not the game itself. You can change the startup project either by right clicking the game project in the solution explorer and selecting \"Set as Startup Project\", or simply by selecting that project from the drop-down at the top of the screen."
  },
  "articles/entities.html": {
    "href": "articles/entities.html",
    "title": "Entities & Components | MonoAGS Documentation",
    "keywords": "Entities & Components We talked about objects , characters , guis and room areas , but what we haven't discussed is that those are all just entities with pre-set components added to them. An Entities & Components system gives great flexibility to the engine to really let you fulfill even your craziest dreams. An entity is basically an empty canvas, until you start filling it up with components. Each component added to the entity gives it new skills, so you can pick and choose the skills you need your entity to have, and you can add/remove components from the entity at any time during the game. For example, the object is an entity with the following components: IHasRoomComponent : attaches the object to a room. IAnimationComponent : adds the animation skill. IInObjectTreeComponent : adds the composition skill. IColliderComponent : adds collision checking skill. ITranslateComponent : adds (x,y,z). And so on... What this essentially means, is that an object does not have to stay an \"object\" during the whole course of the game. We can change it to a button, for example, by adding the necessary components for a button. Or we can add the IDraggableComponent , which will allow us to the drag the object using the mouse. We have multiple ways for adding components: //Indirect: engine will create the component for you oInterestingBox.AddComponent<IDraggableComponent>(); //Another indirect version: oInterestingBox.AddComponent(typeof(IDraggableComponent)); //Direct: you create the component yourself IDraggableComponent component = doSomethingToCreateMyComponent(); oInterestingBox.AddComponent(component); Writing your own components You can write your own components by inheriting from AGSComponent . Here are some things you can do with your component: Constructor In your component class constructor, you can have parameters which will be auto-filled by the engine with correct values if somebody adds your component using the indirect version(s). The parameters which the engine can auto-fill are the ones which the engine knows about, usually all the built-in system interfaces. If you try having parameters that the engine doesn't know how to fill (like a string), it will throw an exception. public MyComponent(IGame game) //this will work { _game = game; } public MyComponent(int x) //this will crash { _x = x; } Component Dependencies Your component might have a dependency on another component. For example, the IDraggableComponent has a dependency on the ITranslateComponent , as to drag an object you have to change its X and Y. To get the required component, we can override the Init method which passes us the entity: public override Init(IEntity entity) { _translateComponent = entity.GetComponent<ITranslateComponent>(); } We might want to use that component right away, but note that during the Init method, the component we got might not be initialized itself (which might or might not be important for us). If we want to guarantee we'll only use the component after it was initialized, we can override the AfterInit method: public override AfterInit() { _translateComponent.X += 10; } Note, though, that components can also be removed from an entity at runtime, so if you have a dependency on a component, you can Bind to it and control how your own component handles a missing dependency. The Bind function gets 2 functions as parameters, the first function gets called when the dependency component is added (it is also gets called if it's already there when you bind), and the second function gets called when the dependency component is removed. So let's rewrite our code with Bind : public override Init(IEntity entity) { entity.Bind<ITranslateComponent>(c => _translateComponent = c, _ => _translateComponent = null); } public override AfterInit() { _translateComponent?.X += 10; } Note that we used the Elvis operator when accessing _translateComponent to make sure we only change X if the translate component is available. Finally, we want to declare to the world (but mostly to the editor, when we'll have one) that we are dependent on the ITranslateComponent , for this we can use the RequiredComponent attribute which we use to decorate our class: [RequiredComponent(typeof(ITranslateComponent))] public class MySuperUsefulComponent : AGSComponent { //... } Property Change Notifications Let's say you want to add a property for your custom component. For this example, we'll create a score component so we'll want to have a score property: public class ScoreComponent : AGSComponent { public int Score { get; set; } } So now everybody with access to the entity with the score component can read and change the score: obj.GetComponent<IScoreComponent>().Score += 100; //You just got a 100 points! Now what do I do if I want to get a notification whenever somebody changes the score? There's a OnPropertyChanged event for each component especially for that. Let's use it to play a sound whenever the score is changed: var scoreComponent = obj.GetComponent<IScoreComponent>(); scoreComponent.OnPropertyChanged += (sender, args) => { if (args.PropertyName != nameof(IScoreComponent.Score)) return; aCuteSound.Play(); }; In this example, we get the score component, then we listen to the property change event. Each time we get that event, we check which property was changed as we're only interested in the score property (note that we didn't really have to do that as our score component only has 1 property so this will always be true, however it is good practice always to check for the property you're interested in). Once we see that the score is the property that was changed we play our cute sound. Property changes behind the scenes You might be wondering how this works. We didn't put any code in our property to fire the property change event, after all. You didn't have to do that because we use Fody.PropertyChanged to inject code for us every time we compile that does exactly that. The injected code for the score property will change the property to look like this: private int _score public int Score { get { return _score; } set { if (_score == value) return; _score = value; OnPropertyChanged(nameof(Score)); } } Note that the code first checks that the new value we put in score is different than the current value. This is to avoid sending events when the property hasn't really changed. This usually works exactly how we want it to work, but sometime we might want to override Fody.PropertyChanged and handle the property change notifications ourselves (perhaps our property points at a private field which we update regardless of the property, for example, or maybe we want to batch multiple updates into one event for increasing performance, etc). You can look at the documentation of Fody.PropertyChanged to see how you can customize it to your liking. For example we can add a [DoNotNotify] attribute to our property to tell Fody.PropertyChanged we're handling this property notifications on our own: public class ScoreComponent : AGSComponent { private int _score; [DoNotNotify] public int Score { get; private set; } public void GiveScore(int score) { Score += score; OnPropertyChanged(nameof(Score)); } } Here we changed our score property to be read-only from everybody who's using it from outside (by using private set ), and we only allow changing the score by calling the GiveScore function. We also decided we'd prefer sending the event ourselves and not use the services provided by Fody.PropertyChanged (although for this example we really didn't have to do that) so we added the DoNotNotify attribute to the property and we call the property changed event ourselves directly from the GiveScore method."
  },
  "articles/effects.html": {
    "href": "articles/effects.html",
    "title": "Effects | MonoAGS Documentation",
    "keywords": "Effects We plan of offering a lot of built in effects which you'll be able to use in the game. Currently, though, we only offer one effect: Shake The Shake effect can shake either the screen or a specific target. You can give it a strength (how aggressive is the shake) and a decay (how fast/slow the shake fades out). You can run it for a set period of time, or run it endlessly (with the ability to stop it at any time). Here's an example for shaking the screen for 5 seconds with the default strength and decay. ShakeEffect effect = new ShakeEffect (); effect.RunBlocking(TimeSpan.FromSeconds(5));"
  },
  "articles/dialogs.html": {
    "href": "articles/dialogs.html",
    "title": "Dialogs | MonoAGS Documentation",
    "keywords": "Dialogs Dialogs are on-going conversation between two (or more) characters. The dialog is structured as a sequence of actions (usually the characters talking but not necessarily), followed by a list of choices for the player, where each choice branches to another sequence of actions, followed by another list of choices, and so on. You can configure a graphic object (see Objects ) to serve as a background for the dialog, and you have various options for configuring the dialog options and actions. Dialog option A dialog option is one choice in a list of options for the player to choose from. For example, in a detective game, you might interrogate a suspect and get a few choices: Ask for an alibi \"What can you tell me about the murder weapon?\" \"Did you know the victim?\" Nothing more to ask For each option you can configure the following: Label Each dialog option is a text hosted in a label which you can configure to change various things, like its color, size, border, font, text color, text outline/shadow, etc (refer to the Labels section to learn more). Text rendering options You can also configure different text rendering options (like text color, font, outline, etc) for when the mouse is hovering over an option, and for when you've already selected this option in the past (to maybe notify the player she/he does not need to click on this option again). By default the normal label text is white, the hovered text is yellow and the \"already selected\" text is gray. Show Once You can configure a dialog option to only be shown once (i.e only until selected once). Once selected, and in case the same dialog is shown again the option will be hidden. If an option is set as \"show once\", then the text rendering configuration for \"already selected\" is irrelevant. Speak option You can configure where the player will speak the text written in the option when chosen. In the example dialog above, options 2 and 3 are a good candidate for a \"speak option\", but options 1 and 4 do not make sense as a \"speak option\" as those are not quoting the detective. Dialog control For each option you can set what happens after running the associated conversation (the dialog actions): you can either set to close the dialog or to switch to a new dialog (i.e a new set of options to choose from, which will continue to branch out the conversation). If neither one is configured, the dialog will show itself again after the dialog option runs out. Each of the options, when selected, will lead to a different conversation which involves both the detective and the suspect talking, with possible animations and other script actions: those are the dialog actions. Dialog action A dialog action is any action which runs as part of a sequence of actions. As this is a dialog between characters, the action is usually one of the characters saying something but it isn't always the case, it can also be an animation, or setting a variable to indicate a puzzle has completed, or anything really. The dialog option contains convenience methods for adding speaking actions, but also generic actions, which can be either synchronous (blocking) or asynchronous. Each action can also return a false value, indicating that the sequence of actions should be cancelled. Finally, each dialog action can also be disabled by the code which will skip the action and go to the next action in the sequence. Startup actions Dialog actions are configured per dialog option, but they can also be configured for the dialog as a whole. Those actions will run when starting the dialog, before showing the dialog options. This is useful, for example, if you want to have the characters greeting each other and/or setting up the stage for the conversation. Dialog layout Besides configuring the graphics object for the dialog background, and configuring each dialog option rendering separately, you can also implement your own custom layout for the option. This is done by implementing the IDialogLayout interface and then hooking it up via the Resolver object (like you would hook up every other interface implementation that you wish to switch with your own). Another related configuration that you have, is whether to display the dialog options while the action sequence (i.e the conversation) is running. This is set via the ShowWhileOptionsAreRunning property of the dialog."
  },
  "articles/dependencies.html": {
    "href": "articles/dependencies.html",
    "title": "Dependencies | MonoAGS Documentation",
    "keywords": "Dependencies MonoAGS currently depends on the following projects: Mono This is the runtime used to run the game on Mac, Linux and mobile operating systems. Dot Net Framework This is the runtime used to run the game on Windows OS. Xamarin Xamrion.Android and Xamarin.IOS are c# bindings for the Android and IOS APIs. OpenTK A cross-platform binding around OpenGL and OpenAL for displaying graphics and playing audio. OpenGL ES 2.0 is used for graphics on mobile platforms. SDL2 An optional dependency that OpenTK can depend on for windowing and input services (not currently used by default as OpenTK also provides native windowing and input services, but might used in the future). If you're intersted in using SDL2, read here . OpenAL Soft A software implementation of the OpenAL API, used to support OpenAL on mobile platforms. AutoFac Inversion-of-control framework for injecting interfaces at runtime. Protobuf.Net Serialization framework used for saving and loading games. Fody.PropertyChanged Used to inject property notifications code into components. NVorbis Used to support playing OGG Vorbis files (audio file format). CSFlac Used to support playing FLAC files (audio file format). Editor only dependencies GuiLabs.Undo Framework for supporting undo/redo operations. Font Awesome Font used to display icons in the editor. Humanizer Used by the editor to show human friendly names for properties from code. Fira Sans The font used by the editor. Development only dependencies NUnit A Unit Test framework. Moq Allows to easily mock interfaces, used for unit tests. OpenCover Analyzed the unit tests to create code coverage reports Coveralls.net Uploads code coverage reports to the coveralls website for online viewing. Travis Automated CI build for Mac & Linux. AppVeyor Automated CI build for Windows & Android, also used to build the documentation website. DocFX Used to generate the documentation website. Nerdbank.GitVersioning Used to auto-generate a version number. Travis Matrix Badges A small service to display Travis CI build badges on Github. AppVeyor Matrix Badges A small service to display Appveyor CI build badges on Github."
  },
  "articles/customizations.html": {
    "href": "articles/customizations.html",
    "title": "Customizations | MonoAGS Documentation",
    "keywords": "Customizations Customizability/Extensibility is one the main design goals of the engine, and as such it was written from the bottom up so that everything (or, almost everything) can be replaced. It's doing that by harnessing Autofac , a library which enables you to create an inversion-of-control container to setup how to inject dependencies into classes. This might sound complicated, but in practice it's very simple to use: If you want to change how the engine behaves, find the interface that defines the behavior you want to change, implement it yourself, then set up the Resolver to use that implementation instead of the engine built-in implementation. From that point on, your implementation will \"magically flow\" to all the code that requires it. Let's, for example, try to change where speech is rendered. As a simple example, let's always render the speech at the same position. First we'll look at an appropriate interface: in this case, we'll want to implement ISayLocationProvider . This has one method which we need to implement which gets the text and speech configuration and needs to return a say location (text location and portrait location). public class MyCustomSayLocationProvider : ISayLocationProvider { public ISayLocation GetLocation(string text, ISayConfig config) { PointF textLocation = new PointF(400f,100f); PointF portraitLocation = new PointF(100f, 100f); return new AGSSayLocation(textLocation, portraitLocation); } } The text and the portrait will always be rendered in the same place regardless of the game's resolution, where the character stands, the font size, etc, making this a useless example for practical purposes, but good enough to illustrate how extensions work. All that's left now is to hook up this interface instead of the default implementation ( AGSSayLocationProvider ). We do that by overriding the resolver (this needs to be done before creating the IGame object): Resolver.Override(resolver => resolver.Builder.RegisterType<MyCustomSayLocationProvider>().As<ISayLocationProvider>()); And we're done. Points of interest Our custom implementation can get parameters in its constructor which the engine will know to fill up (using the same IOC container system). The same rules apply here as for writing a constructor for a component . Sometimes you'd want to use the default implementation for some things and your custom implementation only in specific scenarios. A way to do this would be to have an instance of the default implementation which you can delegate the incoming calls if needed. Let's extend our previous example by only return the static speech location when calling it for the first time: public class MyCustomSayLocationProvider : ISayLocationProvider { private ISayLocationProvider _defaultProvider; public MyCustomSayLocationProvider(AGSSayLocationProvider defaultProvider) { _defaultProvider = defaultProvider; } public ISayLocation GetLocation(string text, ISayConfig config) { if (Repeat.OnceOnly(\"Custom Say Location\")) { PointF textLocation = new PointF(400f,100f); PointF portraitLocation = new PointF(100f, 100f); return new AGSSayLocation(textLocation, portraitLocation); } else return _defaultProvider.GetLocation(text, config); } } Sometimes you'd want your implementation to save state and then it's important to establish whether you can have multiple instances of your behavior or only one. For example, we could have written our previous example using a boolean variable instead of using Repeat.OnceOnly : private bool _alreadyUsedCustomLocation; //... if (!_alreadyUsedCustomLocation) { _alreadyUsedCustomLocation = true; //do our custom thing } else return _defaultProvider.GetLocation(text, config); However, the ISayLocationProvider is requested by ISayComponent component, and there's one component for each speaking character (or entity), and by default the resolver will create a new instance for our implementation for each character, which means that that each character will have its own instance of the boolean variable, and our custom behavior will happen once for each character, not once for the entire game which might not be what we want. Well, we can solve this by changing the Resolver override we did before and adding the SingleInstance command: Resolver.Override(resolver => resolver.Builder.RegisterType<MyCustomSayLocationProvider>().SingleInstance().As<ISayLocationProvider>()); Another thing to think about when we have state in our implementation, is that we might want to save this state in our game saves. One way to do that, is by adding our state as global variables (or to the entity's custom properties, or to the room's custom properties, depending on which system we're replacing). We plan to have easier ways to customize saving in the future. One final thing to note: in this example, and perhaps many others, it's possible that we didn't actually need to implement our own ISayLocationProvider , as the engine already gives us a way to change the location where the speech is rendered without overriding any interface. The ISayComponent component has an OnBeforeSay event which we can subscribe to. This event gives us the label that will be shown on the screen after its location was already decided, but we're then free to change its location to where we want it to be: cHero.OnBeforeSay.Subscribe(args => { args.Label.Position = (400f, 100f); }); So the conclusion here is that there might be a built in way to achieve what you want (or more than one way), so if you're not sure how to achieve something, please ask!"
  },
  "articles/characters.html": {
    "href": "articles/characters.html",
    "title": "Characters | MonoAGS Documentation",
    "keywords": "Characters Characters are both the player(s) and the NPCs (non player characters) that walk around on your screen (or just stand there, like many NPCs in adventure games) and interact with one another. The relationship between characters and objects Note that unlike \"classic\" AGS, characters are objects with more stuff added to them. I.E all characters are also objects, but not all objects are characters. This means that you can expect all properties and abilities that objects have to also belong the characters, and you can expect the syntax to be the same. Therefore we will not cover all the stuff that the characters can do here, but just what's added on top of being an object (and you can refer to the Objects section for the rest). Character abilities Walking Allows your characters to walk around the screen. There are several things you can configure for your characters walk, so there's a dedicated section for walk configurations and abilities. Please refer to the Walking section for more details. Facing directions Allows your characters to face directions: either to face a specific point on screen, or face to a specific object in the room, or simply to face left, up, up-left, etc. This would change the current animation to use the most suited animation for the current direction (so, for example, if you face left but only has an \"up\", \"left\" or \"down\" animations, either \"up\" or \"down\" will be used). Following Allows commanding a character to follow another character/object in the room. You can configure how the character performs a follow, to be able to accommodate different scenario (a companion, a spy or an enemy, for example). You can configure with the time range the character will wait before commencing a new walk towards the target, what's the distance range you'd want to have your character away from the target, what's the probability of having your character wander off somewhere else, and whether or not the character will move between rooms if the target moves to another room. Approaching Allows a character to approach an object/character. This is by default, only exists for the player character. When an interaction event is triggered for a hotspot, if this component is available for the player (which it is by default), then the character will approach the hotspot before the interaction logic code is triggered. You can configure what \"approach\" means to you per each different interaction verb (\"look\", \"interact with\", \"talk to\", etc depending on which verbs you have in your game). You can set \"approach\" to do nothing ( NeverWalk ), face the direction of the target without walking ( FaceOnly ), walk to the target if the target has a walk point configured ( WalkIfHaveWalkPoint ), or always walk towards the target ( AlwaysWalk ). Speaking Allows a character to speak. You'll use SayAsync for the character to speak which basically does the following: Puts text on the screen for some time Change the character animation to the speaking animation Optionally display a portrait of the character Optionally play an audio clip Displaying text You can configure how the text is rendered (color, font, etc: see Labels section for more on the all the options that you have for text rendering), when the text is skipped (by time and how much, by mouse, both, or none which means you implement text skipping yourself), a label to host the text with a border (see the section about borders) and background color, and a text offset to offset the location of the text. That offset will be relative to the default text display location which will be selected by the engine: The engine, by default, tries to place the text above the character and a little to the side, unless the text won't fit the screen, then it changes the location to ensure the text fits the screen. If you don't like that behavior you can implement your own text location by implementing the ISayLocationProvider interface (and hooking it up, see the section about customizability). You can also specify a one-time text (and/or portrait) position to SayAsync to replace the built-in behavior. Displaying portrait As for the portrait, you can configure the object which shows the portrait (this is a standard object, so it can has everything a normal object has, including animations, scaling, rotations, etc), plus a strategy on where to position the portrait (SpeakerPosition- on the top, either left or right based on where the speaker is standing, Alternating- top right, then top left, then top right, etc or Custom which leaves the portrait positioning to you) and custom offsets for both the portrait and for the text from the portrait. Playing the audio clip In order to play an audio clip, the text you pass to the speech method should have a number at the beginning prefixed by an ampersand, for example, \"&17 Hello there!\". If the number exists, the engine will look for an audio file with the first four capital letters of your character's id followed by the number. So if the line was said by \"Christopher\", the engine will look for the file \"CHRI17\". Those files should be placed in a special folder, under Assets -> Speech -> English. Note: In future revisions we're planning on introducing multi-language support, and also other ways of building the speech \"database\". If the engine does not find the file it will not play an audio clip, and in any way the \"&17\" will be stripped away from the text and will not be displayed on screen. Outfits Allows a character to switch outfits. An outfit is a collection of animations that are associated with a character. The collection can be swapped with another collection when the character changes his look. Say, for example, your player can wear a jacket. You can create two outfits in advance, one with a jacket and the other without. Each outfit will have different walk, idle and speak animations (one with a jacket and the other without). There walk, idle and speak animations that the engine might look for when walking, standing still and speaking. Additionally you can add more animations to an outfit (like \"Jump\", or \"Swim\" for example), which you then need to draw per outfit, and will enable you to call your animation from whatever outfit the character is currently using. Inventory Allows your character to carry inventory. Those are the items that the character holds in his/her (usually) imaginary bag. It is composed of a list of inventory items, and one active item that the character holds in his/her hand. Those inventory items are usually displayed using an inventory window (see the GUI section). You can add or remove items from the inventory and get or set the currently active inventory item (a user typically chooses an inventory item from the inventory window which makes it the active inventory item, and then try to \"use\" that item on an object on the screen, or on another inventory item). You can also subscribe to combination events on the inventory, which gives the 2 items that the player attempts to combine and let you code the desired behavior. And you can also subscribe to a default combination event, for those combination attempts which doesn't have special handling, allowing you, for example, to say something like \"This doesn't make any sense, I don't to use those 2 items together\" (but hopefully in a less boring way)."
  },
  "articles/borders.html": {
    "href": "articles/borders.html",
    "title": "Borders | MonoAGS Documentation",
    "keywords": "Borders You can assign a border to an object, to have a border drawn around the object. A border can be drawn both behind and in front of the object it's assigned to, which opens up a lot of possibilities for things you can do with the border. Built in borders MonoAGS comes with several built in \"border styles\" which you can use. Solid Color A solid color border will be drawn around the object. You can choose the color, the border width, and whether or not to make the corners rounded. You can create a solid border by using the border factory: factory.Graphics.Border.SolidColor(...) . By default the border will be drawn in front of the object, but you can change it to be drawn behind the object by setting the DrawBorderBehind property of the border to true . Gradient Color A gradient color border will be drawn around the object. This gives you the same choices as the solid color border, only instead of selecting one color, you can select 4 colors, one for each corner of the border. The color along the edges will be interpolated, thus creating the gradient effect. You can create a gradient border by using the border factory: factory.Graphics.Border.Gradient(...) . 9-slice Image This allows you to use an image, slice it to 9 pieces, and spread it in various ways to create a border. This is similar to the customized text window feature that \"Classic\" AGS currently has, only more powerful and available for all objects, not just for text windows. The 9-slice image border is heavily inspired by the border image used by CSS, so you can look at a CSS example , to see what can be done with a 9-slice image. Writing your own You can also implement your custom border if you want. For that you need to implement the IBorderStyle interface which let you write rendering for the back and for the front of the border. Take a look at the existing implementation in the engine code to get an idea of how to render your own border."
  },
  "articles/audio.html": {
    "href": "articles/audio.html",
    "title": "Audio | MonoAGS Documentation",
    "keywords": "Audio Playing music/sound effects is essential to any game. MonoAGS allows you to play and control audio using audio clips and sounds. Audio Clips An audio clip is loaded from a resource/file and can be played multiple times during the game. The audio clip should be loaded using the audio factory. You can then set its properties (volume, pitch, panning) which will be used for all sounds played from this clip. You can think of an audio clip as a \"template\" for a sound. You set the properties once (like the volume), and then every time you play it it will use that volume. When you tell the audio clip to play, you can use the template or provide a one-time property change. You can also tell the audio clip to play a looping sound (which will loop forever until you stop it). You can query an audio clip to see how many sounds for this clip (if any) are currently playing. Sounds When you play an audio clip, you'll get back a sound. A sound is an \"instance\" of the audio clip which is playing right now. The same properties that you can set for an audio clip (volume, pitch, panning) can also be set for a sound, only those will affect just this current sound, not future sounds that will be played from the clip, and also you can change those properties over and over as the sound running to achieve effect (like gradually reducing the volume for a fade-out effect, for example). You can also pause/stop/resume a sound, rewind a sound to the beginning or set the sound to a specific position within the file (by changing the \"Position\" property). You can query and see whether the sound is looping or not and whether it's valid or not (an invalid sound might result if something is wrong with the user's computer and the engine was not able to play the sound). Lastly, you can query the sound to see if it was already completed, and asynchronously wait for the sound to complete playing. Additional Concepts Some additional concepts related to audio are discussed in other sections, but will be briefly mentioned here: Speech Allows you to configure speech sounds to be automatically played when the character speaks. See character's speech section . Cross-Fading Allows you to configure how music clips are cross-faded when moving between rooms. See cross-fading section in rooms . Sound Emitter Allows you to attach an audio clip to an object, and play a sound which will sound like it's coming from that object (via adjusting the panning and volume), and also optionally attach it to animation frames which will automatically trigger the sound (very useful for footsteps effects). See animation's sound emitter section , and also scaling volume areas section ."
  },
  "articles/async.html": {
    "href": "articles/async.html",
    "title": "Async & Await | MonoAGS Documentation",
    "keywords": "Async & Await Async & Await is a model for asynchronous programming which is heavily used by the engine. It allows you to do things in parallel and wait for them asynchronously while still keeping the logical flow of the code in one sequence (thus avoiding the notorious callback hell which javascript developers know all too well). Before getting into the nitty gritty, let's look at a few examples. cHero.Walk(100,100); await cHero.WalkAsync(100,100); Those 2 lines have the same logical meaning, the character will walk to (100,100), in terms of the user there's no difference. The key to understanding the benefit for the async model, is that we don't have to await the walk right away. The await cHero.WalkAsync is actually 2 parts: the WalkAsync starts the walk and the await waits for it to complete. So we can split it like this: Task walking = cHero.WalkAsync(100,100); //We can do stuff here, while the character is walking //Doing some more stuff //Ok, done, now we can wait for the walk to complete before moving on await walking; //Now we can do more stuff, after the character finished walking The WalkAsync method returns a task , an asynchronous operation which we can wait for (or not), whenever we please. We can also benefit from the rich API the dot net task provides us, including ContinueWith for chaining tasks, and waiting for multiple tasks together, either with Task.WhenAll which will wait for all tasks to complete, or with Task.WhenAny which will wait for the first task to complete. We can think of a real game scenario which can be relatively difficult to code with the \"classic\" AGS, but trivial to code using async/await: A guard which walks in circles endlessly in the background: private async Task guardWalk() { while (someConditionApplies()) { await cGuard.WalkAsync(100,100); await cGuard.WalkAsync(200,100); if (cHero.X < 200) { await cGuard.SayAsync(\"Go away!!\"); } await cGuard.WalkAsync(200,200); await cGuard.WalkAsync(100,200); } } Now think of what it takes to code something like this with 'classic' AGS. You have to add and track state on each tick, remember where you were and where you're going, etc. Async & Await helps you execute things in parallel with great ease. The Nitty Gritty The async keyword is used to mark a method that might run asynchronously, and the await keyword is used to \"asynchronously wait\" for an asynchronous method to complete. If I'm awaiting an asynchronous method to complete, it means that my method is also asynchronous and should therefore be marked with async . If I'm an asynchronous method, I can either return void (i.e nothing), a Task or a Task<TResult> . If I return void it means that my method cannot be awaited by another method, making my method a fire-and-forget method. It can be useful in some scenarios, but usually it's not desired. So usually the method will return Task which lets other methods await it, or Task<TResult> which allows the method to return an actual result (asynchronously): private readonly HttpClient _httpClient = new HttpClient(); var text = await _httpClient.GetStringAsync(url); //Will download text from a url asynchronously and return the text One important gotcha here, is that you might be tempted to synchronously wait (i.e block) on an asynchronous method. This can technically be done, for example: cHero.WalkAsync(100,100).Wait(); //or: var text = _httpClient.GetStringAsync(url).Result; However due to how async/await is implemented behind the scene (a complicated state machine) this might lead to deadlocks (the computer hanging) in some scenarios, especially if you try doing this from the rendering thread. Therefore it is not recommended blocking on an asynchronous method unless you really know what you're doing. The implication of this, is that usually once you go async, the entire calling chain should go async (everything calling you will go async, and so on until the end of the calling chain). The end of the calling chain, for MonoAGS is usually subscribing to an event. The IEvent method allows you to subscribe to an asynchronous callback ( SubscribeToAsync ) which you should use to \"end\" the chain. When subscribing to an event, if you suspect you might need it to be asynchronous in the future, you can subscribe to the async version even if you are not currently async: oBottle.Interactions.OnInteract(AGSInteractions.Look).SubscribeToAsync(onLookBottle); private Task onLookBottle(ObjectEventArgs args) { cHero.Say(\"It's a bottle.\"); return Task.CompletedTask; } By returning Task.CompletedTask , I'm \"faking\" an asynchronous result so other methods can still await my method, without knowing it isn't really asynchronous. Later on, when I add my asynchronous stuff, I'll remove it: private async Task onLookBottle(ObjectEventArgs args) { await cHero.SayAsync(\"It's a bottle.\"); }"
  },
  "articles/areas.html": {
    "href": "articles/areas.html",
    "title": "Areas | MonoAGS Documentation",
    "keywords": "Areas Areas are specific regions in a room that provide additional behaviors that apply only within that region. Basic properties: There are basic properties that all areas have: Mask- The mask is what maps specific pixels on the screen to that area. The mask is currently being fed to the engine via an image ( IMaskLoader interface is used to load the mask). You can select whether the transparent pixels in the image indicate the area or the non-transparent pixels indicate the error (this is a parameter you give to the mask loader when loading the mask). Note: we plan to implement vector-based areas in the future, but currently only pixel masks are available. Enabled- Whether or not the special behavior of that area is to currently be applied. It can be switched on and off during the game as required. Area types: Walkable Areas These are the areas that indicate where the characters can walk. There's an IsWalkable property for a walkable area which you can turn on/off during the game. Note that you can also turn the Enabled on/off to achieve the same effect. The difference is that if you have an area which is both a walkable area but also is a different kind an area (areas can have multiple roles) than Enabled controls all of area roles, and IsWalkable only affects the area's walk-ability. This same method is used to disable functionalities in other area types accordingly. As an example, if this is our room: This might be a walkable area for that room: Walk-behind Areas These are areas that indicate that the background graphic of the room should be in front of the characters/objects. When rendering the engine will actually crop those up and render them on top. Walk-behinds have a Baseline property: The baseline is a horizontal line, which tells the game where the character has to be in order to be drawn behind the area. For example, if you had a table in the middle of the room, you'd only want him drawn behind the table if he was standing behind it. You normally place a baseline at the lowest point of the walk-behind area. Here's a possible walk-behind for our room: This walk-behind area masks the car, so if the baseline of the area will be the bottom of the car, if the character is above the bottom line of the car she/he will appear behind the car. Scaling Areas Scaling areas are currently used for 2 things: scaling the size of the characters/objects standing in the area, and scaling the volume emitted from those characters/objects. In the future we might split those to 2 different area types. You can turn on/off whether to scale the volume, scale on the x axis and scale on the y axis (usually you'd want to scale both x and y, but you might choose only one of them if you want a stretch/squeeze effect). The MinScaling and MaxScaling correspond to the minimum factor and maximum factor that will be applied in the 2 edge points of the areas (so you can put \"1\" and \"1\" for no scaling, for example, or \"0.5\" and \"2\" for half size to double size), where the points in between will be interpolated for a smooth transition. Whether those edge points are vertical or horizontal depends on the Axis property which can be set as X or Y . The default is Y , meaning by default the scaling area is a vertical scaling area, which is common to have when drawing your background with perspective. For a vertical scaling area, the MinScaling property will match the top-most point in the area and the MaxScaling to the bottom-most point in the area, so this is composed by default to help you fake perspective (and scaling the emitted volume, like footsteps, by default does the same thing). Note that objects/characters have a IgnoreScalingArea property which can be turned on/off to not change scaling while in scaling areas. Zoom Areas These are areas that indicate the camera should automatically zoom when the player (or whatever other target was chosen for the camera) is in that area. This works along nicely with a vertical scaling area, to zoom the camera as the player moves farther away from the camera. Besides the ZoomCamera flag which can turn zooming on/off, there's a MinZoom and MaxZoom properties which correspond with the Y property of the camera's target. The lowest point in the area, which usually corresponds to the closest distance to the camera (if your background has perspective) will match the MinZoom where the upper most point in the area will match the MaxZoom . Any point in between will be interpolated to get the matching camera zoom. Note that the default implemented camera does not do any sharp movement, but slowly adjusts toward its goal for smooth movements. If you want a different behavior from your camera, you can code your own camera by implementing the ICamera interface. If you code your own, you'll need to adjust to the zoom areas in your camera's code (if you want that feature in your camera, that is). Area restrictions: It is sometimes useful to have an area only affect specific objects/characters within it, but not all. For this purpose you can add an \"Area restriction\" component to your area. This component comes with a restriction list which you can provide with the IDs of the objects/characters/etc, and an additional RestrictionType which can be set to either a black list or a white list. A white list means that only those entities which are on the list will be affected by the area while other entities will not. A black list means that only those entities which are on the list will not be affected by the area while all other entities will be affected. Modifying Areas at Run-Time: Areas don't have to remain static. If needed, you can move, rotate or even completely reshape an area during the game (and also, you can remove/add areas during the game). For moving/rotating the area, add the translate and rotate components to the area. Those are the same components attached to objects and allow you to change the position/angle of the area in the same way you do to objects (including tweening). To completely change the shape of an area, you can just set its mask to a new mask anytime during the game. Another possible scenario for moving areas, might involve moving the area and the player at the same time, which can be useful, for example, to have a moving elevator (that the player can walk inside as it's moving). For that, you don't need to add the translate/rotate components, but rather add a parent object to the player, and then move that parent object (you can even rotate it, which will rotate both the player and the area so they will remain \"parallel\" to one another)."
  },
  "articles/animations.html": {
    "href": "articles/animations.html",
    "title": "Animations | MonoAGS Documentation",
    "keywords": "Animations An animation is composed out of a list of frames where each frame shows an image. The engine then runs through the images to make it look like the object is moving (i.e a walk animation, a talk animation, a jump animation, etc). Animation top-level configuration An animation can be configured from the IAnimationConfiguration interface with the following properties: Loops How many times an animation will loop before it stops? Or, you can put 0 which will be interpreted as an endless animation (will loop over and over till the end of time, unless you manually stop it from the code). Looping Style You can select how the animation will loop: forwards, backwards, forwards and then backwards, or backwards and then forwards. Delay Between Frames Gets or sets the delay between each frame. The delay is measured in frames, so if we're running at the expected 60 FPS, a delay of 5 (the default) means each second 12 frames of animation will be shown. Note that each frame can be configured with an additional delay. That delay will be added for this overall delay for that specific frame, so a frame's delay is relative, while this delay can be used as an overall speed for the entire animation. Animation per-frame configuration An animation frame is actually using a ISprite object, which wraps around an image and gives it a lot of the capabilities that objects have. So you can have a position, scale, rotation, pivot, tint and even a custom renderer for each frame individually (those properties will be relative to the object, so if you have a frame with a position of (10, 5) it means that the frame will be offset from the rest of the object/animations by 10 pixels to the right and 5 pixels to the bottom). Also, for each image, you can configure how to render the texture: Textures A texture is the 2D image asset which is rendered as the image. For each texture you can configure: Scale Up/Down Filters The filters used to scale up/down (i.e stretch/shrink) the texture to fit the image (if the image size is bigger/smaller than the texture). Linear will smooth the pixels so it's recommended if your texture is not pixel-art. Nearest will use the nearest neighbor algorithm, this gives a more pixel-like look so it's recommended if your texture is pixel-art. Wrap Horizontal/Vertical How would the texture be wrapped to match the image on its horizontal/vertical axis. The default is Clamp , the texture will be stretched to fit the image (using the scale up/down filters). Other options are Repeat and MirroredRepeat which will tile the texture and repeat it until fitting the image. Additionally, the following properties can be set per frame: Frame Delay An animation frame has 2 modes of delays that you can choose from (how much time to wait before moving on to the next frame). It's either a specific delay or a random delay with an allowed range. A random delay with an allowed range is useful for simulating talking, for example, when the mouth is moving in random speeds, giving the illusion of actual talking, instead of repeating animation that breaks the illusion fast. The delay is added on top of the animation's overall delay and measure in game ticks. So let's say we have an overall animation speed configured to be 5 (the default), and we have this frame delay configured to be also 5 (the default is 0) and the game is running with 60 FPS (frames per second- also the default), then the total delay for this frame will be 10 ticks, so it will run for 1/6 of a second. Sound Emitter A sound emitter can be attached to a frame, and assuming the emitter also has an audio clip attached to it, the audio clip will play when the frame is showing, from the apparent location the object is at (i.e by panning and adjusting volume, depending on how the sound emitter is configured). This is especially useful for footsteps, for example. Note that, for footsteps, for example, you'd probably want to set the same emitter for all directions of walking which might be tedious. Luckily, the sound emitter has convenience method which you can use which will assign it to multiple animations at once. Animation State Control You can query (and if needed, change) the state of an animation. Here are the properties you can query/control at run-time: Is running backwards? Is the animation currently running forwards or backwards? Current frame The current frame that is currently showing in the game. You can also access the sprite in that frame and change its properties while the game is running (like position, rotation, etc). Current loop The current loop number that is running. Time to next frame How much time (in game ticks: so 10 when the game is at 60FPS means 1/6 of a second) is left before the engine will move to the next frame. Is Paused Pause/resume an animation (and query if it is paused or not). Additional Building Commands In addition, you can clone an animation (or an individual frame), and flip an animation horizontally/vertically for easily creating similar but different animations. Directional Animations Directional animations allow grouping animations for different directions together (for example, walking left and right). This is used by the character (using the outfit ) when choosing a directional animation: if you don't assign all of the directions, the engine will attempt to choose the best direction based on what you have assigned. So, for example, if you only assign Left and Right animations for your walk animation, and the player is attempting to walk down-right, the engine will use the Right animation. Tweens Another form of animation is tweening (short for inbetweening ), which lets you interpolate values over time, which can be very useful for animating movements. Built-in tweens exist for animating position/scale/rotation/pivot/color for objects/sprites/viewports, and also for animating volume/pitch for sounds: //Will move hero's x position to 100 in 5 seconds (linearly), without waiting for it to complete. cHero.TweenX(100, 5); //Will rotate the hero to 120 degrees in 10 seconds, by using the bounce-in function, without waiting for it to complete cHero.TweenAngle(120, 10, Ease.BounceIn); //Will fade-out the character in 1.5 seconds using the quad-out function and wait for it to complete. await cHero.TweenOpacity(0, 1.5, Ease.QuadOut).Task; //Will zoom in the camera to double the size, on both x and y at the same time (and wait for it to complete). var tweenX = viewport.TweenScaleX(2, 5).Task; var tweenY = viewport.TweenScaleY(2, 5).Task; await Task.WhenAll(tweenX, tweenY); //Will rotate the camera to 180 degrees for 3 seconds, then back to 0 degrees for another 3 seconds. //At the same time will fade out the playing music, but just for 4 seconds. Then will wait for the first //one to complete (so that would be the music). var tweenCamera = viewport.TweenAngle(180, 3).Task.ContinueWith(t => viewport.TweenAngle(0, 3).Task); var tweenMusic = music.TweenVolume(0, 4, Ease.SineIn).Task; var completedTask = await Task.WhenAny(tweenCamera, tweenMusic); if (completedTask == tweenMusic) { cHero.Say(\"This is the expected behavior, as the music clip took 4 seconds and the camera 6 seconds\"); } else cHero.Say(\"This can't happen!\"); //Will start making the character darker, then pause it just 50 milliseconds after that, then resume it and wait for it. var tweenDark = cHero.TweenLightness(0.5, 5); await Task.Delay(50); tweenDark.Stop(TweenCompletion.Pause); await Task.Delay(50); tweenDark.Resume(); await tweenDark.Task; If a tween you need does not exist, then creating one is not difficult, as the Tween.Run method will let you tween any value that you want. Here is, for example, the one-liner function implementation for TweenX : public static Tween TweenX(this ISprite sprite, float toX, float timeInSeconds, Func<float, float> easing = null) { return Tween.Run(sprite.X, toX, x => sprite.X = x, timeInSeconds, easing); }"
  },
  "articles/ags-cheat-sheet.html": {
    "href": "articles/ags-cheat-sheet.html",
    "title": "AGS Cheat Sheet | MonoAGS Documentation",
    "keywords": "AGS Cheat Sheet This is a \"cheat sheet\" for people coming in from AGS . The \"cheat sheet\" is divided into 2 sections. The first section roughly demonstrates the language differences between AGS script and c#. The second section goes over the AGS scripting API (individual functions and properties) and compares them with AGS: it shows how to do the same in MonoAGS , or if something is missing, and also explaining some differences between the two, with brief highlights of things that don't exist in AGS but do exist in MonoAGS . General Scripting Differences C# has a lot of similarities to AGS Script, but there are also many differences. In some sense, c# is simpler than AGS script (no pointers, no script headers, the order of the scripts doesn't matter), and in another sense it's more complicated (all functions need to be wrapped in classes/structs, and there are a lot more keywords). Let's go over the main differences: Writing Functions In AGS, a common function signature might look like this: function do_something(int param) { // contents of function go here } The equivalent in c# would look like this: void do_something(int param) { // contents of function go here } The only difference here is that instead of function we wrote void . void is a keyword that means that the function doesn't return anything. In c#, when you write a function, you need to declare what the function returns. So, if the AGS function returns an int, like this: function do_something(int param) { return 5; } The c# equivalent function will look like this: int do_something(int param) { return 5; } Another big difference is that in AGS we can write a function anywhere in the file. In c#, the functions need to be written inside either a class or a struct, and that needs to be wrapped inside a namespace. A namespace is used to group multiple classes together, you shouldn't usually worry about this, when you add a new code file from the editor the namespace is automatically generated and written to the file. A c# struct is identical to the AGS struct, and a c# class represents a reference type, which basically means it's an instance that you can carry around: this is basically the replacement to pointers in AGS. It's not critical to understand this at first, as almost always you'd want to use a class. If you want to dig deeper and understand when you'd like to use a struct, this link is a good start: https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/choosing-between-class-and-struct A single class can contain multiple functions, and is usually used to group functions which revolve around the same purpose. So, in our example, we'll put the do_something function in a class like this: namespace MyGame { class MyClass { int do_something(int param) { return 5; } } } Returning multiple values from a function If you want to return multiple values from your function in AGS script, you'd have to create a struct especially for that purpose, which complicates things. In c#, you can just use tuples for this: (float x, float y) get_position() { return (100, 200); } You can now call this function easily like this: (float x, float y) = get_position(); Debug.WriteLine($\"X = {x}, Y = {y}\"); Variables & Scope Variables in c# are declared the same way as in AGS script, with the difference that, like functions, the variables need to reside inside the class/struct. Variables can also declared inside a function, this would make their scope local to the function, meaning that the variable will not exist once the function completes. Here's an example: namespace MyGame { class MyClass { string var1; string var2 = \"Hello\"; int do_something(int param) { string var3 = \"Hi\"; var1 = \"aaa\"; var2 = \"bbb\"; var3 = \"ccc\"; return 5; } int do_something2() { var1 = \"aaa\"; var2 = \"bbb\"; var3 = \"ccc\"; //THIS DOES NOT COMPILE, var3 does not exist! } } } In the example above, var1 and var2 are class variables, so they can be used anywhere within the class. var3 however, is local to the do_something function, so it cannot be accessed from the do_something2 function. Exporting functions & variables In AGS script, in order to be able to access a function from different script, you need to add an import to it in your exporting script header, and in order to export a variable you need to add an export to it and that export must reside in the end of the file. In c#, there is no script header file: both functions and variables can be exported simply by prefixing them with the keyword public , like this: public string var1; public int do_something() { return 5; } Static vs instance Another big difference that needs to be understood, is the different between static functions/variables to instance functions/variables. In AGS, functions and variables that are declared inside a struct are instance functions/variables, but all other functions and variables that you code are static. In c#, however, all functions/variables are instance by default, unless you explicitly make them static. The difference is that instance functions/variables are associated with instances that are generated from the class (which can be looked at like a blueprint for creating instances), while static variables belong to the class itself. If I have a Dog class to represent a dog, and a health variable that gives a number between 0-100 to say how healthy the dog is, then health should be an instance variable: if I create 3 different dogs, they should have 3 different health states. If, on the other hand, I have a Utilities class with random scripts, and among them I have a sum_two_numbers function, that function makes sense as a static function, there is no point in having 2 (or more) \"Utilities\". In c#, to have a function (or variable) static, you prefix it with the keyword static . So the 2 examples from above would look like this: namespace MyGame { class Dog { public int Health; } class Utitilies { public static int sum_two_numbers(int x, int y) { return x + y; } } } Importing functions & variables In AGS, to import functions/variables you need to add an import for them in the script header. In c#, assuming both files are using the same namespace, you can call them without adding anything specific. How you call the functions/variables in c# depends if they are static or instance functions/variables. For static functions/variables you need to prefix the class name and a dot before the function/variable. For instance functions/variables you need to create a new instance of your class using the new keyword, assign that to a variable, and then you can call that instance's functions/variables by prefixing it with the variable name and a dot. As an example, let's use or Dog and Utilities classes from the previous example in a different file: namespace MyGame { class MyClass { Dog dog1 = new Dog(); Dog dog2 = new Dog(); void init() { dog1.Health = 10; dog2.Health = 20; int combined_health = get_dogs_combined_health(); Debug.WriteLine($\"The combined health of both dogs is: {combined_health}\"); } int get_dogs_combined_health() { return Utilities.sum_two_numbers(dog1.Health, dog2.Health); } } } Sometimes we want to import functions/variables from another namespace which is not our own. For example, the Debug.WriteLine we used above (that writes a message to our debug console) is part of the System.Diagnostics namespace, as that is part of the c# standard library. The standard library is a library of common useful functions that is bundled with every c# application (and it has a lot of useful stuff in there). Because it's in a different namespace than ours, we need to explicitly import that namespace, and we do that with the using keyword: using System.Diagnostics; namespace MyGame { class MyClass { void write_hello() { Debug.WriteLine(\"Hello!\"); } } } Note that if you're using an IDE like Visual Studio to write your code, and you forgot putting the using section, a lot of times Visual Studio can add this automatically for you: you'll see a squigly line under your usage of a missing library ( Debug.WriteLine in this scenario) and a lightbulb icon which, when clicked on, will give you the option to automatically add the missing using clause. Sometimes we want to import functions/variables from an external library: in that case we'll want to add a reference to that library before we can add using clauses for its namespaces. For example, we might want to add a library that will allow us to vibrate the mobile phone (if the game is played on a mobile phone). We can search for an available package directly from the IDE. From Visual Studio, under your project node in the solution explorer, there's a \"Packages\" node, right click it and select \"add package\". This will open a window in which you can search and install packages. If you search for \"vibrate\", for example, you'll see \"Vibrate Plugin for Xamarin and Windows\" which you can then install by clicking \"Add Package\". Once you have the package installed, you can use its namespaces using the same using keyword we saw before (and you should read that package documentation to understand how to use it). Scripts In AGS, you have a global script, room scripts, and additional scripts you can create on will. In c# there's no global script, and you are free to organize the scripts as you want them to be. The order of the scripts (unlike AGS) does not matter. There are no \"special functions\" that you can put in your script (like game_start ) that are magically called, you have to call it yourself. Data types and operators All AGS data types and operators exist in c# with the same syntax, and used the same way. c# has additional data types and operators which do not exist in AGS. You can see all data types here: https://docs.microsoft.com/en-us/dotnet/csharp/tour-of-csharp/types-and-variables You can see all operators here: https://msdn.microsoft.com/en-us/library/6a71f45d(v=vs.120).aspx Additionally, c# has the keyword var which can be used when declaring the variable is it is clear what data type it has. For example: var x = \"hello\"; //x is a string, it's clear from how x is initialized, so we can use var instead of string when declaring the variable (if we want). Arrays The c# syntax for arrays is slightly different from the AGS syntax for dynamic arrays, in that you put the brackets next to the type and not next to the variable name: int[] characterHealth = new int[50]; Also, in c# you have lists, which is like an array only without a size limit, so you can add and remove items from the list: List<int> characterHealth = new List<int>(); characterHealth.Add(5); characterHealth.Add(6); characterHealth.Add(7); Debug.WriteLine(characterHealth[0]); //5 Debug.WriteLine(characterHealth[1]); //6 Debug.WriteLine(characterHealth[2]); //7 characterHealth.RemoveAt(1); Debug.WriteLine(characterHealth[0]); //5 Debug.WriteLine(characterHealth[1]); //7 Conditionals and Loops The syntax for if , else , while and switch in c# is identical to the syntax in AGS. C# also had additional constructs for conditionals and loops: most notably the ? operator can be used in some scenarios instead of if , and the foreach keyword can be used in some scenarios instead of while : //using an if: string getVisibleWord() { if (visible) return \"visible\"; else return \"invisible\"; } //using '?' string getVisibleWord() { return visible ? \"visible\" : \"invisible\"; } //using while int getSum(int[] numbers) { int sum = 0; int index = 0; while (index < numbers.Length) { sum += numbers[index]; index++; } return sum; } //using foreach int getSum(int[] numbers) { int sum = 0; foreach (int number in numbers) { sum += number; } return sum; } Also, c# has a wonderful querying language for collections, called LINQ, which can be used to make a lot of tasks more simpler. For example: //without LINQ int getSumOfNumbersBiggerThan10(int[] numbers) { int sum = 0; foreach (int number in numbers) { if (number > 10) sum += number; } return sum } //with LINQ int getSumOfNumbersBiggerThan10(int[] numbers) { return numbers.Where(number => number > 10).Sum(); } You can read more on LINQ here: https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/getting-started-with-linq String Formatting c# has a string.Format function which is similar to the String.Format function in AGS. c# also has support for string interpolation, though, which usually gives a better experience. Let's go over the different of string.Format first: In AGS script: String posString = String.Format(\"The position is: %d,%d\", x, y); In c#: string posString = string.Format(\"The position is: {0},{1}\", x, y); The main different is that in AGS script you need to specify the type of the variables, where you don't have to do that in c#, but in c# you have to specify the location of the parameter in the string. AGS also has the %0Xd and %.Xf special formatting codes for zero padding and showing decimal places. c# also has special formatting codes for a lot more scenarios. So, for example, for padding to 5 zeroes and showing 3 decimal places, we can rewrite our previous formatting like this: string posString = string.Format(\"The position is: {0:00000.###},{1:00000.###}\", x, y); You can read about all the special formatting codes here: https://docs.microsoft.com/en-us/dotnet/standard/base-types/formatting-types AGS also uses the left bracket as a special code for a new line, in c# you can use Environment.NewLine instead. String Interpolation String interpolation is a newer type of formatting which allows placing the parameters directly in the string. For creating an interpolated string, you should prefix the string with $ , and then can directly put the parameters inside {} . So we can rewrite our previous example like this: string posString = $\"The position is: {x:00000.###},{y::00000.###}\"; You can read more about interpolated strings here: https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/interpolated-strings Constants (Compilation Flags) What in AGS script is called \"constants\" is actually 2 separate things in c#: constants and compilation flags. In c# constants are variables that cannot be changed ever: const int x = 5; x = 6; //This is illegal -> will not compile So, the AGS constant AGS_MAX_INV_ITEMS would have been defined as a constant in c# as well (though MonoAGS doesn't have all of the limit constants in AGS, there are no limits in MonoAGS). On the contrary, all of the AGS constants that might or might not be defined, those are compilation flags. The AGS directive #ifdef has an equivalent #if directive in c# and #ifndef equivalent is #if ! . The DEBUG compilation flag that exists in AGS also exists in c#, so you can use it to do things only when debugging: #if DEBUG //do something debug specific here. #endif All of the other AGS compilation flags are AGS specific and have no equivalents in MonoAGS. Except for #if , c# has more directives which you can see here: https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/preprocessor-directives/ Extender functions The c# equivalent to AGS extender functions is extension methods (note that in c# a function is called a method usually, but it means the same thing). The syntax is similar, with the exception that in c# you need to mark your method static and the class should also be marked as static (a static class is a class for which all the functions within are also static). So, in AGS you would write: function Scream(this Character*) { this.Say(\"AAAAARRRRGGGGHHHHHH!!!!\"); } In c# you would write: public static class CharacterExtensions { public static void Scream(this ICharacter character) { character.Say(\"AAAAARRRRGGGGHHHHHH!!!!\"); } } noloopcheck noloopcheck is something that's AGS specific and has no equivalent in c#. Or rather, the loop checks are AGS specific, you can think of all loops in c# as noloopcheck . async/await async/await is a c# specific mechanism for asynchronous programming which doesn't have an equivalent in AGS. As it's an important part of programming your game, there's a specific article devoted to async/await , which you can find here . API Comparisons This section goes over each API provided by AGS (based on the AGS manual), and compares against the MonoAGS API. Items marked with ? are items that currently don't have an equivalent in MonoAGS . AudioChannel The equivalent in MonoAGS would be ISound . Both are returned when you're playing an audio clip. The difference between AGS channel and MonoAGS sound is that a sound relates to the specific sound you're playing, it \"dies\" when you finished playing the sound. The channel however lives on throughout the game and can play other sounds in the future, so you can't always trust it's playing the sound you requested. AGS MonoAGS AGS Example MonoAGS Example Further notes Seek Position channel.Seek(2500); sound.Position = 2.5; Milliseconds in AGS, seconds in MonoAGS. In AGS the value is int meaning you can't get a lower resolution than milliseconds. In MonoAGS the value is float meaning you can go as low in resolution as the hardware understands. SetRoomLocation ? channel.SetRoomLocation(x,y); ? MonoAGS has the concept of a sound emitter which automatically pans the sound based on the location in the room, and can set the volume based on volume-changing areas, but nothing currently specifically exists for volume based on distance from a character. Speed Pitch channel.Speed = 2000; sound.Pitch = 2; Stop Stop channel.Stop(); sound.Stop(); ID SourceID channel.ID sound.SourceID IsPlaying HasCompleted if (!channel.IsPlaying) if (sound.HasCompleted) If you want to check whether the sound you played completed playing, MonoAGS provides you with a better option: In AGS, channel.IsPlaying might return true even if your sound finished playing, because another sound is now being played on that channel. LengthMs Duration channel.LengthMs sound.Duration Panning Panning channel.Panning = -100; sound.Panning = -1; -100 - 100 in AGS, -1 - 1 in MonoAGS. In AGS the value is int (meaning you can only have 200 values) where in MonoAGS the value is float (when you can have a range as big as the hardware understands). PlayingClip ? channel.PlayingClip ? This is critical in AGS due to the fact the channel might be playing a lot of clips in its lifetime. Much less important in MonoAGS as you can know which clip the sound is coming from, because you're playing that sound. Position Position if (channel.Position == 1500) if (channel.Position == 1.5) Milliseconds in AGS, seconds in MonoAGS Volume Volume channel.Volume = 100; sound.Volume = 1f; 0 - 100 in AGS, 0 - 1 in MonoAGS. In AGS the value is int (meaning you can only have 200 values) where in MonoAGS the value is float (when you can have a range as big as the hardware understands). Missing in AGS but exists in MonoAGS: Asynchronous completion API, Pause/Resume, Rewind, IsPaused, IsLooping, IsValid. AudioClip AGS MonoAGS AGS Example MonoAGS Example Further notes Play Play clip.Play(eAudioPriorityNormal, eOnce); clip.Play(eAudioPriorityNormal, eRepeat); clip.Play(false); clip.Play(true); There's no equivalence for audio priority currently. PlayFrom Seek the sound coming back from the clip. clip.PlayFrom(1000); var sound = clip.Play(); sound.Seek = 1; PlayQueued ? clip.PlayQueued(); ? Note that in AGS the number of available channels is 10; In MonoAGS the number of available channels is based on what the running hardware provides, which, on modern machines is usually at least 32 (and on older machines, usually at least 16), so this feature becomes less important. Stop You can query all playing sounds and stop them clip.Stop(); foreach (var sound in clip.CurrentlyPlayingSounds) sound.Stop(); FileType ? clip.FileType ? IsAvailable ? clip.IsAvailable ? Type ? clip.Type ? Missing in AGS but exists in MonoAGS: ID, CurrentlyPlayingSounds, Volume/Pitch/Panning (so you can change the template at runtime, not just from the editor), playing a clip while overriding default volume/pitch/panning. Character AGS MonoAGS AGS Example MonoAGS Example Further notes AddInventory Inventory.Items.Add cEgo.AddInventory(iKey); cEgo.Inventory.Items.Add(iKey) AddWaypoint Either use await or ContinueWith cSomeguy.Walk(160, 100); cSomeguy.AddWaypoint(50, 150); Using await: private async Task walk() { await cSomeguy.WalkAsync(160, 100); await cSomeguy.WalkAsync(50, 150); } (we can now call this walk method and either block (with another await) or doesn't block, it's up to us. Using ContinueWith: cSomeguy.WalkAsync(160, 100).ContinueWith(_ => cSomeguy.WalkAsync(50, 150)); Note what we gain using the await that we can't do with AGS: we can easily create an endless loop of non-blocking walking in circles: private async void endlessWalk() { while (true) { await cSomeguy.WalkAsync(50, 150); await cSomeguy.WalkAsync(160, 100);}} Animate AnimateAsync cEgo.Animate(3, 1, 0, eBlock, eBackwards); For blocking: await cEgo.AnimateAsync(jumpUpAnimation); . For non-blocking, do the same just without awaiting it: cEgo.AnimateAsync(jumpUpAnimation); . As for delay, repeat style and direction, those are configured as part of the animation (\"jumpUpAnimation\" in this scenario). It can be changed at run-time before animating, if you want. For example: jumpUpAnimation.Looping = LoopingStyle.BackwardsForwards; jumpUpAnimation.Loops = 15; jumpUpAnimation.DelayBetweenFrames = 3; Note that MonoAGS doesn't have the concepts of view and loop, just individual animations for manual animations, and directional animations for automatic animations like walk and idle. ChangeRoom ChangeRoomAsync cEgo.ChangeRoom(4, 50, 50); cEgo.ChangeRoomAsync(rLobby, 50, 50); Note that unlike AGS, you CAN wait for the change room to finish in your current script if you use await. ChangeRoomAutoPosition ? cEgo.ChangeRoomAutoPosition() ? ChangeView Outfit cEgo.ChangeView(5); cEgo.Outfit = outfitWithHat; Note that the concepts are not identical: ChangeView in AGS changes the walk animation, where Outfit in MonoAGS changes all animations in that outfit (which can be walk, idle, etc). FaceCharacter FaceDirectionAsync cEgo.FaceCharacter(cSomeGirl, eBlock); Non-blocking: cEgo.FaceDirectionAsync(cSomeGirl); , blocking: await cEgo.FaceDirectionAsync(cSomeGirl); Missing support for \"turning\" animation. FaceDirection FaceDirectionAsync cEgo.FaceDirection(eDirectionUpRight); await cEgo.FaceDirectionAsync(Direction.UpRight); FaceLocation FaceDirectionAsync cEgo.FaceLocation(50, 50, eBlock); Non-blocking: cEgo.FaceDirectionAsync(50, 50); , blocking: await cEgo.FaceDirectionAsync(50, 50); Missing support for \"turning\" animation. FaceObject FaceDirectionAsync cEgo.FaceObject(oFridge, eBlock); Non-blocking: cEgo.FaceDirectionAsync(oFridge); , blocking: await cEgo.FaceDirectionAsync(oFridge); Missing support for \"turning\" animation. FollowCharacter Follow cBadGuy.FollowCharacter(cEgo); cBadGuy.Follow(cEgo); Note that in MonoAGS you can follow more than just characters, including objects and even GUIs. GetAtScreenXY IHitTest.ObjectAtMousePosition or IHitTest.GetObjectAt if (Character.GetAtScreenXY(mouse.x, mouse.y) == cEgo){} if (hitTest.ObjectAtMousePosition == cEgo) {} or if (hitTest.GetObjectAt(200, 100)) {} GetProperty Properties.Ints.GetValue if (cEgo.GetProperty(\"Value\") > 200) {} if (cEgo.Properties.Ints.GetValue(\"Value\") > 200) {} GetTextProperty Properties.Strings.GetValue cEgo.GetTextProperty(\"Description\"); cEgo.Properties.Strings.GetValue(\"Description\"); SetProperty Properties.Ints.SetValue cEgo.SetProperty(\"XPLevel\", 10); cEgo.Properties.Ints.SetValue(\"XPLevel\", 10); SetTextProperty Properties.Strings.SetValue cEgo.SetTextProperty(\"Description\", \"I am handsome!\"); cEgo.Properties.Strings.SetValue(\"Description\", \"I am handsome!\"); HasExplicitLight ? if (cEgo.HasExplicitLight) {} ? HasInventory Inventory.Items.Contains if (cEgo.HasInventory(iKnife)) {} if (cEgo.Inventory.Items.Contains(iKnife)) {} IsCollidingWithChar CollidesWith if (cEgo.IsCollidingWithChar(cGuy) == 1) {} if (cEgo.CollidesWith(cGuy.X, cGuy.Y, state.Viewport)) {} Note that MonoAGS supports multiple viewports so we need to pass the viewport in which we'd like to test for collisions. IsCollidingWithObject (character) CollidesWith if (cEgo.IsCollidingWithChar(oBottle) == 1) {} if (cEgo.CollidesWith(oBottle.X, oBottle.Y, state.Viewport)) {} Note that MonoAGS supports multiple viewports so we need to pass the viewport in which we'd like to test for collisions. LightLevel Brightness cEgo.LightLevel cEgo.Brightness Note that unlike AGS, in MonoAGS the brightness does not override the tint, but is added on top of it. LockView Outfit cEgo.LockView(12); cEgo.Outfit = swimmingOutfit; LockViewAligned ? cEgo.LockViewAligned(12, 1, eAlignLeft); ? LockViewFrame To display a still frame, use Image, for actual locking set a different outfit cEgo.LockViewFrame(AGHAST, 2, 4) cEgo.Image = cEgo.Outfit[Animations.Aghast].Left.Frames[4].Sprite.Image; LockViewOffset ? cEgo.LockViewOffset(12, 1, -1); ? Note that while there's no direct equivalent, you can change offsets for individual animation frames, so you can do that manually (at run-time if you desire), for example: cEgo.Outfit[Animations.Walk].Left.Frames[0].Sprite.X = 5; //will offset the first left walking animation frame by 5 pixels to the right LoseInventory Inventory.Items.Remove cEgo.LoseInventory(iKnife); cEgo.Inventory.Items.Remove(iKnife); Move (character) set the outfit to an outfit without a walk animation cEgo.Move(155, 122, eBlock); Non-blocking: cEgo.Outfit = idleOnlyOutfit; cEgo.WalkAsync(155, 122); , blocking: cEgo.Outfit = idleOnlyOutfit; await cEgo.WalkAsync(155, 122); No support currently for \"walk anywhere\" PlaceOnWalkableArea PlaceOnWalkableArea cEgo.PlaceOnWalkableArea(); cEgo.PlaceOnWalkableArea(); RemoveTint Tint cEgo.RemoveTint(); cEgo.Tint = Colors.White; IsInteractionAvailable checking subscriber count on the interaction event if (cEgo.IsInteractionAvailable(eModeLookat) == 0) {} if (cEgo.Interactions.OnInteract(Verbs.Look).SubscribersCount == 0) {} RunInteraction Interactions.OnInteract(Verb).InvokeAsync cEgo.RunInteraction(eModeTalk); cEgo.Interactions.OnInteract(Verbs.Talk).InvokeAsync(); Say SayAsync cEgo.Say(\"Hello!\"); await cEgo.SayAsync(\"Hello!\"); SayAt ? cEgo.SayAt(\"Hello!\", 50, 50); await cEgo.SayAsync(\"Hello!\", (50, 50)); SayBackground SayAsync cEgo.SayBackground(\"Hello!\"); cEgo.SayAsync(\"Hello!\"); There's no way in AGS to know when SayBackground completes. MonoAGS gives you the task completion API for this: Task task = cEgo.SayAsync(\"Hello!\"); ... while (!task.IsCompleted) {..} , or simply: Task task = cEgo.SayAsync(\"Hello!\"); ... await task; SetAsPlayer IGameState.Player cEgo.SetAsPlayer(); state.Player = cEgo; SetLightLevel Brightness cEgo.SetLightLevel(100); cEgo.Brightness = new Vector4(2,2,2,2); SetIdleView Outfit cEgo.SetIdleView(5); cEgo.Outfit = outfitWithHat; Note that the concepts are not identical: SetIdleView in AGS changes the idle animation, where Outfit in MonoAGS changes all animations in that outfit (which can be walk, idle, etc). SetWalkSpeed WalkStep cEgo.SetWalkSpeed(5, 5); cEgo.WalkStep = new PointF(5, 5); StopMoving StopWalkingAsync cEgo.StopMoving(); cEgo.StopWalkingAsync(); Think ? cEgo.Think(\"Hmmmm..\"); ? Tint Tint cEgo.Tint(0, 250, 0, 30, 100); cEgo.Tint = Colors.Green; or cEgo.Tint = Color.FromRgba(0, 255, 0, 255); or cEgo.Tint = Color.FromHsla(200, 1, 1, 255); or cEgo.Tint = Color.FromHexa(59f442); TintBlue Tint.B cEgo.TintBlue cEgo.Tint.B TintGreen Tint.G cEgo.TintGreen cEgo.Tint.G TintRed Tint.R cEgo.TintRed cEgo.Tint.R TintSaturation Tint.GetSaturation cEgo.TintSaturation cEgo.Tint.GetSaturation() TintLuminance Tint.GetLightness cEgo.TintLuminance cEgo.Tint.GetLightness() UnlockView Outfit cEgo.UnlockView(); cEgo.Outfit = defaultOutfit; Walk WalkAsync cEgo.Walk(100, 100); For non blocking: cEgo.WalkAsync((100, 100)); , for blocking: await cEgo.WalkAsync((100, 100)); WalkStraight WalkStraight cEgo.WalkStraight(100, 100); await cEgo.WalkStraight((100, 100)); ActiveInventory Inventory.ActiveItem cEgo.ActiveInventory cEgo.Inventory.ActiveItem Animating Animation.State.IsPaused if (cEgo.Animating) {} if (!cEgo.Animation.State.IsPaused) {} AnimationSpeed Animation.Configuration.DelayBetweenFrames cEgo.AnimationSpeed = 4; cEgo.Animation.Configuration.DelayBetweenFrames = 4; Baseline Z cEgo.Baseline = 40; cEgo.Z = 40; BlinkInterval ? cEgo.BlinkInterval = 10; ? BlinkView ? cEgo.BlinkView = 10; ? BlinkWhileThinking property ? cEgo.BlinkWhileThinking = false; ? BlockingHeight ? cEgo.BlockingHeight = 20; ? BlockingWidth ? cEgo.BlockingWidth = 20; ? Clickable Enabled cEgo.Clickable = false; cEgo.Enabled = false; DestinationX WalkDestination.X cEgo.DestinationX cEgo.WalkDestination.X DestinationY WalkDestination.Y cEgo.DestinationY cEgo.WalkDestination.Y DiagonalLoops Configure your directional animation either with or without diagonal directions cEgo.DiagonalLoops = true; Nothing special needed for this to work Frame Animation.State.CurrentFrame cEgo.Frame cEgo.Animation.State.CurrentFrame HasExplicitTint Tint if (cEgo.HasExplicitTint) {} if (cEgo.Tint != Colors.White) {} ID ID cEgo.ID cEgo.ID IdleView Outfit[Animations.Idle] cEgo.IdleView cEgo.Outfit[Animations.Idle] IgnoreLighting ? cEgo.IgnoreLighting = 1; ? IgnoreWalkbehinds ? cEgo.IgnoreWalkbehinds = true; ? Probably not really needed in MonoAGS- with the combination of render layers, Z and parent-child relationships you have the ability control rendering order more easily InventoryQuantity InventoryItem.Qty player.InventoryQuantity[iCash.ID] iCash.Qty Loop Animation.State.CurrentLoop cEgo.Loop cEgo.Animation.State.CurrentLoop ManualScaling IgnoreScalingArea cEgo.ManualScaling = true; cEgo.IgnoreScalingArea = true; This is not a 1-to-1 fit. In MonoAGS you can still set manual scaling to be applied onto the walkable area scaling, even if IgnoreScalingArea is false. MovementLinkedToAnimation MovementLinkedToAnimation cEgo.MovementLinkedToAnimation = false; cEgo.MovementLinkedToAnimation = false; Moving IsWalking if (cEgo.IsMoving) {} if (cEgo.IsWalking) {} Name DisplayName cEgo.Name = \"Bernard\"; cEgo.DisplayName = \"Bernard\"; NormalView Outfit[Animations.Walk] cEgo.NormalView cEgo.Outfit[Animations.Walk]; PreviousRoom PreviousRoom if (cEgo.PreviousRoom == 5) {} if (cEgo.PreviousRoom == elevator) {} In MonoAGS, PreviousRoom actually provides you with access to the entire room's API, not just its ID, so you can query the room's objects, for example. Room Room if (cEgo.Room == 5) {} if (cEgo.Room == elevator) {} In MonoAGS, Room actually provides you with access to the entire room's API, not just its ID, so you can query the room's objects, for example. ScaleMoveSpeed AdjustWalkSpeedToScaleArea cEgo.ScaleMoveSpeed = true; cEgo.AdjustWalkSpeedToScaleArea = true; ScaleVolume scalingArea.ScaleVolume cEgo.ScaleVolume = true; scalingArea.ScaleVolume = true; This is not a 1-to-1 match. In AGS, scale volume scales the volume according to the scaling of the character, and it doesn't matter if the scaling was set manually or in an area. In MonoAGS, this is specfically for areas, there is no equivalent configuration for manual scaling changes currently. Scaling ScaleX and ScaleY cEgo.ManualScaling = true; cEgo.Scaling = 200; cEgo.ScaleX = 2; cEgo.ScaleY = 2; In AGS the range is 5 to 200, where the value must be an integer and 100 is not scaled. In MonoAGS there's no \"allowed\" range, the value is a float (so you can do cEgo.ScaleX = 0.5f ) and 1 is not scaled. Solid ? if (cEgo.Solid) {} ? Speaking Outfit[Animations.Speak].Animation.State.IsPaused if (cEgo.Speaking) {} if (!cEgo.Outfit[Animations.Speak].Animation.State.IsPaused) {} SpeakingFrame Outfit[Animations.Speak].Animation.State.CurrentFrame cEgo.SpeakingFrame cEgo.Outfit[Animations.Speak].Animation.State.CurrentFrame SpeechAnimationDelay Outfit[Animations.Speak].Animation.Configuration.DelayBetweenFrames cEgo.SpeechAnimationDelay cEgo.Outfit[Animations.Speak].Animation.Configuration.DelayBetweenFrames SpeechColor SpeechConfig.TextConfig.Brush cEgo.SpeechColor = 14; cEgo.SpeechConfig.TextConfig.Brush = blueSolidBrush; SpeechView Outfit[Animations.Speak] cEgo.SpeechView cEgo.Outfit[Animations.Speak] Thinking ? if (cEgo.Thinking) {} ? There's nothing particular about Think in MonoAGS currently, but using outfit you can assign and query specific animations, so you can create a \"think\" animation if it fits your game. ThinkingFrame Outfit[Animations.Think].Animation.State.CurrentFrame cEgo.ThinkingFrame cEgo.Outfit[Animations.Think].Animation.State.CurrentFrame There's nothing particular about Think in MonoAGS currently, but using outfit you can assign and query specific animations, so you can create a \"think\" animation if it fits your game. ThinkView Outfit[Animations.Think] cEgo.ThinkView cEgo.Outfit[Animations.Think] There's nothing particular about Think in MonoAGS currently, but using outfit you can assign and query specific animations, so you can create a \"think\" animation if it fits your game. Transparency Opacity cEgo.Transparency = 100; cEgo.Opacity = 0; The range for AGS transparency is 0-100, the range for MonoAGS opacity is 0-255 TurnBeforeWalking ? cEgo.TurnBeforeWalking = 1; ? View Animation cEgo.View cEgo.Animation WalkSpeedX WalkStep.X cEgo.WalkSpeedX cEgo.WalkStep.X WalkSpeedY WalkStep.Y cEgo.WalkSpeedY cEgo.WalkStep.Y x X cEgo.x cEgo.X y Y cEgo.y cEgo.Y z JumpOffset.Y cEgo.Z = 100; cEgo.JumpOffset = new PointF(0, 100); This requires the jump component to be added to the character. Missing in AGS but exists in MonoAGS: asynchronous speech/walk, configuring speech background color/shadows + outlines/text brushes/borders/alignments/text skipping/portraits, hooking/customizing speech/walk/path finding, face direction based on where somebody else is looking, iterating/querying inventory items, subscribing/unsubscribing interaction events during the game, more configurations for following, follow objects which are not characters, query the current follow target, and as a character is an extension of object, see the list for object for more stuff. DateTime AGS MonoAGS AGS Example MonoAGS Example Further notes Now Now DateTime.Now DateTime.Now DayOfMonth DayOfMonth now.DayOfMonth now.DayOfMonth Hour Hour now.Hour now.Hour Minute Minute now.Minute now.Minute Month Month now.Month now.Month RawTime Need to calculate DateTime.Now.RawTime (DateTime.UtcNow - new DateTime(1970,1,1)).TotalSeconds Second Second now.Second now.Second Year Year now.Year now.Year Missing in AGS but exists in MonoAGS: well, nothing here is MonoAGS specific, this is all c#. You can see all available functions here: https://msdn.microsoft.com/en-us/library/system.datetime(v=vs.110).aspx Also note, that if you need correct handling of time zones and DST, this a recommended library which you can add to your project: https://github.com/nodatime/nodatime Dialog AGS MonoAGS AGS Example MonoAGS Example Further notes DisplayOptions ? dOldMan.DisplayOptions(); ? GetOptionState option.Label.UnderlyingVisible (and optionally combine with ShowOnce if you need to compare with \"off forever\") if (dJoeExcited.GetOptionState(2) == eOptionOffForever) {} dOption = dJoeExcited.Options[2]; if (!dOption.Label.UnderlyingVisible && dOption.ShowOnce) {} GetOptionText option.Label.Text dJoeExcited.GetOptionText(3) dJoeExcited.Options[3].Label.Text HasOptionBeenChosen option.HasOptionBeenChosen dJoeExcited.HasOptionBeenChosen(3) dJoeExcited.Options[3].HasOptionBeenChosen ID ? dJoeExcited.ID ? It doesn't seem there's any need for an id for the dialog, you can just compare with the dialog reference if you need equality checks OptionCount Options.Count dJoeExcited.OptionCount dJoeExcited.Options.Count SetHasOptionBeenChosen option.HasOptionBeenChosen dJoeExcited.SetHasOptionBeenChosen(3, false); dJoeExcited.Options[3].HasOptionBeenChosen = false; SetOptionState Either set option.Label.Visible or option.ShowOnce dJoeExcited.SetOptionState(2, eOptionOff) For option off/on: dJoeExcited.Options[2].Label.Visible = false; , for off forever, you can add: dJoeExcited.Options[2].ShowOnce = true; ShowTextParser ? if (cJoeExcited.ShowTextParser) {} ? Start RunAsync dJoeExcited.Start(); dJoeExcited.RunAsync(); StopDialog ? dJoeExcited.StopDialog(); ? Missing in AGS but exists in MonoAGS: create and change dialogs at run-time, customize appearances of everything dialog related, asynchronously wait for a dialog to complete, automatic grey-out (or any desired rendering) for already selected options, show/hide dialog options when speaking, run a specific dialog option on demand, enable/disable specific dialog actions. DialogOptionsRenderingInfo AGS MonoAGS AGS Example MonoAGS Example Further notes RunActiveOption option.RunAsync info.RunActiveOption(); await option.RunAsync(); There's no support in MonoAGS for having an \"active option\", you just select the option you want to run. Update Not Needed info.Update(); N/A No need for this in MonoAGS currently, dialog is continously rendered. ActiveOptionID Not Needed info.ActiveOptionID = 1 N/A This is required for custom dialog rendering in AGS, as the assumption is you get a drawing surface and natively drawing all the options, and then AGS can't do hit-tests itself so you need to worry about it. This is not required in MonoAGS, as you can provide individual rendering for the dialog options and they can still be used as hit-test targets. DialogToRender ? info.DialogToRender ? The way to do custom rendering is a bit different in MonoAGS. There's no one single hook to customize the dialogs, but you can choose on which layer you want to provide your own different implementation. So you can provide a different implementation for IDialogLayout (which gets the dialog graphics and options graphics and chooses how to place them), or you can provide a different implementation for each (or for specific) IDialogOption to change how they are rendered/behave, or you can provide a different implementation for IDialog to completely rewrite the dialog mechanism (but still be able to hook it up to existing dialog code). Each of those custom implementations can be either changed for all dialogs or for specific dialogs. HasAlphaChannel ? info.HasAlphaChannel = true; All graphics always have an alpha channel Height dialog.Graphics.Height info.Height dialog.Graphics.Height ParserTextBoxWidth ? info.ParserTextBoxWidth ? ParserTextBoxX ? info.ParserTextBoxX ? ParserTextBoxY ? info.ParserTextBoxY ? Surface Not needed info.Surface N/A See notes on \"ActiveOptionID\" and \"DialogToRender\" to see why this is not needed. Width dialog.Graphics.Width info.Width dialog.Graphics.Width X dialog.Graphics.X info.X dialog.Graphics.X Y dialog.Graphics.Y info.Y dialog.Graphics.Y Missing in AGS but exists in MonoAGS: The whole process for custom dialog rendering is completely different (see notes on DialogToRender ). DrawingSurface Currently nothing built in that's equivalent for this, but one could directly implement IImageRenderer , assign it to its object with obj.CustomRenderer = myRenderer and use OpenGL in that renderer implementation to do everything desired. DynamicSprite The concept of dynamic sprite is not really needed in MonoAGS, as everything is dynamic by default, so you can create objects, characters, animations, etc, all in run-time. So in this section, equivalent behaviors might be found on one or more levels: bitmaps, images (container above bitmap which also adds texture information), sprites (container above image which adds abilities for run-time transforms) and objects (which contain sprites as individual animation frames or a single image). AGS MonoAGS AGS Example MonoAGS Example Further notes Create new EmptyImage DynamicSprite.Create(50, 30); new EmptyImage(50, 30); CreateFromBackground LoadImage DynamicSprite.CreateFromBackground() graphicsFactory.LoadImage(state.Room.Image.OriginalBitmap) CreateFromDrawingSurface ? DynamicSprite.CreateFromDrawingSurface(surface, 0, 0, 10, 10); ? While there's nothing drawing area specific, one could implement a custom renderer for doing something like this. CreateFromExistingSprite LoadImage DynamicSprite.CreateFromExistingSprite(20); graphicsFactory.LoadImage(existingImage.OriginalBitmap) CreateFromFile LoadImage DynamicSprite.CreateFromFile(\"door.png\") graphicsFactory.LoadImage(\"door.png\") CreateFromSaveGame ? DynamicSprite.CreateFromSaveGame(1, 50, 50) ? CreateFromScreenShot ? DynamicSprite.CreateFromScreenShot(80, 50) ? ChangeCanvasSize ? DynamicSprite.ChangeCanvasSize(sprite.Width + 10, sprite.Height, 5, 0); ? While there's nothing specific for this, this could be implemented by manual bitmap manipulations (but it's tedious): you first create a bitmap with the new size, manually get pixels from the original bitmap and set them in the new bitmap, then load an image from the new bitmap. CopyTransparencyMask ? DynamicSprite.CopyTransparencyMask ? While there's nothing specific for this, this could be implemented by manual bitmap manipulations (but it's tedious): you first create a bitmap with the new size, manually get pixels from the original bitmap and set them in the new bitmap, then load an image from the new bitmap. Crop bitmap.Crop sprite.Crop(10, 10, sprite.Width - 10, sprite.Height - 10); graphicsFactory.LoadImage(sprite.OriginalBitmap.Crop(new Rectangle(10, 10, sprite.Width - 10, sprite.Height - 10))); Also, instead of cropping the bitmap, one could add an ICropSelfComponent to the object which will crop the rendered object at run-time (without touching the bitmap). Delete ? sprite.Delete(); ? Flip FlipHorizontally or FlipVertically sprite.Flip(eFlipUpsideDown); obj.FlipHorizontally(); GetDrawingSurface ? sprite.GetDrawingSurface() ? While there's nothing drawing area specific, one could implement a custom renderer for doing something like this. Resize ScaleX and ScaleY sprite.Resize(100, 50); obj.ScaleX = 100; obj.ScaleY = 50; Rotate Angle sprite.Rotate(180); obj.Angle = 180; SaveToFile bitmap.SafeToFile sprite.SaveToFile(\"abc.png\"); sprite.OriginalBitmap.SaveToFile(\"abc.png\"); Tint Tint sprite.Tint(0, 250, 0, 30, 100); sprite.Tint = Colors.Green; or sprite.Tint = Color.FromRgba(0, 255, 0, 255); or sprite.Tint = Color.FromHsla(200, 1, 1, 255); or sprite.Tint = Color.FromHexa(59f442); ColorDepth ? sprite.ColorDepth ? Graphic ID sprite.Graphic image.ID Height Height sprite.Height image.Height Width Width sprite.Width image.Width File AGS MonoAGS AGS Example MonoAGS Example Further notes Open Open File *output = File.Open(\"temp.tmp\", eFileWrite); var output = File.Open(\"temp.tmp\", FileMode.Create); Close Close output.Close(); output.Close(); Delete Delete File.Delete(\"temp.tmp\"); File.Delete(\"temp.tmp\"); Exists Exists if (File.Exists(\"temp.tmp\")) {} if (File.Exists(\"temp.tmp\")) {} ReadInt BinaryReader.ReadInt32 int number; number = input.ReadInt(); using (var reader = new BinaryReader(File.OpenRead(\"file.txt\")) ) { char c = reader.ReadInt32(); } ReadRawChar BinaryReader.ReadChar String buffer = String.Format(\"%c\", input.ReadRawChar()); using (var reader = new BinaryReader(File.OpenRead(\"file.txt\")) ) { char c = reader.ReadChar(); } ReadRawInt BinaryReader.ReadInt32 int number; number = input.ReadRawInt(); using (var reader = new BinaryReader(File.OpenRead(\"file.txt\")) ) { char c = reader.ReadInt32(); } ReadRawLineBack StreamReader.ReadLine String line = input.ReadRawLineBack(); using (var reader = new StreamReader(\"file.txt\")) { string line = reader.ReadLine(); } ReadStringBack BinaryReader.ReadString String buffer = input.ReadStringBack(); using (var reader = new BinaryReader(File.OpenRead(\"file.txt\")) ) { char c = reader.ReadInt32(); Seek BaseStream.Seek input.Seek(256); using (var reader = new BinaryReader(File.OpenRead(\"file.txt\")) ) { reader.BaseStream.Seek(256, SeekOrigin.Begin); WriteInt BinaryWriter.Write output.WriteInt(6); using (var writer = new BinaryWriter(File.Open(\"temp.tmp\", FileMode.Create))) { writer.Write(6); WriteRawChar BinaryWriter.Write output.WriteRawChar('A'); using (var writer = new BinaryWriter(File.Open(\"temp.tmp\", FileMode.Create))) { writer.Write('A'); WriteRawLine StreamWriter.WriteLine output.WriteRawLine(\"My line\"); using (var writer = new StreamWriter(\"file.txt\")) { writer.WriteLine(\"My line\"); } WriteString BinaryWriter.Write output.WriteString(\"test string\"); using (var writer = new BinaryWriter(File.Open(\"temp.tmp\", FileMode.Create))) { writer.Write(\"test string\"); EOF BaseStream.Position while (!output.EOF) {} while (reader.BaseStream.Position != reader.BaseStream.Length) Error try/catch output.WriteInt(51); if (output.Error) { Display(\"Error writing the data!\"); } try { writer.Write(51); } catch (Exception e) { AGSMessageBox.DisplayAsync($\"Error while writing the data. The error message is: {e.Message}\"); } Position BaseStream.Position input.Position reader.BaseStream.Position Missing in AGS but exists in MonoAGS: well, nothing here is MonoAGS specific, this is all c#. You can see all available functions here: https://msdn.microsoft.com/en-us/library/system.io.file(v=vs.110).aspx https://msdn.microsoft.com/en-us/library/system.io.binaryreader(v=vs.110).aspx https://msdn.microsoft.com/en-us/library/system.io.binarywriter(v=vs.110).aspx https://msdn.microsoft.com/en-us/library/system.io.streamreader(v=vs.110).aspx https://msdn.microsoft.com/en-us/library/system.io.streamwriter(v=vs.110).aspx https://msdn.microsoft.com/en-us/library/system.io.filestream(v=vs.110).aspx Game / Global functions AGS MonoAGS AGS Example MonoAGS Example Further notes AbortGame throw AbortGame(\"Error in game!\"); throw new Exception(\"Error im game!\"); CallRoomScript Nothing specific, but you can create a shared interfaces between your rooms and call it. CallRoomScript(1); ... function on_call(int value) {...} public interface IOnCall { void on_call(int value); } .. public class MyRoom : IOnCall { public void on_call(int value) {...} } ... (state.Room as IOnCall)?.on_call(1); ChangeTranslation ? Game.ChangeTranslation(\"Spanish\") ? ClaimEvent event.Claimed ClaimEvent(); someEvent.Subscribe(onMyEvent); ... void onMyEvent(ref ClaimEventToken token) { token.Claimed = true; } Debug ? Debug(0); ? DeleteSaveSlot N/A DeleteSaveSlot(130); MonoAGS doesn't have the concept of save slots, you can just delete the save file. DisableInterface ? DisableInterface(); There's nothing specific currently, but you can disable all GUI controls and change the cursor. DoOnceOnly Repeat.OnceOnly if (Game.DoOnceOnly(\"open cupboard\")) {} if Repeat.OnceOnly(\"open cupboard\") {} EnableInterface ? EnableInterface(); There's nothing specific currently, but you can disable all GUI controls and change the cursor. EndCutscene Cutscene.End EndCutscene(); state.Cutscene.End(); GetColorFromRGB Color.FromRgba Game.GetColorFromRGB(0, 255, 0); Color.FromRgba(0, 255, 0, 255); GetFrameCountForLoop animation.Frames.Count Game.GetFrameCountForLoop(SWIMMING, 2); cEgo.Outfit[Animations.Swim].Left.Frames.Count GetGameOption ? GetGameOption(OPT_WALKONLOOK) ? There's a lot of unrelated very specific configurations for AGS here, some of them have equivalents in MonoAGS, see SetGameOption for more details. GetGameSpeed state.Speed GetGameSpeed(); game.State.Speed GetLocationName hitTest.ObjectAtMousePosition or hitTest.GetObjectAt if (GetLocationName(mouse.x, mouse.y) == \"Hero\") {} if (hitTest.ObjectAtMousePosition?.DisplayName == \"Hero\") {} or if (hitTest.GetObjectAt(200, 100)?.DisplayName == \"Hero\") {} GetLocationType hitTest.ObjectAtMousePosition or hitTest.GetObjectAt if (GetLocationType(mouse.x, mouse.y) == eLocationCharacter) {} if (hitTest.ObjectAtMousePosition is ICharacter) {} or if (hitTest.GetObjectAt(200, 100) is ICharacter) {} GetLoopCountForView GetAllDirections Game.GetLoopCountForView(SWIMMING) cEgo.Outfit[Animation.Swim].GetAllDirections().Count() GetRunNextSettingForLoop ? Game.GetRunNextSettingForLoop(SWIMMING, 5) ? GetSaveSlotDescription ? Game.GetSaveSlotDescription(10) ? GetTextHeight Font.MeasureString GetTextHeight(\"The message on the GUI!\", Game.NormalFont, 100) AGSGameSettings.DefaultTextFont.MeasureString(\"The message on the GUI!\", 100).Height GetTextWidth Font.MeasureString GetTextWidth(\"Hello!\", Game.NormalFont) AGSGameSettings.DefaultTextFont.MeasureString(\"Hello!\").Width GetTranslation ? GetTranslation(\"secret\") ? GetViewFrame Frames[index] Game.GetViewFrame(SWIMMING, 2, 3) cEgo.Outfit[Animations.Swim].Left.Frames[3] GiveScore ? GiveScore(5) ? Nothing specific in MonoAGS for this, but this could be easily implemented in just a few lines: public static class Score { public static int Score { get; private set; } public static void GiveScore(int score) { Score += score; Sounds.Score.Play();}} GetFontHeight Font.SizeInPoints GetFontHeight(eFontSpeech) myFont.SizeInPoints GetFontLineSpacing ? GetFontLineSpacing(eFontSpeech) ? Note that you can use MeasureString to get accurate measurements of texts: myFont.MeasureString(\"Hello world\"); InputBox ? String name = Game.InputBox(\"!What is your name?\"); ? IsGamePaused state.Paused if (IsGamePaused()) {} if (game.State.Paused) {} IsInterfaceEnabled ? if (IsInterfaceEnabled()) {} ? There's nothing specific for this in MonoAGS , but you can query (and set) enabled/disabled for individual GUI components. IsInteractionAvailable checking subscriber count on the interaction event if (IsInteractionAvailable(mouse.x,mouse.y, eModeLookat) == 0) {} if (hitTest.ObjectAtMousePosition != null && hitTest.ObjectAtMousePosition.Interactions.OnInteract(Verbs.Look).SubscribersCount == 0) {} IsKeyPressed input.IsKeyDown if (IsKeyPressed(eKeyUpArrow)) {} if (game.Input.IsKeyDown(Key.Up)) {} IsTimerExpired Stopwatch.Elapsed SetTimer(1, 3000); ... if (IsTimerExpired(1)) {} Stopwatch myTimer = new Stopwatch(); myTimer.Start(); ... if (myTimer.Elapsed.Seconds > 3) {} IsTranslationAvailable ? if (IsTranslationAvailable() == 1) {} ? PauseGame state.Paused PauseGame(); game.State.Paused = true; QuitGame game.Quit QuitGame(0); game.Quit(); No built-in support in MonoAGS for \"ask first\", though this could be easily coded by using a message box: if (await AGSMessageBox.YesNoAsync(\"Are you sure you want to quit?\")) { game.Quit(); } Random MathUtils.Random().Next int ran = Random(2); int ran = MathUtils.Random().Next(0, 2); RestartGame SaveLoad.Restart() RestartGame(); game.SaveLoad.Restart(); RestoreGameDialog AGSSelectFileDialog.SelectFile RestoreGameDialog(); await AGSSelectFileDialog.SelectFile(\"Select file to load\", FileSelection.FileOnly); RestoreGameSlot SaveLoad.Load RestoreGameSlot(5); await game.SaveLoad.LoadAsync(\"save.bin\"); RunAGSGame Process.Start RunAGSGame (\"MyGame.exe\", 0, 51); Process.Start(\"MyGame.exe\"); SaveGameDialog AGSSelectFileDialog.SelectFile SaveGameDialog(); await AGSSelectFileDialog.SelectFile(\"Select file to save\", FileSelection.FileOnly); SaveGameSlot SaveLoad.Save SaveGameSlot(30, \"save game\"); await game.SaveLoad.SaveAsync(\"save.bin\"); SaveScreenShot ? SaveScreenshot(\"pic.pcx\"); ? SetAmbientLightLevel ? SetAmbientLightLevel(50); ? SetAmbientTint ? SetAmbientTint(0, 0, 250, 30, 100); ? SetGameOption ? SetGameOption(OPT_WALKONLOOK, 1); ? There's a lot of unrelated very specific configurations for AGS here, some of them have equivalents in MonoAGS: OPT_WALKONLOOK + OPT_NOWALKMODE -> Configure the \"approach\" component, for example: cEgo.ApproachStyle.ApproachWhenVerb[Verbs.Look] = ApproachHotspots.AlwaysWalk , OPT_PIXELPERFECT -> can be configured per entity: cEgo.PixelPerfect(false); , OPT_FIXEDINVCURSOR -> can be configured per inventory item: iKnife.CursoreGraphics = iKnife.Graphics; , OPT_CROSSFADEMUSIC -> you have several more configuration options here, for example: var crossFade = game.AudioSettings.RoomMusicCrossFading; crossFade.FadeIn = true; crossFade.FadeOut = false; crossFade.FadeInSeconds = 5f; crossFade.EaseFadeIn = Ease.QuadIn; , OPT_PORTRAITPOSITION => cEgo.SpeechConfig.PortraitConfig.Positioning = PortraitPositioning.Alternating; SetGameSpeed state.Speed SetGameSpeed(80); game.State.Speed = 80; SetMultitaskingMode ? SetMultitaskingMode(1); ? SetRestartPoint SaveLoad.SetRestartPoint SetRestartPoint(); game.SaveLoad.SetRestartPoint(); SetSaveGameDirectory ? Game.SetSaveGameDirectory(\"My cool game saves\"); ? MonoAGS does not have a \"save game directory\" because when you save a game you select the directory to save in. SetTextWindowGUI ? SetTextWindowGUI(4); ? SetTimer Stopwatch.Start SetTimer(1, 3000); ... if (IsTimerExpired(1)) {} Stopwatch myTimer = new Stopwatch(); myTimer.Start(); ... if (myTimer.Elapsed.Seconds > 3) {} SkipUntilCharacterStops ? SkipUntilCharacterStops(EGO); ? StartCutscene Cutscene.Start StartCutscene(); state.Cutscene.Start(); UpdateInventory N/A UpdateInventory(); N/A Not needed UnPauseGame Paused UnPauseGame(); state.Paused = false; Wait Task.Delay or Thread.Sleep Wait(80); await Task.Delay(80); or Thread.Sleep(80); Note, that both methods are not perfect fit-ins, as it waits milliseconds and not game loops as in Wait , so we'll need to add another option. WaitKey ? WaitKey(200); ? WaitMouseKey ? WaitMouseKey(200); ? AudioClipCount AudioSystem.AudioClips.Count Game.AudioClipCount game.Audio.AudioClips.Count AudioClips AudioSystem.AudioClips Game.AudioClips game.Audio.AudioClips CharacterCount calculate yourself Game.CharacterCount state.Rooms.Select(r => r.Objects.Count(o => o is ICharacter)).Sum()) DialogCount ? Game.DialogCount ? FileName use dotnet functions Game.FileName Process.GetCurrentProcess().MainModule.FileName or Path.GetFileName(Assembly.GetEntryAssembly().Location) FontCount ? Game.FontCount ? GlobalStrings GlobalVariables.Strings Game.GlobalStrings[15] = \"Joe\"; state.GlobalVariables.Strings.SetValue(\"ImportantCharacterName\", \"Joe\"); GUICount state.UI.Count Game.GUICount state.UI.Count IgnoreUserInputAfterTextTimeoutMs ? Game.IgnoreUserInputAfterTextTimeoutMs = 1000; ? This is currently hard-coded to 500 ms in MonoAGS (in FastFingerChecker class), and you can bypass it with a custom value like this (should be done at the very start of the game): FastFingerChecker checker = new FastFingerChecker { FastFingerSafeBuffer = 1000 }; Resolver.Override(resolver => resolver.Builder.RegisterInstance(checker)); InSkippableCutscene Cutscene.IsRunning if (Game.InSkippableCutscene) {} if (state.Cutscene.IsRunning) {} InventoryItemCount ? Game.InventoryItemCount ? MinimumTextDisplayTimeMs ? Game.MinimumTextDisplayTimeMs = 1000; ? Currently hard-coded to 40 ms in MonoAGS . MouseCursorCount ? Game.MouseCursorCount ? Name Title Game.Name = \"My game\"; game.Title = \"My game\"; NormalFont AGSGameSettings.DefaultTextFont Game.NormalFont = eFontSpecial; AGSGameSettings.DefaultTextFont = Fonts.Special; SkippingCutscene Cutscene.IsSkipping if (!Game.SkippingCutscene) {} if (!state.Cutscene.IsSkipping) {} SpeechFont AGSGameSettings.DefaultSpeechFont Game.SpeechFont = eFontStandard; AGSGameSettings.DefaultSpeechFont = Fonts.Standard; SpriteHeight sprite.Height Game.SpriteHeight[15] animation.Left.Frames[3].Sprite.Height SpriteWidth sprite.Width Game.SpriteWidth[15] animation.Left.Frames[3].Sprite.Width TextReadingSpeed SayConfig.TextDelay Game.TextReadingSpeed = 10; cEgo.SayConfig.TextDelay = 100; Note the difference in units: in AGS it stands for \"number of characters to read in a second\", where in MonoAGS it stands for \"number of milliseconds to wait for each character\". TranslationFilename ? if (Game.TranslationFilename == \"German\") {} ? UseNativeCoordinates N/A if (Game.UseNativeCoordinates) {} N/A Not needed in MonoAGS (there is no low resolution backwards-compatible mode) ViewCount ? Game.ViewCount ? GUI In AGS there's a separation between GUI and GUI controls, where GUI is a panel containing other controls. In MonoAGS there's no distinction like this, as every control can contain other controls, however there is a \"Panel\" in MonoAGS which is a naked UI control without any other components added to it, which is probably the closest equivalent for AGS \"GUI\". AGS MonoAGS AGS Example MonoAGS Example Further notes Centre Position yourself gPanel.Centre(); gPanel.Pivot = new PointF(0.5f, 0.5f); gPanel.X = game.Settings.VirtualResolution.Width / 2; gPanel.Y = game.Settings.VirtualResolution.Height / 2; The example assumes that the panel has no parent and using the default game's resolution. GetAtScreenXY hitTest.ObjectAtMousePosition or hitTest.GetObjectAt GUI.GetAtScreenXY(mouse.x, mouse.y) hitTest.ObjectAtMousePosition or hitTest.GetObjectAt(200, 100) ProcessClick use hit testing and invoke the interaction event GUI.ProcessClick(100, 50, eModeLookAt); var myGui = hitTest.GetObjectAt(100, 50, obj => obj is IUIControl); myButton?.Interactions.OnInteract(Verbs.Look).InvokeAsync(); SetPosition Position gPanel.SetPosition(50, 50); gPanel.Position = (50, 50); SetSize BaseSize gPanel.setSize(100, 100); gPanel.BaseSize = new SizeF(100, 100); BackgroundGraphic Image gPanel.BackgroundGraphic = 5; gPanel.Image = myBackgroundImage; Clickable Enabled or ClickThrough gPanel.Clickable = false; gPanel.Enabled = false; or gPanel.ClickThrough = false; Note the different between Enabled and ClickThrough in MonoAGS : Enabled disables the panel and all of the controls within, while ClickThrough disables the panel itself but still allows for inner children to respond. ControlCount TreeNode.ChildrenCount gPanel.ControlCount gPanel.TreeNode.ChildrenCount Controls TreeNode.Children gPanel.Controls gPanel.TreeNode.Children Height BaseSize.Height gPanel.Height = 100; gPanel.BaseSize = new SizeF(gPanel.BaseSize.Width, 100); ID ID gPanel.ID gPanel.ID Transparency Opacity gPanel.Transparency = 100; gPanel.Opacity = 0; The range for AGS transparency is 0-100, the range for MonoAGS opacity is 0-255 Visible Visible gPanel.Visible = true; gPanel.Visible = true; Width BaseSize.Width gPanel.Width = 100; gPanel.BaseSize = new SizeF(100, gPanel.BaseSize.Height); X X gPanel.X = 5; gPanel.X = 5; Y Y gPanel.Y = 5; gPanel.Y = 5; ZOrder Z gPanel.ZOrder = 5; gPanel.Z = 5; Missing in AGS but exists in MonoAGS: scaling and rotating panels, scrolling panels, nesting panels (or any other object) within panels (or any other object), placing GUIs as part of the world (behind non-GUIs), different resolution from the game, custom rendering (including shaders), mouse events (enter, leave, move, click, double-click, down, up, lost focus), sub-pixel positioning, skinning, and also, as panels extend objects, see objects for more stuff. GUI Control AGS MonoAGS AGS Example MonoAGS Example Further notes GetAtScreenXY hitTest.ObjectAtMousePosition or hitTest.GetObjectAt GUIControl.GetAtScreenXY(mouse.x, mouse.y) hitTest.ObjectAtMousePosition or hitTest.GetObjectAt(200, 100) AsType as gIconbar.Controls[2].AsButton gIconBar.TreeNode.Children[2] as IButton You can also use is : if (child is IButton button) { button.X = 500; } BringToFront Z btnBigButton.BringToFront() btnBigButton.Z = btnBigButton.TreeNode.Parent.TreeNode.Children.Max(c => c.Z) + 1; Clickable ClickThrough btnSaveGame.Clickable = false; btnSaveGame.ClickThrough = true; Enabled Enabled btnSaveGame.Enabled = false; btnSaveGame.Enabled = false; Height BaseSize.Height btnConfirm.Height = 20; btnConfirm.BaseSize = new SizeF(btnConfirm.BaseSize.Width, 20); ; ID ID btnConfirm.ID btnConfirm.ID OwningGUI TreeNode.Parent btnConfirm.OwningGUI btnConfirm.TreeNode.Parent SendToBack Z btnBigButton.SendToBack() btnBigButton.Z = btnBigButton.TreeNode.Parent.TreeNode.Children.Min(c => c.Z) - 1; SetPosition Position btnConfirm.SetPosition(40, 10); btnConfirm.Position = (40, 10); SetSize BaseSize invMain.SetSize(160, 100); invMain.BaseSize = new SizeF(160, 100); Visible Visible btnSaveGame.Visible = false; btnSaveGame.Visible = false; Width BaseSize.Width btnConfirm.Width = 20; btnConfirm.BaseSize = new SizeF(20, btnConfirm.BaseSize.Height); ; X X btnConfirm.X = 10; btnConfirm.X = 10; Y Y btnConfirm.Y = 20; btnConfirm.Y = 20; ZOrder Z btnConfirm.ZOrder = 20; btnConfirm.Z = 20; Missing in AGS but exists in MonoAGS: scaling and rotating controls, nesting controls (or any other object) within controls (or any other object), placing GUI controls as part of the world (behind non-GUIs), different resolution from the game, custom rendering (including shaders), mouse events (enter, leave, move, click, double-click, down, up, lost focus), sub-pixel positioning, skinning, and also, as the controls extend objects, see objects for more stuff. Button AGS MonoAGS AGS Example MonoAGS Example Further notes Click MouseClicked.InvokeAsync button.Click() button.MouseClicked.InvokeAsync() Animate AnimateAsync btnDeathAnim.Animate(6, 2, 4, eRepeat); btnDeathAnim.AnimateAsync(deathAnimation); //The delay & repeat for the animation is configured in the animation configuration Animating Animation.State.IsPaused if (button.Animating) {} if (!button.Animation.State.IsPaused) {} Frame Animation.State.CurrentFrame button.Frame button.Animation.State.CurrentFrame Loop Animation.State.CurrentLoop button.Loop button.Animation.State.CurrentLoop View Animation button.View button.Animation ClipImage image is always clipped to the button size btnOK.ClipImage = true; N/A Font TextConfig.Font btnOK.Font = eFontMain; btnOK.TextConfig.Font = Fonts.Main; Graphic Image btnPlay.Graphic btnPlay.Image MouseOverGraphic HoverAnimation btnPlay.MouseOverGraphic = 5; btnPlay.HoverAnimation = buttonHoverAnimation; NormalGraphic IdleAnimation btnPlay.NormalGraphic = 5; btnPlay.IdleAnimation = buttonIdleAnimation; PushedGraphic PushedAnimation btnPlay.PushedGraphic = 5; btnPlay.PushedAnimation = buttonPushedAnimation; Text Text btnPlay.Text = \"Play\"; btnPlay.Text = \"Play\"; TextColor TextConfig.Brush btnPlay.TextColor = 15; btnPlay.TextConfig.Brush = solidWhiteBrush; Missing in AGS but exists in MonoAGS: animations for button states, shadows + outlines/text brushes/alignments/auto-fitting, borders, see GUI controls for more. InvWindow AGS MonoAGS AGS Example MonoAGS Example Further notes ScrollDown ScrollDown invMain.ScrollDown(); invMain.ScrollDown(); ScrollUp ScrollUp invMain.ScrollUp(); invMain.ScrollUp(); CharacterToUse Inventory invMain.CharacterToUse = cJack; invMain.Inventory = cJack.Inventory; ItemAtIndex Inventory.Items[] item = invMain.ItemAtIndex[0]; item = invMain.Inventory.Items[0]; ItemCount Inventory.Items.Count invMain.ItemCount invMain.Inventory.Items.Count ItemHeight ItemSize.Height invMain.ItemHeight = 30; invMain.ItemSize = new SizeF(50, 30); ItemWidth ItemSize.Width invMain.ItemWidth = 50; invMain.ItemSize = new SizeF(50, 30); ItemsPerRow ItemsPerRow invMain.ItemsPerRow invMain.ItemsPerRow RowCount RowCount invMain.RowCount invMain.RowCount TopItem TopItem invMain.TopItem = 0; invMain.TopItem = 0; Missing in AGS but exists in MonoAGS: The ability to attach inventories (and show them in the inventory window) to non-characters, see GUI controls for more. Label AGS MonoAGS AGS Example MonoAGS Example Further notes Font TextConfig.Font lblStatus.Font = eFontMain; lblStatus.TextConfig.Font = Fonts.Main; Text Text lblStatus.Text = \"Play\"; lblStatus.Text = \"Play\"; TextColor TextConfig.Brush lblStatus.TextColor = 15; lblStatus.TextConfig.Brush = solidWhiteBrush; Missing in AGS but exists in MonoAGS: shadows + outlines/text brushes/alignments/auto-fitting, borders, see GUI controls for more. ListBox AGS MonoAGS AGS Example MonoAGS Example Further notes AddItem Items.Add lstChoices.AddItem(\"Hello\"); lstChoices.Items.Add(new AGSStringItem(\"Hello\")); Clear Items.Clear lstChoices.Clear(); lstChoices.Items.Clear(); FillDirList ? lstSaveGames.FillDirList(\"agssave.*\"); ? FillSaveGameList ? lstSaveGames.FillSaveGameList(); ? GetItemAtLocation hitTest.ObjectAtMousePosition or hitTest.GetObjectAt lstOptions.GetItemAtLocation(mouse.x, mouse.y) hitTest.ObjectAtMousePosition or hitTest.GetObjectAt(200, 100) InsertItemAt Items.Insert lstChoices.InsertItemAt(1, \"Third item\"); lstChoices.Items.Insert(1, new AGSStringItem(\"Third item\")); RemoveItem Items.RemoveAt lstChoices.RemoveItem(0); lstChoices.Items.RemoveAt(0); ScrollDown ? lstTest.ScrollDown(); ScrollUp ? lstTest.ScrollUp(); Font either set fonts on individual rows in the listbox, or set a default font in the factory lstSaveGames.Font = eFontSpeech; For individual rows: lstSaveGames.ItemButtons[3].TextConfig.Font = Fonts.MyFont; , a global font using a factory: var defaultFactory = lstSaveGames.ItemButtonFactory; lstSaveGames.ItemButtonFactory = text => { var button = defaultFactory(text); button.TextConfig.Font = Fonts.MyFont; } HideBorder Border lstSaveGames.HideBorder = true; lstSaveGames.Border = null; HideScrollArrows Scrolling component.Vertical/HorizontalScrollBar lstSaveGames.HideScrollArrows = true; var scrolling = lstSaveGames.GetComponent<IScrollingComponent>(); scrolling.VerticalScrollBar = null; ItemCount Items.Count lstChoices.ItemCount lstChoices.Items.Count Items Items lstOptions.Items[3] lstOptions.Items[3] RowCount ? lstOptions.RowCount ? Note, that the listbox in MonoAGS has a smooth scrollbar, meaning it might show part of a row if the scrollbar is set just in the middle of the row. SaveGameSlots ? lstSaveGames.SaveGameSlots[index] ? SelectedIndex SelectedIndex lstSaveGames.SelectedIndex lstSaveGames.SelectedIndex TopItem ? lstSaveGames.TopItem = 0; ? Translated ? if (lstOptions.Translated) {} ? Missing in AGS but exists in MonoAGS: smooth scrolling for the listbox, SelectedItem, control individual appearances of rows/scrollbars/panel, allow automatic resizing of the box with minimum and maximum height, change events, search filter, see GUI controls for more. Slider AGS MonoAGS AGS Example MonoAGS Example Further notes BackgroundGraphic Graphics sldHealth.BackgroundGraphic = 5; sldHealth.Graphics = animatedSliderBackground; HandleGraphic HandleGraphics sldHealth.HandleGraphic = 6; sldHealth.HandleGraphics = animatedSliderHandle; HandleOffset Add the jump component to the handle graphics sldHealth.HandleOffset = 2; var jump = sldHealth.HandleGraphics.AddComponent<IJumpOffsetComponent>(); jump.JumpOffset = new PointF(2, 0); Max MaxValue sldHealth.Max = 200; sldHealth.MaxValue = 200; Min MinValue sldHealth.Min = 200; sldHealth.MinValue = 200; Value Value sldHealth.Value = 100; sldHealth.Value = 100; Missing in AGS but exists in MonoAGS: animations for slider background + handle, subscribing to slider events, non-integer values for the slider, see GUI controls for more. Text Box AGS MonoAGS AGS Example MonoAGS Example Further notes Font TextConfig.Font txtUserInput.Font = eFontNormal; txtUserInput.TextConfig.Font = Fonts.MyFont; Text Text txtUserInput.Text = \"Hello\"; txtUserInput.Text = \"Hello\"; TextColor TextConfig.Brush txtUserInput.TextColor = 5; txtUserInput.TextConfig.Brush = solidRedBrush; Missing in AGS but exists in MonoAGS: configuring background color/shadows + outlines/text brushes/borders/alignments/auto-fitting, configure caret flashing speed, query and set the caret position, set a watermark for the textbox, focus/unfocus, subscribe to text change events on the textbox with the option to undo entered text, see GUI controls for more. Hotspot AGS MonoAGS AGS Example MonoAGS Example Further notes GetAtScreenXY IHitTest.ObjectAtMousePosition or IHitTest.GetObjectAt if (Hotspot.GetAtScreenXY(mouse.x, mouse.y) == hDoor){} if (hitTest.ObjectAtMousePosition == hDoor) {} or if (hitTest.GetObjectAt(200, 100) == hDoor) {} GetProperty Properties.Ints.GetValue if (hDoor.GetProperty(\"Value\") > 200) {} if (hDoor.Properties.Ints.GetValue(\"Value\") > 200) {} GetTextProperty Properties.Strings.GetValue hDoor.GetTextProperty(\"Description\"); hDoor.Properties.Strings.GetValue(\"Description\"); SetProperty Properties.Ints.SetValue hDoor.SetProperty(\"Value\", 200); hDoor.Properties.Ints.SetValue(\"Value\", 200); SetTextProperty Properties.Strings.SetValue hDoor.SetTextProperty(\"Description\", \"Nice door\"); hDoor.Properties.Strings.SetValue(\"Description\", \"Nice door\"); IsInteractionAvailable checking subscriber count on the interaction event if (hTable.IsInteractionAvailable(eModeLookat) == 0) {} if (hTable.Interactions.OnInteract(Verbs.Look).SubscribersCount == 0) {} RunInteraction Interactions.OnInteract(Verb).InvokeAsync hDoor.RunInteraction(eModeLookat); hDoor.Interactions.OnInteract(Verbs.Look).InvokeAsync(); Enabled Enabled hDoor.Enabled = false; hDoor.Enabled = false; ID ID hDoor.ID hDoor.ID Name DisplayName hDoor.Name hDoor.DisplayName WalkToX WalkPoint.X hDoor.WalkToX hDoor.WalkPoint.X WalkToY WalkPoint.Y hDoor.WalkToY hDoor.WalkPoint.Y Missing in AGS but exists in MonoAGS: Change hotspot name at run-time, change hotspot walk-point at run-time, rotating/scaling hotspot area (at run-time), and as hotspot extends object, see Object for more. Inventory Item AGS MonoAGS AGS Example MonoAGS Example Further notes GetAtScreenXY IHitTest.ObjectAtMousePosition or IHitTest.GetObjectAt if (InventoryItem.GetAtScreenXY(mouse.x, mouse.y) == iKnife){} if (hitTest.ObjectAtMousePosition == iKnife.Graphics) {} or if (hitTest.GetObjectAt(200, 100) == iKnife.Graphics) {} GetProperty Properties.Ints.GetValue if (iKnife.GetProperty(\"Value\") > 200) {} if (iKnife.Graphics.Properties.Ints.GetValue(\"Value\") > 200) {} GetTextProperty Properties.Strings.GetValue iKnife.GetTextProperty(\"Description\"); iKnife.Graphics.Properties.Strings.GetValue(\"Description\"); SetProperty Properties.Ints.SetValue iKnife.SetProperty(\"Value\", 200); hDoor.Properties.Ints.SetValue(\"Value\", 200); SetTextProperty Properties.Strings.SetValue iKnife.SetTextProperty(\"Description\", \"Nice knife\"); iKnife.Properties.Strings.SetValue(\"Description\", \"Nice knife\"); IsInteractionAvailable checking subscriber count on the interaction event if (iKeyring.IsInteractionAvailable(eModeLookat) == 0) {} if (iKeyring.Interactions.OnInteract(Verbs.Look).SubscribersCount == 0) {} RunInteraction Interactions.OnInteract(Verb).InvokeAsync iKeyring.RunInteraction(eModeLookat); iKeyring.Interactions.OnInteract(Verbs.Look).InvokeAsync(); CursorGraphic CursorGraphics iKey.CursorGraphic = 5; iKey.CursorGraphics = animatedKeyCursor; Graphic Graphics iKey.Graphic = 5; iKey.Graphics = animatedKey; ID Graphics.ID iKey.ID iKey.Graphics.ID Name Graphics.DisplayName iKey.Name iKey.Graphics.DisplayName Missing in AGS but exists in MonoAGS: animated inventory items (and cursors), inventory items extend objects so you can do with them everything you can do with objects (rotate, scale, etc), see Object for more. Maths AGS MonoAGS AGS Example MonoAGS Example Further notes FloatToInt Floor or Ceiling or Round followed by casting to int FloatToInt(10.7, eRoundNearest) (int)Math.Round(10.7f) IntToFloat cast to float IntToFloat(myIntValue) (float)myIntValue ArcCos Acos float angle = Maths.ArcCos(1.0); float angle = Math.Acos(1) ; ArcSin Asin float angle = Maths.ArcSin(0.5); float angle = Math.Asin(0.5f) ; ArcTan Atan float angle = Maths.ArcTan(0.5); float angle = Math.Atan(0.5f); ArcTan2 Atan2 float angle = Maths.ArcTan2(-862.42, 78.5149); Cos Cos float x = Maths.Cos(100); float x = Math.Cos(100); Cosh Cosh float x = Maths.Cosh(100); float x = Math.Cosh(100); DegreesToRadians MathUtils.DegreesToRadians float radians = Maths.DegreesToRadians(360.0); float radians = MathUtils.DegreesToRadians(360); Exp Exp float expValue = Maths.Exp(2.302585093); float expValue = Math.Exp(2.302585093f); Log Log float logVal = Maths.Log(9000.0); float logVal = Math.Log(9000); Log10 Log10 float logVal = Maths.Log10(9000.0); float logVal = Math.Log10(9000); RadiansToDegrees ? float val = Maths.RadiansToDegrees(angle); float val = angle * (180f / Math.PI); RaiseToPower Pow float value = Maths.RaiseToPower(4.5, 3.0); float value = Math.Pow(4.5f, 3); Sin Sin float value = Maths.Sin(50.0); float value = Math.Sin(50); Sinh Sinh float value = Maths.Sinh(50.0); float value = Math.Sinh(50); Sqrt Sqrt float value = Maths.Sqrt(9.0); float value = Math.Sqrt(9); Tan Tan float value = Maths.Tan(9.0); float value = Math.Tan(9); Tanh Tanh float value = Maths.Tanh(9.0); float value = Math.Tan(9); Pi PI Maths.Pi Math.PI Missing in AGS but exists in MonoAGS: well, almost nothing here is MonoAGS specific, this is all c# Math class, which you can view here: https://msdn.microsoft.com/en-us/library/system.math(v=vs.110).aspx Also, MonoAGS has some additional useful math methods in MathUtils like Lerp and Clamp which can be useful. Mouse AGS MonoAGS AGS Example MonoAGS Example Further notes ChangeModeGraphic input.Cursor mouse.ChangeModeGraphic(eModeLookat, 120); game.Input.Cursor = myLookCursor; Note that the AGS \"ChangeModeGraphic\" function changes how the mouse cursor automatically changes, and the example shown here changes the cursor manually. For automatic changes, each control scheme might have different methods that you need to call as the logic might be completely different. For the rotating cursors scheme, for example, you'd call scheme.AddCursor(Verbs.Look, myLookCursor, true); ChangeModeHotspot change the pivot point on the cursor's object mouse.ChangeModeHotspot(eModeWalkTo, 10, 10); walkCursor.Pivot = new PointF(0.1f, 0.1f); Note that the pivot point is in relative co-ordinates to the graphics, so (0.5, 0.5) is the center of the image, for example. ChangeModeView input.Cursor mouse.ChangeModeView(eModeLookat, ROLLEYES); game.Input.Cursor = myLookCursor; See notes on ChangeModeGraphic Click input.MouseDown.InvokeAsync and input.MouseUp.InvokeAsync Mouse.Click(eMouseLeft); input.MouseDown.InvokeAsync(new MouseButtonEventArgs(null, MouseButton.Left, input.MousePosition)); ControlEnabled ? if (Mouse.ControlEnabled) {} ? DisableMode ? mouse.DisableMode(eModeWalkto); ? EnableMode ? mouse.EnableMode(eModeWalkto); ? GetModeGraphic ? mouse.GetModeGraphic(eModeWalkto); ? There's nothing specific, but you can just query the specific mouse cursor that you're interested about IsButtonDown LeftMouseButtonDown or RightMouseButtonDown if (mouse.IsButtonDown(eMouseRight)) {} if (game.Input.RightMouseButtonDown) SaveCursorUntilItLeaves use the cursor component when hovering over \"myHotspot\": mouse.SaveCursorUntilItLeaves(); mouse.Mode = eModeTalk; var cursorComponent = myHotspot.AddComponent<IHasCursorComponent>(); cursorComponent.SpecialCursor = myAnimatedSpecialCursorForThisHotspot; SelectNextMode ? Mouse.SelectNextMode() In MonoAGS, by choosing the RotatingCursorsScheme as your control scheme, this is already handled (and you can look at the code if you want to handle it differently) SelectPreviousMode ? Mouse.SelectPreviousMode(); ? SetBounds Subscribe to mouse move event and change the position of the mouse accordingly mouse.SetBounds(160, 100, 320, 200); game.Input.MouseMove.Subscribe(args => if (args.MousePosition.XWindow > 160) OpenTK.Mouse.SetPosition(160, args.MousePosition.YWindow)); SetPosition OpenTK.Mouse.SetPosition mouse.SetPosition(160, 100); OpenTK.Mouse.SetPosition(160, 100); Speed ? Mouse.Speed = 1.5; ? Update ? mouse.Update(); ? UseDefaultGraphic ? mouse.UseDefaultGraphic(); ? UseModeGraphic N/A mouse.UseModeGraphic(eModeWait) ? This can be different depending on the control scheme you chose for the game. For the RotatingCursorsScheme for example, you'd write: scheme.Mode = Verbs.Wait; Mode input.Cursor if (mouse.Mode == eModeWalkto) {} if (game.Input.Cursor == myWalkCursor) {} For individual control schemes, you might have the concept of \"Mode\", but it's not related to the mouse. In RotatingCursorsScheme, for example, you can query if (scheme.Mode == Verbs.Walk) {} . Visible Input.Cursor.Visible mouse.Visible = false; game.Input.Cursor.Visible = false; Missing in AGS but exists in MonoAGS: The cursors is just an extension of objects, so they can be manipulated in all ways an object can be manipulated (see Object for more). Multimedia Currently there are no equivalents to any of the multimedia functions in MonoAGS. Object AGS MonoAGS AGS Example MonoAGS Example Further notes Animate AnimateAsync oRope.Animate(3, 1, 0, eBlock, eBackwards); For blocking: await oRope.AnimateAsync(jumpUpAnimation); . For non-blocking, do the same just without awaiting it: oRope.AnimateAsync(jumpUpAnimation); . As for delay, repeat style and direction, those are configured as part of the animation (\"jumpUpAnimation\" in this scenario). It can be changed at run-time before animating, if you want. For example: jumpUpAnimation.Looping = LoopingStyle.BackwardsForwards; jumpUpAnimation.Loops = 15; jumpUpAnimation.DelayBetweenFrames = 3; Note that MonoAGS doesn't have the concepts of view and loop, just individual animations for manual animations, and directional animations for automatic animations like walk and idle. GetAtScreenXY IHitTest.ObjectAtMousePosition or IHitTest.GetObjectAt if (Object.GetAtScreenXY(mouse.x, mouse.y) == oRope){} if (hitTest.ObjectAtMousePosition == oRope) {} or if (hitTest.GetObjectAt(200, 100) == oRope) {} GetProperty Properties.Ints.GetValue if (oRope.GetProperty(\"Value\") > 200) {} if (oRope.Properties.Ints.GetValue(\"Value\") > 200) {} GetTextProperty Properties.Strings.GetValue oRope.GetTextProperty(\"Description\"); oRope.Properties.Strings.GetValue(\"Description\"); SetProperty Properties.Ints.SetValue oRope.SetProperty(\"Value\", 200); oRope.Properties.Ints.SetValue(\"Value\", 200); SetTextProperty Properties.Strings.SetValue oRope.SetTextProperty(\"Description\", \"Nice rope\"); oRope.Properties.Strings.SetValue(\"Description\", \"Nice rope\"); IsCollidingWithObject (character) CollidesWith if (oRope.IsCollidingWithChar(oBottle) == 1) {} if (oRope.CollidesWith(oBottle.X, oBottle.Y, state.Viewport)) {} Note that MonoAGS supports multiple viewports so we need to pass the viewport in which we'd like to test for collisions. MergeIntoBackground ? object[3].MergeIntoBackground(); ? Move TweenX & TweenY object[2].Move(125, 40, 4, eBlock); For blocking: await oRope.TweenX(125, 3, Ease.Linear); , for non-blocking do the same just without awaiting it: oRope.TweenX(125, 3, Ease.Linear); RemoveTint Tint oRope.RemoveTint(); oRope.Tint = Colors.White; IsInteractionAvailable checking subscriber count on the interaction event if (oRope.IsInteractionAvailable(eModeLookat) == 0) {} if (oRope.Interactions.OnInteract(Verbs.Look).SubscribersCount == 0) {} RunInteraction Interactions.OnInteract(Verb).InvokeAsync oRope.RunInteraction(eModeTalk); oRope.Interactions.OnInteract(Verbs.Talk).InvokeAsync(); SetLightLevel Brightness oRope.SetLightLevel(100); oRope.Brightness = new Vector4(2,2,2,2); SetPosition Position oRope.SetPosition(50, 50); oRope.Position = (50, 50); SetView N/A object[3].SetView(14); No need In AGS this is a command that must come before calling \"Animate\" so that AGS would know which animation to run. In MonoAGS you just pass the animation object to the \"Animate\" function, so SetView becomes redundant. StopAnimating Set an image oRope.StopAnimating(); oRope.Image = oRope.CurrentSprite.Image ; StopMoving Stop the previous tween(s) oRope.StopMoving(); tween.Stop(TweenCompletion.Stay); Tint Tint oRope.Tint(0, 250, 0, 30, 100); oRope.Tint = Colors.Green; or cEoRopego.Tint = Color.FromRgba(0, 255, 0, 255); or oRope.Tint = Color.FromHsla(200, 1, 1, 255); or oRope.Tint = Color.FromHexa(59f442); Animating Animation.State.IsPaused if (oRope.Animating) {} if (!oRope.Animation.State.IsPaused) {} Baseline Z oRope.Baseline = 40; oRope.Z = 40; BlockingHeight ? oRope.BlockingHeight = 20; ? BlockingWidth ? oRope.BlockingWidth = 20; ? Clickable Enabled oRope.Clickable = false; oRope.Enabled = false; Frame Animation.State.CurrentFrame oRope.Frame oRope.Animation.State.CurrentFrame Graphic Image oRope.Graphic = 100; oRope.Image = ropeImage; HasExplicitLight compare Brightness if (oRope.HasExplicitLight) {} if (!oRope.Brightness.Equals(new Vector4(1,1,1,1))) {} HasExplicitTint compare Tint if (oRope.HasExplicitTint) {} if (oRope.Tint != Colors.White) {} ID ID oRope.ID oRope.ID IgnoreScaling IgnoreScalingArea oRope.IgnoreScaling = true; oRope.IgnoreScalingArea = true; IgnoreWalkbehinds ? oRope.IgnoreWalkbehinds = true; ? Probably not really needed in MonoAGS- with the combination of render layers, Z and parent-child relationships you have the ability control rendering order more easily LightLevel Brightness oRope.LightLevel oRope.Brightness Loop Animation.State.CurrentLoop oRope.Loop oRope.Animation.State.CurrentLoop Moving query the previous tween(s) if (oRope.Moving) {} if (myTween.State == TweenState.Playing) {} Name DisplayName oRope.Name oRope.DisplayName Solid ? oRope.Solid = true; ? TintBlue Tint.B oRope.TintBlue oRope.Tint.B TintGreen Tint.G oRope.TintGreen oRope.Tint.G TintRed Tint.R oRope.TintRed oRope.Tint.R TintSaturation Tint.GetSaturation oRope.TintSaturation oRope.Tint.GetSaturation() TintLuminance Tint.GetLightness oRope.TintLuminance oRope.Tint.GetLightness() Transparency Opacity oRope.Transparency = 100; oRope.Opacity = 0; The range for AGS transparency is 0-100, the range for MonoAGS opacity is 0-255 View Animation oRope.View oRope.Animation Visible Visible oRope.Visible = true; oRope.Visible = true; X X oRope.X = 50; oRope.X = 50.5f; Y Y oRope.Y = 50; oRope.Y = 50.5f; Missing in AGS but exists in MonoAGS: scaling and rotating (with setting a pivot point), the ability to scale/rotate/translate individual animation frames, composition of objects (i.e nesting objects in other objects), mix & match with GUI, move between rooms, different resolution from the game, custom rendering (including shaders), sub-pixel positioning, rendering in multiple viewports, creation at run-time, selecting between pixel perfect or bounding box collision checks, objects are transitive with all other on-screen items (characters, GUIs), cropping objects, surround with borders, set hotspot text at runtime, controlling texture offset & scaling filter (per texture), subscribing to events (on pretty much anything that might change in any of the components), interactions with custom verbs, ability to extend objects with custom components, ability to replace engine implementation of components with your own (i.e implement your own collider component and provide custom collision checks, for example). Overlay The whole concept of overlays in AGS is for allowing to show graphics/text at run-time. In MonoAGS, all objects can be created at run-time so the whole concept of \"overlay\" is not really needed. AGS MonoAGS AGS Example MonoAGS Example Further notes CreateGraphical Create an object Overlay* myOverlay = Overlay.CreateGraphical(100, 100, 300, true); IObject myObj = game.Factory.Object.GetObject(\"id for my object\"); myObj.Image = game.Factory.Graphics.LoadImageAsync(\"overlay.png\"); myObj.X = 100; myObj.Y = 100; game.State.Room.Objects.Add(myObj); CreateTextual Create a label Overlay* myOverlay = Overlay.CreateTextual(50,80,120, Game.SpeechFont, 15,\"This is a text overlay\"); ILabel myLabel = game.Factory.UI.GetLabel(\"id for my label\", \"This is a text overlay\", 120, 0, 50, 80, addToUi: false); myLabel.TextConfig.AutoFit = AutoFit.TextShouldWrapAndLabelShouldFitHeight; myLabel.TextConfig.Font = AGSGameSettings.DefaultSpeechFont; game.State.Room.Objects.Add(myLabel); Note that when getting the label from the factory we passed \"addToUi: false\", this is to closely simulate the overlay behavior in AGS, where the overlay is local to the room and not global like a GUI (so instead of adding to UI, we add the label to the current room). This is still not identical behavior, as the AGS overlay gets removed when you switch to another room, and in MonoAGS the label will still be there if you return to the room (if you want the exact same behavior, subscribe to the room leave event and remove the label). Remove Remove the object from the room (or from the global GUI list) myOverlay.Remove(); If the object is in a specific room: myRoom.Objects.Remove(myObj); , and if the object is in the global GUI list: game.State.UI.Remove(myObj); SetText Set desired properties on the label myOverlay.SetText(120,Game.SpeechFont,15,\"This is another text overlay\"); myLabel.Text = \"This is another text overlay\"; myLabel.BaseSize = new SizeF(120, 0); myLabel.TextConfig.Font = AGSGameSettings.DefaultSpeechFont; myLabel.TextConfig.Brush = game.Factory.Graphics.Brushes.LoadSolidBrush(Colors.Red); Valid Check if the object is contained in room (or global GUI list) if (myOverlay.Valid) {} Checking in a specific room: if (room.Objects.Contains(myObj) {} , checking in global GUI list: if (game.State.UI.Contains(myObj)) {} X X myOverlay.X = 5; myObj.X = 5; Y Y myOverlay.Y = 5; myObj.Y = 5; Missing in AGS but exists in MonoAGS: no limits to the number of presented overlays, overlays are just objects so can be treated exactly the same as objects (like rotating/scaling), see the Object section for more details. Palette Currently there are no equivalents to the palette in MonoAGS (if you want to implement something like this, it would probably require writing a custom shader). Parser Currently there are no equivalents to the parser in MonoAGS, you'll have to program parsing logic yourself (but you can use a textbox and subscribe to key pressed events on the textbox). Region Currently there are no equivalents to regions in MonoAGS. Room AGS MonoAGS AGS Example MonoAGS Example Further notes AreThingsOverlapping CollidesWith if (AreThingsOverlapping(1002, EGO)) {} if (cEgo.CollidesWith(oBullet.X, oBullet.Y, game.State.Viewport)) {} Note that in MonoAGS, if the colliding objects have the pixel-perfect component enabled, the collision checks will be accurate, and not using a bounding box like in AGS. DisableGroundLevelAreas manually disable areas & edges DisableGroundLevelAreas(0); foreach (var area in myRoom.Areas) { area.Enabled = false; } foreach (var edge in myRoom.Edges) { edge.Enabled = false; } EnableGroundLevelAreas manually enable areas & edges EnableGroundLevelAreas(); foreach (var area in myRoom.Areas) { area.Enabled = true; } foreach (var edge in myRoom.Edges) { edge.Enabled = true; } GetBackgroundFrame Background.Animation.State.CurrentFrame if (GetBackgroundFrame()==4) {} if (state.Room.Background.Animation.State.CurrentFrame == 4) {} GetDrawingSurfaceForBackground ? DrawingSurface *surface = Room.GetDrawingSurfaceForBackground(); ? No built-in way, but you can implement a custom renderer for the background and draw whatever you want. GetProperty Properties.Bools/Ints/etc if (Room.GetProperty(\"CanBeAttackedHere\")) {} if (myRoom.Properties.Bools.GetValue(\"CanBeAttackedHere\")) {} GetTextProperty Properties.Strings Room.GetTextProperty(\"Description\"); myRoom.Properties.Strings.GetValue(\"Description\"); SetProperty Properties.Ints.SetValue Room.SetProperty(\"XPLevel\", 10); myRoom.Properties.Ints.SetValue(\"XPLevel\", 10); SetTextProperty Properties.Strings.SetValue Room.SetTextProperty(\"Description\", \"I am handsome!\"); myRoom.Properties.Strings.SetValue(\"Description\", \"I am handsome!\"); GetScalingAt GetMatchingAreas and then calculate it yourself if (GetScalingAt(player.x, player.y) == 100) {} `float getAreaScalingWidth(IRoom room, IObject obj) { foreach (IArea are in room.GetMatchingAreas(obj.Position.XY, obj.ID)) { IScalingArea scaleArea = area.GetComponent (); is (scaleArea == null GetViewportX viewport.X if (GetViewportX() > 100) {} if (state.Viewport.X > 100) {} Note that in MonoAGS you can have multiple viewports, which you can access using the \"SecondaryViewports\" property: if (state.SecondaryViewports[0].X > 100) {} GetViewportY viewport.Y `if (GetViewportY() > 100) {} if (state.Viewport.Y > 100) {} Note that in MonoAGS you can have multiple viewports, which you can access using the \"SecondaryViewports\" property: if (state.SecondaryViewports[0].Y > 100) {} GetWalkableAreaAt GetMatchingAreas and then calculate it yourself if (GetWalkableAreaAt(mouse.x,mouse.y) == 0) {} private IArea getWalkableAreaAt(IRoom room, IObject obj) { return room.GetMatchingAreas(obj.Position.XY, obj.ID).FirstOrDefault(area => area.GetComponent<IWalkableArea>()?.IsWalkable ?? false); } ... if (getWalkableAreaAt(myRoom, myObj) == null) {} Note that it's not enough to just pass x,y to get the walkable area, we also need to pass the actual object- that's because in MonoAGS areas might be configured to include/exclude specific objects. HasPlayerBeenInRoom ? if (HasPlayerBeenInRoom(14)) {} ? Note that while this is not built-in, it can be programmed easily if needed: when entering the room you're interested in tracking, you can run Repeat.Do(\"playerInMySpecialRoom\"); , and then, for testing \"HasPlayerBeenInRoom\", you can run if (Repeat.Current(\"playerInMySpecialRoom\") >= 1) {} ProcessClick Use hit testing and invoke the interaction event Room.ProcessClick(100, 50, eModeLookAt); var obj = hitTest.GetObjectAt(100, 50); obj?.Interactions.OnInteract(Verbs.Look).InvokeAsync(new ObjectEventArgs(oKnife)); ReleaseViewport viewport.Camera.Enabled ReleaseViewport(); state.Viewport.Camera.Enabled = true; Note that in MonoAGS you can have multiple viewports, which you can access using the \"SecondaryViewports\" property: state.SecondaryViewports[0].Camera.Enabled = true; RemoveWalkableArea area.Enabled RemoveWalkableArea(5); myArea.Enabled = false; Note, that unlike AGS, the change is permanent, it does not reset when you switch rooms ResetRoom ? ResetRoom(0); ? RestoreWalkableArea area.Enabled RestoreWalkableArea(5); myArea.Enabled = true; SetAreaScaling scalingArea.MinScaling/MaxScaling SetAreaScaling(5, 120, 170); var scalingArea = area.GetComponent<IScalingArea>(); scalingArea.MinScaling = 1.2f; scalingArea.MaxScaling = 1.7f; Note that in MonoAGS the scaling value is the factor in which scaling is multiplied (so 100 scaling in AGS is 1 scaling in MonoAGS), and unlike AGS there are no limits to the scaling. SetBackgroundFrame Background.Image SetBackgroundFrame(4); and to get back to the animation: SetBackgroundFrame(-1); myRoom.Background.Image = myRoom.Background.Animation.Frames[4].Sprite.Image and to get back to the animation myRoom.Background.StartAnimation(myRoomAnimation); Note that there is no \"4 animation frames\" limit in MonoAGS like there is in AGS SetViewport Disable the camera and then set viewport x/y SetViewport(100, 100); state.Viewport.Camera.Enabled = false; state.Viewport.X = 100; state.Viewport.Y = 100; SetWalkBehindBase Baseline SetWalkBehindBase (3,0); var walkbehind = area.GetComponent<IWalkBehindArea>(); walkbehind.Baseline = 0; BottomEdge Edges.Bottom.Value Room.BottomEdge myRoom.Edges.Bottom.Value ColorDepth ? Room.ColorDepth ? This is probably not needed in MonoAGS, mix & match images with different color depths should work. Height Limits.Height Room.Height myRoom.Limits.Height LeftEdge Edges.Left.Value Room.LeftEdge myRoom.Edges.Left.Value Messages Properties.Strings String description = Room.Messages[1]; string dsescription = myRoom.Properties.Strings.GetValue(\"MyRoomDescription\"); MusicOnLoad MusicOnLoad Room.MusicOnLoad myRoom.MusicOnLoad ObjectCount Objects.Count Room.ObjectCount myRoom.Objects.Count Note that in MonoAGS this includes the characters in the room (as characters are also objects) RightEdge Edges.Right.Value Room.RightEdge myRoom.Edges.Right.Value TopEdge Edges.Top.Value Room.TopEdge myRoom.Edges.Top.Value Width Limits.Width Room.Width myRoom.Limits.Width Missing in AGS but exists in MonoAGS: no limits on the scaling areas, no limits on the number of animation frames for the background, multiple viewports, restriction lists to include/exclude specific entities from specific areas, separate horizontal/vertical scaling for scaling areas, set the scaling axis for scaling areas, can set custom properties at run-time, can create rooms at run-time, can subscribe/unsubcribe events at run-time, set custom limits for the room (including \"endless\" rooms), enable/disable specific areas & edges, volume scaling areas, camera zoom areas, zoom/scale the viewport. Screen AGS MonoAGS AGS Example MonoAGS Example Further notes FadeIn ? FadeIn(10); ? FadeOut ? FadeOut(30); ? FlipScreen ? FlipScreen(1); ? SetFadeColor ? SetFadeColor(200, 0, 0); ? SetNextScreenTransition state.RoomTransitions.SetOneTimeNextTransition SetNextScreenTransition(eTransitionBoxout); state.RoomTransitions.SetOneTimeNextTransition(AGSRoomTransitions.BoxOut()); Note that you can give more options to the room transition in MonoAGS, for example: AGSRoomTransitions.BoxOut(timeInSeconds: 3, easeBoxOut: Ease.CubeIn, easeBoxIn: Ease.CubeOut) SetScreenTransition state.RoomTransitions.Transition SetScreenTransition(eTransitionFade); state.RoomTransitions.Transition = AGSRoomTransitions.Fade(); Note that you can give more options to the room transition in MonoAGS, for example: AGSRoomTransitions.Fade(timeInSeconds: 3.5f, easeFadeOut: Ease.CubeIn, easeFadeIn: Ease.CubeOut) ShakeScreen ShakeEffect ShakeScreen(5); ShakeEffect effect = new ShakeEffect (); await effect.RunAsync(TimeSpan.FromSeconds(5)); ShakeScreenBackground ShakeEffect ShakeScreenBackground (4, 10, 80); ShakeEffect effect = new ShakeEffect(strength: 0.1f, decay: 0.9f); effect.RunAsync(TimeSpan.FromSeconds(5)); TintScreen ? TintScreen (100, 50, 50); ? Missing in AGS but exists in MonoAGS: Customize time and easing for built in room transitions, code your own custom room transitions, shake can be applied to individual objects (not just the screen), custom shaders to generate all sorts of effects. Speech AGS MonoAGS AGS Example MonoAGS Example Further notes AnimationStopTimeMargin ? Speech.AnimationStopTimeMargin = 40; ? CustomPortraitPlacement PortraitConfig.Positioning Speech.CustomPortraitPlacement = true; cEgo.SayConfig.PortraitConfig.Positioning = PortraitPositioning.Custom; DisplayPostTimeMs ? Speech.DisplayPostTimeMs = 40; ? This is currently hard-coded as 40 milliseconds GlobalSpeechAnimationDelay ? Speech.GlobalSpeechAnimationDelay = 5; ? PortraitXOffset PortraitConfig.PortraitOffset Speech.PortraitXOffset = 5; cEgo.SayConfig.PortraitConfig.PortraitOffset = (5, 0); PortraitY PortraitConfig.PortraitOffset Speech.PortraitY = 5; cEgo.SayConfig.PortraitConfig.PortraitOffset = (0, 5); SkipKey Use custom skipping and skip on key press Speech.SkipKey = eKeySpace; cEgo.OnBeforeSay.Subscribe(args => input.OnKeyDown.Subscribe(keyArgs => if (keyArgs.Key == Key.Space) { args.SkipText();});); SkipStyle SpeechConfig.SkipText Speech.SkipStyle = eSkipTime; player.SpeechConfig.SkipText = SkipText.ByTime; Note that the example given in MonoAGS is for setting the skip style for a specific character, not a global change like in AGS. Also you can do custom skipping by subscribing to OnBeforeSay , see the example on SkipKey . Style customize to your liking Speech.Style = eSpeechSierra; N/A For the \"lucas arts\" style (text over character's head), do nothing, that's the default. For the \"sierra\" style, set a portrait in the charater's speech config: cGraham.SpeechConfig.PortraitConfig.Portrait = grahamPortrait; . For the \"sierra with background\" style, set a portrait as before, and also set BackgroundColor in the character's speech config: cGraham.SpeechConfig.BackgroundColor = Colors.Pink; . For \"QFG4-style full screen\", set the portrait object to be a full-screen size object, and for customizing where the speech text and portrait will be located, you need to provide your custom implementation for ISayLocationProvider and then replace the default implementation. For example, this custom implementation will place both text and portrait in the bottom-left of the screen: public class Qfg4StyleSayLocationProvider : ISayLocationProvider { public ISayLocation GetLocation(string text, ISayConfig config) { var textLocation = new PointF(0f, 0f); var portraitLocation = new PointF(0f, 0f); return new AGSSayLocation(textLocation, portraitLocation); }} , then to use this implementation instead of the default engine's implementation, write (before the game loads): Resolver.Override(resolver => resolver.Builder.RegisterType<Qfg4StyleSayLocationProvider>().As<ISayLocationProvider>()); . TextAlignment SayConfig.TextConfig.Alignment Speech.TextAlignment = eAlignRight; cEgo.SayConfig.TextConfig.Alignment = Alignment.MiddleRight; UseGlobalSpeechAnimationDelay ? Speech.UseGlobalSpeechAnimationDelay = true; ? VoiceMode ? Speech.VoiceMode = eSpeechVoiceAndText; ? Missing in AGS but exists in MonoAGS: Setting \"skip text\" styles for specific characters, more customizations to speech style, including creating custom say functions completely. String AGS MonoAGS AGS Example MonoAGS Example Further notes Append + mytext = mytext.Append(\"World\"); mytext = mytext + \"World\" , or mytext += \"World\" , or mytext = $\"{mytext}World\" AppendChar + mytext = mytext.AppendChar('o'); mytext = mytext + 'o' , or mytext += 'o' , or mytext = $\"{mytext}o\" CompareTo for direct equality, you can use \"==\", otherwise, CompareTo if (mytext.CompareTo(\"hello\") == 0) {} if (mytext == \"hello\") {} or if (mytext.CompareTo(\"hello\") == 0) {} Note, in c# both CompareTo and == are case sensitive, as opposed to AGS. If you want case insensitive equality check, you can do if (string.Equals(a, b, StringComparison.CurrentCultureIgnoreCase)) {} Copy Copy String newstring = mystring.Copy(); String newstring = mystring.Copy(); EndsWith EndsWith if (myString.EndsWith(\"script!\")) {} if (myString.EndsWith(\"script!\", false)) {} In c# EndsWith is case sensitive by default, as opposed to AGS which is case insensitive by default (that's the reason for the added false parameter in the c# example, to match the AGS sample). Format Format, or string interpolation String text = String.Format(\"%d, %d\", health, score); string text = string.Format(\"{0}, {1}\", health, score); or string text = $\"{health}, {score}\"; IndexOf IndexOf int result = haystack.IndexOf(\"a needle\"); int result = haystack.IndexOf(\"a needle\"); In c# IndexOf is case sensitive by default, if you want case insensitive, you can do: int result = haystack.IndexOf(\"a needle\", StringComparison.InvariantCultureIgnoreCase); IsNullOrEmpty IsNullOrEmpty if (String.IsNullOrEmpty(myString)) {} if (string.IsNullOrEmpty(myString)) {} LowerCase ToLower String lowercased = mystring.LowerCase(); string lowercased = mystring.ToLower(); Replace Replace String changed = original.Replace(\"hello\", \"goodbye\"); string changed = original.Replace(\"hello\", \"goodbye\"); In c# Replace is case sensitive, to do a case insensitive replace you can use a regular expression: string changed = Regex.Replace(original, \"hello\", \"goodbye\"); ReplaceCharAt ToCharArray + index String changed = mystring.ReplaceCharAt(2, 'm'); char[] ch = mystring.ToCharArray(); ch[2] = 'm'; string changed = new string(ch); StartsWith StartsWith if (myString.StartsWith(\"script!\")) {} if (myString.StartsWith(\"script!\", false)) {} In c# StartsWith is case sensitive by default, as opposed to AGS which is case insensitive by default (that's the reason for the added false parameter in the c# example, to match the AGS sample). Substring Substring String substring = mystring.Substring(3, 5); String substring = mystring.Substring(3, 5); Truncate Substring String truncated = mystring.Truncate(4); string truncated = mystring.Length <= 4 ? mystring : mystring.Substring(0, 4); UpperCase ToUpper String uppercased = mystring.UpperCase(); string uppercased = mystring.ToUpper(); AsFloat float.TryParse float number1; number1 = text1.AsFloat; float.TryParse(text1, out float number1); AsInt int.TryParse int number1; number1 = text1.AsInt; int.TryParse(text1, out int number1); Chars [] text.Chars[3] text[3] Length Length text.Length text.Length Missing in AGS but exists in MonoAGS: Everything here is not MonoAGS specific but c#: you can see c# string reference here: https://msdn.microsoft.com/en-us/library/system.string(v=vs.110).aspx System AGS MonoAGS AGS Example MonoAGS Example Further notes AudioChannelCount AudioSystem.CurrentlyPlayingSounds.Count System.AudioChannelCount game.Audio.CurrentlyPlayingSounds.Count AudioChannels AudioSystem.CurrentlyPlayingSounds AudioChannel *channel = System.AudioChannels[2]; var sound = game.Audio.CurrentlyPlayingSounds[2]; CapsLock Device.KeyboardState.CapslockOn if (System.CapsLock) {} if (AGSGame.Device.KeyboardState.CapslockOn) {} ColorDepth ? System.ColorDepth ? Gamma ? System.Gamma ? HardwareAcceleration Device.GrahpicsBackend.AreShadersSupported if (System.HardwareAcceleration) {} if (AGSGame.Device.GraphicsBackend.AreShadersSupported()) {} HasInputFocus ? if (!System.HasInputFocus) return; ? NumLock ? if (System.NunLock) {} ? OperatingSystem RuntimeInformation.IsOSPlatform if (System.OperatingSystem == eOSWindows) {} if (RuntimeInformation.IsOSPlatform(OSPlayform.Windows)) {} No current support for checking platforms other than windows, mac or linux RenderAtScreenResolution RenderLayer.IndependentResolution System.RenderAtScreenResolution = true; myObj.RenderLayer = new AGSRenderLayer(z, independentResolution: new Size(1200, 800)); RuntimeInfo ? System.RuntimeInfo ? ScreenHeight Settings.WindowSize.Height System.ScreenHeight game.Settings.WindowSize.Height ScreenWidth Settings.WindowSize.Width System.ScreenWidth game.Settings.WindowSize.Width ScrollLock ? if (System.ScrollLock) {} ? SupportsGammaControl ? System.SupportsGammaControl ? Version ? System.Version ? ViewportHeight ? System.ViewportHeight ? ViewportWidth ? System.ViewportWidth ? Volume AudioSettings.MasterVolume System.Volume = 80; game.AudioSettings.MasterVolume = 0.8f; Range in AGS is 0-100, range in MonoAGS is 0-1 VSync Settings.Vsync System.Vsync = true; game.Settings.Vsync = VsyncMode.On; Windowed Settings.WindowState if (Settings.Windowed) {} if (game.Settings.WindowState == WindowState.Normal) {} Missing in AGS but exists in MonoAGS: Change window size at runtime (including windowed or not, and bordered or not), adaptive vsync. Text Display / Speech AGS MonoAGS AGS Example MonoAGS Example Further notes Display AGSMessageBox.DisplayAsync Display(\"Hello\"); await AGSMessageBox.DisplayAsync(\"Hello\"); DisplayAt ? DisplayAt (50,50,100, \"This is a message\"); ? DisplayAtY ? DisplayAt (50, \"This is a message\"); ? DisplayMessage AGSMessageBox.DisplayAsync DisplayMessage(220); await AGSMessageBox.DisplayAsync(game.Properties.Strings.GetValue(\"MySpecialMessage\")); DisplayMessageAtY ? DisplayMessageAtY(527, 200); ? DisplayTopBar ? DisplayTopBar(25, 8, 7, \"Evil wizard\", \"Get out of my house and never return!\"); ? Missing in AGS but exists in MonoAGS: show yes/no or ok/cancel dialogs (or any dialog with a custom number of buttons). ViewFrame AGS MonoAGS AGS Example MonoAGS Example Further notes Flipped ? if (frame.Flipped) {} ? Note that you can currently flip a frame horizontally or vertically by doing frame.Sprite.FlipHorizontally() , but currently no way to query if a frame is flipped (other, perhaps, then checking if the scaling of the sprite is negative) Frame Frames.IndexOf frame.Frame animation.Frames.IndexOf(frame) Graphic Sprite.Image.ID frame.Graphic frame.Sprite.Image.ID LinkedAudio SoundEmitter.AudioClip frame.LinkedAudio frame.SoundEmitter.AudioClip Loop N/A frame.Loop N/A MonoAGS does not have the concept of loops in a view, so getting the loop of a frame is meaningless. You can check whether a frame is part of a particular animations by doing: animation.Frames.Contains(frame) . Speed Delay frame.Speed frame.Delay View N/A frame.View N/A MonoAGS does not have the concept of a view. The most equivalent for a view is a directional animation. For a specific directional animation, you can check if the frame exists for one of its animations by doing: if (myDirectionalAnimation.GetAllDirections().Any(animation => animation.Frames.Contains(frame)) {} Missing in AGS but exists in MonoAGS: rotate/scale/translate individual animation frames (including at run-time), change the animation frame speed at run-time and allow for random animation frame delays within a range (very useful for speak animations), for the linked sound, allows to configure whether to automatically pan and adjust the volume of the sound based on the location of the animation relative to the center of the screen (for panning) and based on the location within a volume changing area. SCUMM_VERBCOIN_GUI Currently there are no equivalents to verb coin GUI in MonoAGS. Game variables AGS MonoAGS AGS Example MonoAGS Example Further notes abort_key ? game.abort_key = 324 ? ambient_sounds_persist ? game.ambient_sounds_persist = 0 ? anim_background_speed room.Background.Animation.Configuration.DelayBetweenFrames game.anim_background_speed = 5; game.State.Room.Background.Animation.Configuration.DelayBetweenFrames = 5; auto_use_walkto_points ApproachStyle game.auto_use_walkto_points = 0; player.ApproachStyle.ApproachWhenVerb[Verbs.Look] = ApproachHotspots.NeverWalk; bgspeech_game_speed ? game.bgspeech_game_speed = 0; ? bgspeech_stay_on_display ? game.bgspeech_stay_on_display = 0; ? close_mouth_end_speech_time ? game.close_mouth_end_speech_time = 10; ? debug_mode #if DEBUG if (game.debug_mode == 1) {} #if DEBUG ... #endif dialog_options_x ? game.dialog_options_x = 4; ? dialog_options_y ? game.dialog_options_y = 4; ? disable_antialiasing you can select texture filter scaling per image game.disable_antialiasing = 1; image.Texture.Config = new AGSTextureConfig(scaleUp: ScaleUpFilters.Nearest); following_room_timer ? game.following_room_timer = 150; ? keep_screen_during_instant_transition ? game.keep_screen_during_instant_transition = 1; ? inv_activated Inventory.ActiveItem game.inv_activated player.Inventory.ActiveItem inventory_greys_out ? game.inventory_greys_out = 1; ? lipsync_speed ? game.lipsync_speed = 15; ? max_dialogoption_width ? game.max_dialogoption_width = 180; ? min_dialogoption_width ? game.min_dialogoption_width = 0; ? narrator_speech ? game.narrator_speech = 5; ? no_textbg_when_voice ? game.no_textbg_when_voice = 0; ? read_dialog_option_color ? game.read_dialog_option_color = 5; ? roomscript_finished N/A game.roomscript_finished N/A There's no need for on_call as there's no problem just executing functions between scripts score ? game.score ? There's no problem mimicking a score with a simple global variable score_sound ? game.score_sound ? There's no problem mimicking a score sound with a simple function that changes a global variable and plays a sound. screenshot_height ? game.screenshot_height = 200; ? screenshot_width ? game.screenshot_width = 320; ? show_single_dialog_option ? game.show_single_dialog_option = 1; ? sierra_inv_color set an empty image with a color on the inventory window game.sierra_inv_color = 5; invWindow.Image = new EmptyImage(300, 200); invWindow.Tint = Colors.Pink; skip_display ? game.skip_display = 3; ? skip_speech_specific_key Implement custom text skipping game.skip_speech_specific_key = 5; player.SpeechConfig.SkipText = SkipText.External; player.OnBeforeSay.Subscribe(args => { input.KeyDown.Subscribe(keyArgs => if (keyArgs.Key == Key.PageDown) args.Skip();) }); speech_bubble_width ? game.speech_bubble_width = 100; ? speech_text_align SpeechConfig.TextConfig.Alignment game.speech_text_align = eAlignCentre; player.SpeechConfig.TextConfig.Alignment = Alignment.MiddleCenter; speech_text_gui Either set properties in SpeechConfig or subscribe to OnBeforeSay and manipulate the label game.speech_text_gui = 4; For basic changes: player.SpeechConfig.BackgroundColor = Colors.Pink; player.SpeechConfig.Border = factory.Graphics.Borders.Solid(Colors.Red, lineWidth: 5); , for complete control: player.OnBeforeSay.Subscribe(args => { args.Label.Opacity = 0; args.Label.TweenOpacity(255, 3f);}); text_align SpeechConfig.TextConfig.Alignment game.speech_text_align = eAlignCentre; AGSMessageBox.Config.TextConfig.Alignment = Alignment.MiddleCenter; text_shadow_color SpeechConfig.TextConfig.ShadowBrush game.text_shadow_color = 16; player.SpeechConfig.TextConfig.ShadowBrush = Brushes.SolidBlue; top_bar_XXXX ? game.top_bar_bordercolor = 5; ? total_score ? game.total_score = 50; ? There's no problem mimicking a score sound with a simple function that changes a global variable and plays a sound. used_mode N/A game.used_mode N/A The \"used mode\" is dependent on your control scheme. For a \"rotating cursors\" scheme, you can get scheme.CurrentMode mouse.x input.MousePosition.XMainViewport mouse.x game.Input.MousePosition.XMainViewport mouse.y input.MousePosition.YMainViewport mouse.y game.Input.MousePosition.YMainViewport palette[SLOT] ? palette[0].r ? player state.Player player game.State.Player Predefined global script functions The predefined global script function in AGS are events. As there is no way of runtime event subscription in AGS, there are \"magic\" predefined functions in the script. In MonoAGS you can subscribe/unsubscribe events at will. AGS MonoAGS AGS Example MonoAGS Example Further notes dialog_request ? function dialog_request(int parameter) {} ? game_start game.Events.OnLoad function game_start() {} game.Events.OnLoad.Subscribe(onGameStart); ... void onGameStart() {} on_event:eEventEnterRoomBeforeFadein room.Events.OnBeforeFadeIn for specific room, or game.Events.OnRoomChanging function on_event (EventType event, int data) { if (event == eEventEnterRoomBeforeFadein) { int room = data; } } game.Events.OnRoomChanging.Subscribe(onRoomChanging); ... void onRoomChanging() { IRoom room = game.State.Room; } on_event:eEventLeaveRoom room.Events.OnAfterFadeOut for specific room, or game.Events.OnRoomChanging function on_event (EventType event, int data) { if (event == eEventLeaveRoom) { int room = data; } } game.Events.OnRoomChanging.Subscribe(onRoomChanging); ... void onRoomChanging() { IRoom room = player.PreviousRoom; } Missing state.PreviousRoom so OnRoomChanging for getting the previous room for the player will not work if that room is changed without moving the player to that room. on_event:eEventGotScore ? function on_event (EventType event, int data) { if (event == eEventGotScore) {} } ? on_event:eEventGUIMouseDown gui.MouseDown for specific gui, or subscribe to input.MouseDown and use hitTest for GUI checks function on_event (EventType event, int data) { if (event == eEventGUIMouseDown) { int gui = data; } } game.Input.MouseDown.Subscribe(onMouseDown); ... void onMouseDown(MouseButtonEventArgs args) { var clickedObject = hitTest.ObjectAtMousePosition; } on_event:eEventGUIMouseUp gui.MouseUp for specific gui, or subscribe to input.MouseUp and use hitTest for GUI checks function on_event (EventType event, int data) { if (event == eEventGUIMouseUp) { int gui = data; } } game.Input.MouseUp.Subscribe(onMouseUp); ... void onMouseUp(MouseButtonEventArgs args) { var clickedObject = hitTest.ObjectAtMousePosition; } on_event:eEventAddInventory ? function on_event (EventType event, int data) { if (event == eEventAddInventory) {} } ? on_event:eEventLoseInventory ? function on_event (EventType event, int data) { if (event == eEventLoseInventory) {} } ? on_event:eEventRestoreGame ? function on_event (EventType event, int data) { if (event == eEventRestoreGame) {} } ? on_key_press input.KeyDown function on_key_press (eKeyCode keycode) {} input.KeyDown.Subscribe(onKeyDown); ... void onKeyDown(KeyboardEventArgs args) {} on_mouse_click input.MouseDown function on_mouse_click (MouseButton button) {} input.MouseDown.Subscribe(onMouseDown); ... void onMouseDown(MouseButtonEventArgs args) {} repeatedly_execute Events.OnRepeatedlyExecute function repeatedly_execute() {} game.Events.OnRepeatedlyExecute.Subscribe(onRepeatedlyExecute); ... void onRepeatedlyExecute() {} repeatedly_execute_always Events.OnRepeatedlyExecuteAlways function repeatedly_execute_always() {} game.Events.OnRepeatedlyExecuteAlways.Subscribe(onRepeatedlyExecute); ... void onRepeatedlyExecute() { } unhandled_event Events.DefaultInteractions function unhandled_event (int what, int type) { if (what == 1 && type == 1) {}} game.Events.DefaultInteractions.OnInteract(Verbs.Look).Subscribe(args => {}); Missing in AGS but exists in MonoAGS: Subscribe/unsubscribe to events at runtime, mouse move and key up generic events, mouse enter/leave/up/double click/lost focus per object events"
  },
  "index.html": {
    "href": "index.html",
    "title": "MonoAGS (Adventure Game Studio reimagined in Mono) | MonoAGS Documentation",
    "keywords": "MonoAGS (Adventure Game Studio reimagined in Mono) MonoAGS is an engine (and eventually, editor and tooling) for creating 2D Point&Click adventures. The project is still in very early stages, no official release as of yet, so expect it to be rough around the edges for some time, and expect rapid changes. With that, it's not currently recommended to start developing your epic 3 year game development project with it, but if you're thinking of a short game, that can be completed in a month or two, then please: give us a try, and let us know of any thoughts you had about the engine (issues, feature requests, etc). Why another engine? AGS (Adventure Game Studio) is a very nice tool for creating adventure games. It has a very friendly workflow and gets the job done. However, it's also slightly outdated, with hard to maintain code and generally not powerful and flexible enough as other existing tools. The editor, while friendly and focussed, can also use a re-haul, as if you want to deviate just a little bit from the classic formula, you might find out that you need to fight with it some. MonoAGS was created with the following goals in mind: Have an engine which is more powerful than the current engine. Have an engine which is more flexible than the current engine. Have a workflow (with the accompanied tooling) which is friendlier than the current engine. Once those goals are deemed completed, it is intended to pitch MonoAGS as the next version of AGS to the community. Getting Started"
  },
  "articles/walking.html": {
    "href": "articles/walking.html",
    "title": "Walking | MonoAGS Documentation",
    "keywords": "Walking Walk Configurations: Movement Linked To Animation Should the movement speed be linked to the animation frame changes? This is on by default, meaning that the walk step would only be performed when the walk animation frame changes. For the walk to look right, the images need to be drawn so that a foot touching the ground moves back a constant amount of pixels in between frames. This amount should then be entered as the WalkStep , and not touched any further. Any speed adjustment should only done by changing the animation speed (the animation's DelayBetweenFrames property, and an optional additional delay you can set for the actual running frame). If this is turned off, then the walk step would be performed on each frame making for a smooth movement. Note that if the walk animation only has a single frame, then the engine will ignore the configuration and will treat it as false. How should I decide if this should be on or off? As a rule of thumb, if the character has legs you would want this on. If you turn this off (for a character which has legs) while the movement will look smoother, it will also cause a gliding effect, caused by the fact that the movement is not in sync with the animation of the moving feet. If your character doesn't have legs (a robot, a floating ghost, etc), turning this off would make for a smoother looking walk. Walk Step The walk speed is actually the number of pixels the character moves each time he/she/it moves. If MovementLinkedToAnimation is turned off, the step would be made on each frame, making for a smooth movement. This means that for this state, the walk step is the sole 'decision maker' for the walking speed of the character. If MovementLinkedToAnimation is turned on (the default), the step would be made each time the animation frame changes. This means that for this state, the walk step should be setup once (it needs to match exactly the amount of pixels the leg moves in the drawings) when the actual controller of the walk speed is the animation's speed (the animation's DelayBetweenFrames property, and an optional additional delay for the actual running frame). Adjust Walk Speed To Scale Area Should the engine adjust the walk speed to the scaling area (i.e for a scaling area that shrinks the character to simulate a far away place, you'll want the character to walk slower). Debug Draw Walk Path For debugging purposes, you might want to turn this on, it will draw lines in real-time showing where the character intends on walking to. Actual Walking: For your character to walk, you should call the WalkAsync command. In general, you don't have to do it for when the user clicks the mouse to walk the character, whatever input scheme you choose will handle that for you (under the hood, the input scheme uses the WalkAsync as well), but you'd want to walk your character (or others) during cut scenes, or maybe you want to have the NPCs walking about during the game. When you call WalkAsync you give it a location and the character will start to walk to that location (on walkable areas only). The command returns a Task of bool (a boolean flag). The task allows you to wait for the walk to complete (using the await keyword) and the boolean flag tells you whether the walk was completed successfully (it might be that the walk was interrupted by another walk, or another activity, or just that your character tried to walk to a location where it cannot reach). Here's an example: Task<bool> walkSuccessful = cHero.WalkAsync(oChair.Position); await cHero.SayAsync(\"I'm walking to the chair!\"); if (await walkSuccessful) { cHero.Say(\"And now I'm sitting!\"); sitOnChair(); } else { cHero.Say(\"You know what, the chair doesn't look too comfortable, I think I'll pass.\"); } At any time you can call either StopWalking or StopWalkingAsync to stop the character, you can query whether the character is currently walking by looking at IsWalking and you can also query the destination that the character is trying to walk to with WalkDestination . You can also call PlaceOnWalkableArea to place the character on a walkable area near her/him, this is useful, for example, when moving the character between the rooms when you don't want to bother looking for the exact pixel on the screen you want your character to be located at."
  },
  "articles/viewports.html": {
    "href": "articles/viewports.html",
    "title": "Viewports | MonoAGS Documentation",
    "keywords": "Viewports It might be that not all of the room is shown on the screen at once (for example, a scrolling room). A viewport to the room instructs the engine on what parts of the room to show. A viewport has the following properties: Each viewport has: X,Y The location (bottom-left) in the room from which to show the screen. ScaleX, ScaleY An optional zoom in/out into the room. Angle An optional rotation of the viewport. Camera A camera is a script that automatically moves the viewport, usually to track the player, although you can set the camera's target to track another character/object in the room. Or, you can disable the camera to manually set values in the viewport if needed. Note that you can also code your own camera script if you want to replace the default camera (and this can be done per-room). Multiple Viewports You can show more than one viewport on the screen if you want. There are plenty of use cases for why you'd want something like this: you can show a split-screen for a 2 player game, you can have a television in one room showing what's going on in another room, you can have a sophisticated animation sequence a-la \"24\" to show multiple going-ons at once, etc. If you look at the game state variable, you'll notice that there's a Viewport property, and a SecondaryViewports property. The Viewport property refers to the main viewport of the game (the game must have this viewport) and tracks the current room. For multiple viewports, add more viewports to the SecondaryViewports property. There are additional properties for each viewport which might not be very helpful if you only have one viewport (i.e the normal scenario), but are very useful for multiple viewports. Room Provider The room provider provides a room for the viewport to track. By default, the main viewport tracks the current room of the game. You can assign a room provider for a viewport to change the strategy of which room to show in that specific viewport. There's a built in AGSSingleRoomProvider which you can use to show a single room in your secondary viewport, or you can implement your own room provider with different logic. Display List Control You can control whether to show the room objects, the global GUIs, or both (default is both). The main viewport, by default, shows both. For a secondary viewport, you'd probably want to hide the global GUIs. Additionally, you can set depth clipping: set a near clipping plane, a far clipping plane, or both, for clipping (i.e hiding) objects which are too close or too far from the camera. Finally, you also have fine grain control with the ability to show/hide specific objects for that specific viewports. So, for example, you can show the same room twice on the screen, one with the player and one without. Projection Box You can control what part of the screen a viewport will be shown in. For a vertical split screen, for example, you'll configure the main viewport to have a projection box on the left side, and an additional viewport to have a projection box on the right side. Parent You can assign a parent object for the viewport. If a parent object is assigned, the projection box of the viewport will be bound to the location of that object. So, if, for example, you have a television set object which shows what happens in another room (via a secondary viewport), you'll set the TV as the parent for the secondary viewport, and that way moving the TV will also move the \"contents\" of the TV. Interactive For each viewport, you can decide if it allows interactions with its contents or not."
  },
  "articles/tweens.html": {
    "href": "articles/tweens.html",
    "title": "Tweens | MonoAGS Documentation",
    "keywords": "Tweens Tweening is the act of animating a property between two values (also called \"inbetweening\" ). MonoAGS comes with built in support for tweening a lot of properties, and an easy mechanism to create your own custom tweens. Built-in Tweens The built in tweens can be roughly put in the following categories: Transform Those change the position, scale or rotation of either objects (including GUIs, characters, etc as everything is an object), viewports, or even individual animation frames. A few examples: obj.TweenX(500f, 5f); //Animate the object's \"x\" to be x = 500 in the span of 5 seconds, and do it linearly obj.TweenX(500f, 5f, Ease.BounceIn); //Same animation, only use the \"bounce in\" for easing. obj.Animation.Frames[0].Sprite.TweenX(500f, 5f); //Same animation, only instead of animating the object, only animate the first frame of the object's animation. obj.TweenScaleX(2f, 3f); //Scale the object by a factor of 2 in the span of 3 seconds. obj.TweenWidth(200f, 3f); //Scale the object to make its width be 200 pixels in the span of 3 seconds. obj.TweenAngle(45f, 3f); //Rotate the object to an angle of 45 degrees in the span of 3 seconds. viewport.TweenScaleX(2f, 10.5f); //Zoom in the viewport by a factor of 2 in the span of 10 and a half seconds. Color Those change the color tint of the object, with existing methods to either modify the RGBA elements, or the HSLA elements, depending on which color scheme you want to work with. This also includes convenience methods for fading in/out objects. A few examples: obj.TweenRed(255, 2f); //Animate the red component of the object's RGBA tint to be all the way red in the span of 2 seconds. obj.TweenSaturation(1f, 5f); //Animate the object to be fully saturated (fully colored) in the span of 5 seconds. obj.TweenOpacity(0, 2f); //Tweens the opacity of the object to be fully transparent in the span of 2 seconds. obj.FadeOut(2f); //The same as the previous TweenOpacity call, only easier on the eyes. Audio Audio tweens exist to animate the volume, pitch or panning of a playing sound. A few examples: sound.TweenVolume(0f, 2f); //Fades out the volume of the sound in the span of 2 seconds. sound.TweenPitch(2f, 10f); //Change the pitch of the sound to be twice as high in the span of 10 seconds. sound.TweenPanning(-1f, 5f); //Pans the sound to left speaker in the span of 5 seconds. And More... Even more tweens exist that don't fit into one of these above categories, like animating cropping of an object (if the object has the ICropSelfComponent attached to it). Easing Each tween can be optionally supplied with an easing function. Easing functions specify the rate of change of a parameter over time, and so can be used to \"give more life\" to various animations. If you don't specify an easing function for the tween, the linear ease will be used by default, meaning the value will be changed by the same fixed amount on each tick. MonoAGS comes built in with various easing functions, which you can use in all of your desired tweens. You can visualize how the easing functions work here . You can also create your own custom easing function by specifying a function that gets a single float parameter (the time elapsed, from 0 at the beginning and 1 at the end) and returns a float (the new \"eased\" time). A few examples of using built-in ease functions or a custom function. obj.TweenAngle(45f, 5f, Ease.ElasticIn); obj.TweenHeight(200f, 2f, Ease.SineInOut); private float myCustomEase(float t) { //Some fancy graph building function goes here. } obj.TweenGreen(0, 5f, myCustomEase); Working with a tween All the tween methods return a Tween object, which allows us to work with a tween. This includes waiting for a tween to complete, chaining multiple tweens, pausing/resuming a tween, rewinding a tween, repeating a tween, querying the state of the tween and stopping it. Waiting for a tween All tweens are asynchronous, which means that the next line of the code won't wait for the tween to end by default. obj.X = 1f; obj.TweenX(500f, 5f); Debug.WriteLine($\"Object is at {obj.X}\"); //This will print 1, not 500, because we didn't wait for the tween to complete. To wait for the tween the complete, we can await the Task property of the returned tween object. obj.X = 1f; await obj.TweenX(500f, 5f).Task; Debug.WriteLine($\"Object is at {obj.X}\"); //This will print 500, because we waited for the tween to complete. Combining multiple tweens Separating the act of starting the tween and waiting for a tween to complete gives us the power to combine tweens in multiple ways. So, for example, we can start 2 tweens in parallel, and then wait for both of them to complete. var tween1 = obj.TweenX(500f, 5f); var tween2 = obj.TweenScaleY(2f, 3f); await tween1.Task; await tween2.Task; Note that instead of awaiting the 2 tweens separately, we could have also used the Task.WhenAll convenience method. Let's do that now, but also let's combine waiting for the tweens with waiting for a non-tween asynchronous action, like walking. Because all asynchronous actions return a Task object, the interface with working with them is the same. var tween1 = obj.TweenAngle(45f, 5f); var tween2 = viewport.TweenScaleY(2f, 4f); await Task.Delay(1000); //Waiting for a second between tweens just to make the example a little more interesting var tween3 = sound.TweenVolume(0f, 2f); var task = cHero.WalkAsync(100f, 50f); await Task.WhenAll(tween1.Task, tween2.Task, tween3.Task, task); Another useful method for working with multiple asynchronous actions is Task.WhenAny . Instead of waiting for all tasks to complete, it will wait for the first one and return that task. var tween1 = obj.TweenY(100f, 5f); var tween2 = obj.TweenX(100f, 3f); var tween3 = viewport.TweenProjectX(2f, 10f); var firstTask = await Task.WhenAny(tween1.Task, tween2.Task, tween3.Task); Debug.WriteLine($\"Is the first task tween x? {firstTask == tween2.Task}\"); //will print \"True\" as tween x will be completed first after 3 seconds. Except for awaiting the task object, you can also chain continuations by using the ContinueWith method, and query if the task was completed by using the IsCompleted property: obj.TweenX(100f, 5f).Task.ContinueWith(_ => obj.TweenY(200f, 5f)); var tween = obj.TweenAngle(45f, 3f); Debug.WriteLine($\"Is Completed? {tween.Task.IsCompleted}\"); //Will print false await tween.Task; Debug.WriteLine($\"Is Completed? {tween.Task.IsCompleted}\"); //Will print true Controlling Time You can pause a tween at any time by calling Pause , and resume it by calling Resume . You can rewind a tween to the beginning by calling Rewind , and even set the tween to a specific time by setting the ElapsedTicks (or ElapsedSeconds ) property. var tween = obj.TweenX(-50f, 10f); tween.Pause(); tween.Resume(); tween.ElapsedSeconds = 5f; tween.Rewind(); Stopping a tween You can stop a tween at any time by calling Stop . The Stop method receives a parameter that tells the tween what to do with the tween value: should we reset it as if the tween never happened ( Rewind ), should we set the value as if the tween was completed ( Complete ) or should we leave the value as it is now ( Stay )? var tween1 = obj.TweenX(-50f, 10f); var tween2 = obj.TweenY(50f, 10f); var tween3 = obj.TweenZ(50f, 10f); tween1.Stop(TweenCompletion.Rewind); tween2.Stop(TweenCompletion.Complete); tween3.Stop(TweenCompletion.Stay); Repeating a tween You can set your tween to repeat multiple times (or forever). When repeating a tween you can set the looping style (should it only go forwards, or forwards then backwards, etc) and an optional delay between every loop start. obj.TweenX(50.2f, 5f).RepeatTimes(3, LoopingStyle.Forwards); //Will repeat the tween 3 times (5 seconds for each loop, totalling 15 seconds) obj.TweenX(50.2f, 5f).RepeatTimes(4, LoopingStyle.ForwardsBackwards, 2f); //Will repeat the tween 4 times (forwards -> backwards -> forwards -> backwards) with 2 seconds apart between each animation loop, and each loop taking 5 seconds (totalling 4 * 5 + (4 - 1) * 2 = 26 seconds). obj.TweenX(50.2f, 5f).RepeatForever(LoopingStyle.Backwards, 3f); //Will repeat the tween forever (always going backwards from end to beginning), with 3 seconds apart between each animation loop, and each loop taking 5 seconds. Querying a tween At each point in time of a running tween you can query it to see what it doing. tween.State will tell you the state of the tween: Is it playing, paused, stopped, stopping or completed? You can query tween.ElapsedTicks or tween.ElapsedSeconds to see how much time has passed since the tween started, you can query the original input for the tween by looking at tween.From (the beginning value), tween.To (the target end value), tween.DurationInTicks or tween.DurationInSeconds to see how much time the tween was configured to run for, tween.Easing (the easing function), and if you're dealing with a repeating tween you can look at tween.RepeatInfo to get more information (and even change it while the tween is running) like how many loops have passed, how many total loops should it animate for, is it currently running forwards or backwards, what looping style should it use and the delay to wait between each loop. Custom Tween If there's no built-in tween for your desired property, you can create your own custom tween for any possible numeric property, using Tween.Run . In fact, all of the built in tweens were written using the same Tween.Run function. A custom tween for a variable \"x\" can be written as: float x = 1f; Tween.Run(x, 10f, val => x = val, 3f); The code above will tween the value of x from 1 to 10 in the span of 3 seconds. The third parameter for this function is a function itself which assigns the animated value back to x. Combining Tween.Run with extension methods can create friendly reusable tweens. For example, the TweenX method we showed earlier can be written as: public static Tween TweenX(this IObject obj, float toX, float timeInSeconds, Func<float, float> easing = null) { return Tween.Run(obj.X, toX, x => obj.X = x, timeInSeconds, easing); } This is almost an exact duplicate of the actual built-in tween method, and it only took a few simple lines of code to create (in fact, the only difference between the built in method, is that the built in method extends ITranslate instead of IObject which guarantees that it works on anything that implements ITranslate which includes both IObject and ISprite so you can run it on objects and individual animation frames). Custom Tween- Controlling the time All the tweens created with Tween.Run use the Repeatedly Execute event to \"visit\" the tween and move it forwards (so this includes all of the built in tweens as well). Usually this is exactly what you want. Sometimes, however, you might want to control yourself when the tween is moved forwards (for example, maybe you want to move the tween forwards every time you click a button). For this, you can use the Tween.RunWithExternalVisit method, which behaves like Tween.Run only returns one additional parameter, called visitCallback . The visit callback is an action that you can trigger on your own terms to move the tween to its next tick. Here's an example of how it can be used to move the tween forwards once a second instead of once a tick: var tween = Tween.RunWithExternalVisit(x, 10f, val => x = val, 3f, out Action visitTween); //Tween hasn't actually started animating yet, because it's up to us to move it forwards. So let's do it now. while (!tween.Task.IsCompleted) { visit(); //Moving the tween await Task.Delay(1000); //Waiting a second before the next \"tick\". } //Note that in this example, while we started the tween with \"10 seconds\", the tween will actually take a lot more than 10 seconds, because we only move forwards one tick a second (instead of 60 ticks a second assuming 60 FPS)."
  },
  "articles/threading.html": {
    "href": "articles/threading.html",
    "title": "Threading Model | MonoAGS Documentation",
    "keywords": "Threading Model MonoAGS has 2 threads that are created at startup and live throughout the lifetime of the application: the render thread and the update thread. The render thread draws all of the game objects onto the screen, and the update thread processes all of the game logic to prepare all the objects to be drawn. The update thread is the thread in which the Repeatedly Execute event is triggered and all your logic code is running on. Naturally, this is the thread the modifies the game state. The rendering thread, is the thread that interacts with OpenGL. Due to limitations of OpenGL, only the rendering thread can access the OpenGL context and interact with it. Therefore, all custom rendering will be performed on the rendering thread. So if you implement your own custom renderer ( ICustomRenderer ), or your own border ( IBorderStyle ) or your own room transition ( IRoomTransition ) do be aware that those take place on the rendering thread, not on the update thread, and you should be very careful when working with the game state. Thread Pool Besides the 2 long living threads, short living tasks (like loading resources, for example) use the thread pool: a random thread from the thread pool will be \"borrowed\", the task will be performed and the thread will return to the pool. This is done in order to do some heavy-lifting outside the main logic loop so not to slow it down needlessly. Note that the dotnet thread pool knows and utilizes available CPU cores on your machine to do work in parallel. If you need to, you can take a thread from the pool yourself with Task.Run and take advantage of this functionality. Integrating with async/await By default, if you run code on your own thread which awaits a task that runs from another thread, when the await returns, your code will run on a new thread (from the thread pool). Here's an example of that in action: Debug.WriteLine($\"Hello, I'm currently running in thread ${Environment.CurrentManagedThreadId}.\");// running on thread 1 await Task.Run(() => Debug.WriteLine($\"Now I'm running in thread ${Environment.CurrentManagedThreadId}.\")); //Now running in thread 2 Debug.WriteLine($\"After await, I'm now running in thread ${Environment.CurrentManagedThreadId}.\"); //Now running in thread 3 If you'll run this code from either the render or the update thread, however, you'll see that the last line runs on the first thread and not on a new thread. This is done by utilizing the synchronization context concept. We're doing this in the rendering thread because if we await something on that thread we must go back to the same thread or we won't be able to interact with OpenGL in the follow-up code. We do it in the update thread because getting back to the same thread helps us avoid a plethora of potential multi-threading related bugs that might occur due to race conditions when accessing state. Note, however, that if you write some module code that awaits something on those threads, but is completely isolated and doesn't touch the game state, you might want the await to return on a thread pool thread (to take advantage of the thread pool). In this case you can accomplish this by using ConfigureAwait(false) which tells the runtime not to use the synchronization context here: await Task.Run(() => doSomething()).ConfigureAwait(false); //Now (after thw await returns) we're DEFINITELY using a thread from the thread pool, no matter which thread we started this code on."
  },
  "articles/splash-screen.html": {
    "href": "articles/splash-screen.html",
    "title": "Splash Screen | MonoAGS Documentation",
    "keywords": "Splash Screen MonoAGS comes with a built-in simple splash screen that you can choose to use if needed. The splash screen can be seen at the beginning of the demo game. It is a simple loading screen, showing a \"Loading...\" text (which can be changed to any custom text with any custom font/text color/etc) which gets smaller and then bigger in a loop while resources are loading. When you load the splash screen you get a reference to the room so you can change its background or add any other desired graphics/sound assets, though notes that the text changes its size in a way designed to be independent of the framerate, as loading all of the resources might affect the framerate deeply, so adding your own custom animations to the splash screen might not show smoothly as in the rest of the game. Here's an example in which we change the loading text, change the text color to blue and add a background: var mySplashScreen = new AGSSplashScreen(); mySplashScreen.LoadingText = \"Loading, Please Wait...\"; mySplashScreen.TextConfig = new AGSTextConfig(brush: game.Factory.Graphics.Brushes.LoadSolidBrush(Colors.Blue)); var room = mySplashScreen.Load(game); var splashBackground = game.Factory.Object.GetObject(\"Splash Background\"); splashBackground.Image = await game.Factory.Graphics.LoadImageAsync(\"Rooms/Splash/bg.png\"); room.Background = splashBackground; await game.State.ChangeRoomAsync(room); //... //Load stuff here //... await game.State.ChangeRoomAsync(firstGameRoom);"
  },
  "articles/rooms.html": {
    "href": "articles/rooms.html",
    "title": "Rooms | MonoAGS Documentation",
    "keywords": "Rooms The rooms are where the game takes place. A room can be a room in a house, or an outdoor location, or anything in between. The game can show only one room at a time. This would usually be the room where the player is, though you can change to a different room than the one the player is in if you want. Note: this is different than \"Classic\" AGS in which the room is explicitly tied to where the player is. Each room has: ID Each rooms should have a unique id (string) which identifies it to the engine. Background A background graphic for the room. The background is actually just a regular object so it can be animated or use any of the properties available on regular objects (refer to the Objects section for more information). Limits The room limits specify the boundaries for the camera . By default the room starts from (0,0) and ends with the background image size, but this can changed if needed (for example, if you want to have a \"never-ending\" room). Show Player? A flag indicating whether the player is to be shown in the room, for hiding the player from a map, for example. This is a convenience flag as this can be achieved by simply switching the room without moving the player to another room. Music clip to play An optional music clip you can play when switching to the room. If moved from another room with a music clip, there clips will be cross-faded, and you can configure the cross-fading duration and easing functions from IGame.AudioSettings.RoomMusicCrossFading . Viewport Instructs what part of the room to show on the screen. Refer to the Viewports section for more information. Areas A list of areas (or regions) that exist in the room (like areas in the room that the characters can walk in). There are several types of areas and things you can do with them, refer to the Areas section. Objects A list of objects that are placed in the room (note that unlike \"Classic\" AGS, objects can be moved between rooms). Refer to the Objects section for more information. Edges Room edges are a convenient way for scripting a room change once a player walks beyond an edge. You can set the 'X' for the left and right edge, and the 'Y' for the top and bottom edge and subscribe to events when the player crosses the edge to change the room. Events Each room has specific events which you can subscribe to and code stuff to happen on those events. The available events: Before fade in After leaving the previous room, before the current room is visible. After fade in After leaving the previous room, after the current room is visible. Before fade out Before leaving the current room when it is still visible. After fade out Before leaving the current room when it is no longer visible. Custom Properties Those are special properties which you can attach to a room which might be useful for special coding tasks. Room Transitions When switching between rooms, you can have an optional room transition effect to switch the room. The transition can be set from IGame.State.RoomTransitions , so for example you can set game.State.RoomTransitions.Transition = AGSRoomTransitions.CrossFade() where the built in transitions are: Instant (no transition) Fade (fade out old room, then fade in new room) Cross-Fade (fade out old room and fade in new room at the same time) Box Out (a black box scales up from the center, then scales down to reveal the new room) Dissolve (the old room dissolved into the new room) Slide (the old room slides as in a slide-show) All of those transitions can be configured with things like the duration and the easing function(s). Also, you can code your custom room transition if you want by implementing the IRoomTransition interface."
  },
  "articles/resources.html": {
    "href": "articles/resources.html",
    "title": "Resources | MonoAGS Documentation",
    "keywords": "Resources Resources are all the media files which you load in the game to display content. Supported resource types: Graphics- On Desktop: PNG (recommended), BMP, GIF, EXIF, JPG and TIFF. On Android: PNG (recommended), BMP, GIF, JPEG and WebP. On IOS: PNG (recommended), BMP, GIF, JPG/JPEG, TIFF, ICO, CUR and XBM. Audio- OGG Vorbis (recommended), WAV (PCM), FLAC. Fonts- TTF (recommended), OTF with TrueType (not officially tested yet) Please let us know if you have more resource types you want support for. Adding resources: There are 2 ways you can have resources in your game. They can be embedded in the project or loaded from the file system. The advantage of having the resources embedded is that you can rest assured the resources will be distributed with your game and cannot be touched from outside, which is why it's the recommended method. Loading from file system might be useful if you need the resources to be loaded dynamically, for example you might want to download resources from the internet, or if you give the user the option to choose her/his avatar. To embed resources in your game project, first add the resource files to the \"Assets\" folder in your shared game project (it doesn't have to be in the root \"Assets\" folder, you can have any structure you want in there). Then, in the solution explorer, right click the \"Assets\" folder and \"Add Existing\" (there are options for adding files or complete folders, depending on what you want to do) and add those resources to the project. You should then see those resources in the tree. Lastly, right click those resources and select \"Embedded Resource\" as your \"Build Option\". Note that even the resource is embedded, it's only embedded when compiling the game, so you cannot delete the file before deploying your game, and if you replace the file, it will be automatically replaced in the game on your next run. Loading resources in the game: Currently, all resources should be loaded explicitly from code, and you select when and how they are loaded. There's a low-level ResourceLoader class which loads any file into a stream of bytes, and on top of that a bunch of high-level methods to load specific types of resources. Most of those high-level methods sit under the IGameFactory interface (which can be accessed under the main IGame interface), so for example, you might have a game.Factory.Sound.LoadAudioClip(pathToClip) . All those methods take a path to a file (though there are some convenient methods that take a folder, like LoadAnimationFromFolder ) which has to be structured as so: if the resource is to be loaded from a file in the file system, then put the absolute path of the file. If the resource is embedded then put the relative path of the file (when the current folder is the folder where the executable sits, which is 2 folders above the \"Assets\" folder). So, for example, if you have an audio file called \"trumpet.ogg\" sitting under a \"Sounds\" folder in \"Assets\", your path would be \"../../Assets/Sounds/trumpet.ogg\". Note that this would work even if the file is sitting in that folder but not embedded. This is because ResourceLoader first searches for an embedded resource with that path, but if one is not found, it looks for the file in the file system."
  },
  "articles/repeat.html": {
    "href": "articles/repeat.html",
    "title": "Repeat | MonoAGS Documentation",
    "keywords": "Repeat Repeat is a utility class for repeating actions a set number of times. Repeat.OnceOnly(key) is probably the most useful function there and is the equivalent of Game.DoOnceOnly from \"classic\" AGS. private void onInteractWithMicrophone(object sender, AGSEventArgs args) { if (Repeat.OnceOnly(\"sing_a_song\")) { cHero.Say(\"Mary had a little lamb!\"); } else cHero.Say(\"Nah, I already sang earlier...\"); } Other similar functions there include: Repeat.Exactly(key, number_of_times) for doing an action exactly X times, and also Repeat.MoreThen(key, number_of_times) and Repeat.LessThen(key, number_of_times) for repeating actions more than or less than X times. Another useful function is Repeat.Rotate(key, actions) which rotates around a list of actions to perform (i.e on each call it performs the next action on the list, and eventually goes back to the beginning). This can be useful when wanting to have multiple responses for an interaction which repeat themselves: private void someDefaultInteraction() { Repeat.Rotate(\"default interaction\", () => cHero.Say(\"I'm not going to do that.\"), () => cHero.Say(\"Nope, I don't think so.\"), () => cHero.Say(\"I really don't want to, sorry.\")); }"
  },
  "articles/render-layers.html": {
    "href": "articles/render-layers.html",
    "title": "Render Layers | MonoAGS Documentation",
    "keywords": "Render Layers A render layer is an abstract grouping of objects with similar rendering properties. First and foremost, a render layer has a Z property for sorting which takes precedence over specific objects Z property. This means that if you have a UI render layer which is configured to be in front of a Background render layer, all objects which are associated with the UI layer will always be in front of the objects that are associated with the background layer, regardless of their Z property. The Z property of an object, is therefore used to sort object within the same render layer. Built in layers MonoAGS comes with a few built in layers that are used by default (Background, Foreground, UI and Speech). Speech Layer Speech layer is in front to ensure that displayed text can always be seen. This is the default layer used for ICharacter.Say . UI Layer UI layer is next, to ensure that it can always be seen (unless obstructed by text). This is the default layer used for all UI controls. Foreground Layer This is followed by the Foreground layer, which is the default for all non UI objects. Background Layer And lastly the Background layer, which is the default for the room's background graphics. You can assign those layers yourself, using AGSLayers : cEgo.RenderLayer = AGSLayers.UI; //The player is now on the UI layer! Additional Layer Properties In addition to sorting, a render layer offers a few more properties: Parallax Each layer can be assigned a ParallaxSpeed for achieving a parallax effect. The speed is the factor by which the location is changed based to the normal speed. Giving different speeds for different layers creates the parallax effect which gives the illusion of 3D depth. This is mostly effective in scrolling screens, as the objects move in relation to the camera. If the room scrolls horizontally (the majority of scrolling rooms), you'd like to change the X value of the parallax speed. If the room scrolls vertically (rare but can happen), you'd like to change the Y value of the parallax speed. All the default layers have parallax speed of 1 (i.e normal speed), so you'll need to create your own layers to enable the parallax effect. The closer the object is to the front, the faster it should go, so it should have a bigger parallax speed. Objects in the foreground should have values larger than 1, and objects in the background should have values smaller than 1. PointF parallaxSpeed = new PointF (1.4f, 1f); //all objects in this layer will move at a faster horizontal speed than the rest of the objects. AGSRenderLayer parallaxForegroundLayer = new AGSRenderLayer(-50, parallaxSpeed); //This layer is positioned before the foreground layer and behind the UI layer. myObjInFront.RenderLayer = parallaxForegroundLayer; Independent Resolution You can assign a custom virtual resolution to a layer that will be used for all objects in this layer, which will be different than the default game's virtual resolution. This can be used, for example, if you want specific objects (like characters) at a higher resolution than the background. Note that since the resolution for this layer is different, the coordinate system will be different as well. For example, let's assume the game resolution is (320,200): The character is using the game's resolution, but the house in the room is in a layer with a (640,400) resolution. This means that if the character's position is (100,100) and the house's position is (200,200) they will actually be drawn in the same location."
  },
  "articles/objects.html": {
    "href": "articles/objects.html",
    "title": "Objects | MonoAGS Documentation",
    "keywords": "Objects Objects are basically everything that can move between rooms and can be interacted with. So characters and GUIs are also objects. Object's components: Rooms You can query an object's current room, it's previous room, and move an object to a different room. Tree You can compose an object to be a part of a hierarchy. So you can have an object which has a parent and/or children. Having an object in a tree has the following implications: The position of the object is relative to its parent, and not relative to the screen. If the parent is invisible the object will also be invisible (even if you made it visible). If the parent is disabled the object will also be disabled (even if you made it enabled). One practical use in games for object composition, for example, is to create a character while having each limb as a separate object, so 4 objects will represent both legs and hands, and those will be parented by a \"body\" object. You can then animate and move the hands and legs separately from the body, and whenever you move the body the hands and legs will move with it. Object composition is also useful for GUIs, so for example you can have a panel with 3 buttons: the panel will be the parent of those buttons, so if you move the panel around all the buttons will move with it, if you hide the panel it will hide all the buttons, and same for disabling. Scale You can scale all objects to make them bigger or smaller. You can either scale by a factor (i.e scale by 2 to have double the size- note that this refers to scaling the original size by 2, not the current size), or scale to a specific size (i.e I want my object to have a size of (200,500) pixels. There are also convenience methods for flipping the object vertically and/or horizontally (this will shift the scale and also change the pivot accordingly). Note that if the object is in a scaling area, then the scaling area takes over scaling, which you can disable by setting IgnoreScalingArea to true. Rotation You can set (and get) an angle (in degrees) for every object you desire. Pivot This is the pivot point for the scale, rotation and position. The pivot's units are normalized to the object's size, so (0,0) is the bottom left and (1,1) is the top right. So if, for example your pivot is (0.5,0.5) and you rotate the object, the object will pivot on its center (so it would mainly stay in the same place), and all (x,y) positions for the object would refer to its center. Position (Translate) Allows you to set (and get) the position of an object (x,y,z). (0,0) is the bottom left corner of the screen, and (max x, max y) for top right corner will be based on the virtual resolution you selected to work with (either the game's virtual resolution, or a specific resolution that your object's render layer might be using to override the global virtual resolution). Note that if the object is in a tree and have a parent, then the position will be relative to the parent and not to the screen. So if a button is in a panel and has an (0,0) position, it will always sit at the bottom-left corner of the panel, no matter how the panel moves around the screen. Also, the position is mapped to the position on the screen based on the viewport location (what the camera is looking at). So if the viewport is showing the room from (100,0) - (500, 0) and your object is in (150,0) it will be mapped to (50, 0) to adjust for the viewport. This is the default for all objects which basically means that they are part of the game world. This can be disabled by setting IgnoreViewport which is the default for UI objects, as you would normally want them to be static on the screen and not moving with the camera. As for the Z property, it controls the rendering order within the object's rendering layer. By default the Z property binds to the Y property, i.e when Y moves Z will move with it, which is what you would usually want for 2D perspective games (this way the more an object is further down the screen, the closer it will appear). If you set Z to be something else than Y, then it will stop moving along with Y, so you can set it independently. If you set Z to be Y, then binding will re-commence as before. Tint (Color) Sets (or gets) the color (either RGBA or HSLA) in which the object is tinted (the default is white, i.e not tinted). You can also set the opacity (the alpha) separately, for convenience. Render Layer A rendering layer is attached to each object. This decides rendering order, and also allow to set parallax effects and individual resolution. Please refer to the Render Layers section for more details. Visible/Enabled Allows to show/hide an object, and to disable/enable an object (a disabled object will not respond to mouse hover/clicks). Note that if an object is part of a tree then setting the object to visible (and same goes for enabled) will not actually show (or enable) the object, if its parent (or grandparent, and so on) is not visible (or disabled). Refer to the Tree section for more details. Animation/Image You can set either an image or an animation for your object (an image is just a shorthand convenience for an animation with one frame). Refer to the Animations section for more details on animations. Custom Rendering You can also set a custom renderer for your object and implement your own logic of how to render the image/animation (for that you need to implement the ICustomRenderer interface and set it to the object). This is for custom software rendering. For custom hardware rendering you should use a shader. Shader A shader is a program for rendering graphics on the GPU, making it potentially extremely fast and capable of doing effect not plausible with simple software rendering. You can write a shader for a specific object (or objects) or for the entire game. The shaders are written with GLSL , a language specifically written for writing shaders for OpenGL. You should write a vertex shader and a fragment shader (those are the 2 common shaders, other shaders like the geometry shader which are less common are not currently supported). Then you can create your IShader object by either calling GLShader.FromText or GLShader.FromResource (from resource if you want to embed shader files). Border Each object can have a border which surrounds it. A border can be drawn both behind and in front of the object, which opens up a lot of possibilities. Refer to the Borders section for more details. Hotspot Each object can be a hotspot with which the player can interact. Refer to the Hotspots section for more details. Collisions Each object can be checked for collisions with a specific point on the screen. This is used by the engine for interacting with Hotspots . You can select if the object's collisions will be based on a bounding box that surrounds the object, or a pixel-perfect collision, whereas the mouse has to specifically hover over a pixel which is not transparent to trigger the collision. Pixel perfect is the default, as it more suitable in most cases, but in specific incidents (imagine an object with a small amount pixels which is hard to touch) you can turn it off which will switch the collision checks to use the bounding box. Custom Properties You can set custom properties at run-time to any object (those can be strings, numbers, etc), which can be used for custom scripting purposes."
  },
  "articles/labels.html": {
    "href": "articles/labels.html",
    "title": "Labels | MonoAGS Documentation",
    "keywords": "Labels Text can come in many forms in adventure games: Speech, hotspot label, dialogs, buttons, messages to the user, etc. In MonoAGS , text is always hosted by a label, and always comes with a text configuration object. The label gives the ability to have a background and a border for the text, and gives context for the text alignment configuration (i.e center aligning a text will put it in the center of the label). Text Configuration The text configuration object ( ITextConfig ) has the following options: Font A choice of font for rendering the text. This includes the font family, font size and font style (regular/bold/italic/underline/strikethrough). Brush A brush which will used for drawing the text. Usually this will be a solid brush where you'll choose a color for the brush. However, other brush are available (though for desktop only currently) like a gradient brush or a texture brush. Alignment How the text will be aligned (in relation to the label), i.e centered, top-left, etc. Auto fitting This gives several options regarding how to fit the label with its underlining text: None There will be no custom fitting: the user will select a label size, and the text size will be based on the font, it's size and the text. Label Should Fit Text The label size will be ignored. The label will resize to fit the text inside it. Text Should Wrap And Label Should Fit Height The text will be resized (but only downscaled, not upscaled) to fit the label size. This can be useful when you lay out multiple buttons when you want to have them at the same size, and have various lengths of text. Text Should Fit Label The text will be resized (but only downscaled, not upscaled) to fit the label size. This can be useful when you lay out multiple buttons when you want to have them at the same size, and have various lengths of text. Text Should Crop The text will be cropped to fit the label size. This is the default for textboxes. Outline An outline is the same text drawn behind the original text, only slightly bigger and usually with a different color, to provide better contrast for the rendered text. You can provide a brush for the outline and an outline width. Shadow The shadow is the same text drawn behind the original text with an offset, giving the appearance of a shadow. You can provide a brush for the shadow, and an X and Y offsets from the original text. Padding You can set padding from the left/right/top/bottom of the label (in pixels). Text in low resolutions When your game is in a low resolution, the text might appear blurry as a result of the low resolution. Some \"pixel purists\" might like it as it stays true to the resolution, but other people might prefer to have their text sharp and crisp even if the game itself is in low resolution. If you want your text in high resolution (and don't want to put all text object in a specific high resolution label) there are properties in the engine for scaling the resolution for the text. Those are GLText.TextResolutionFactorX and GLText.TextResolutionFactorY which will be a factor of the game's resolution. In a future revision, we'll add support for automatically adjusting the text resolution to your physical resolution, which would save from calculating the text resolution factor needed. Built-in Labels There are specific types of labels which are built in with the engine, designed to make it easier for completing common tasks. Hotspot Labels Those are labels that show the hotspot name when the mouse hovers over a hotspot. HotspotLabel will show the name of the hotspot (i.e \"Shiny Object\"), and VerbOnHotspotLabel will show the currently used verb with the name of the hotspot (i.e \"Look at Shiny Object\" or \"Walk to Shiny Object\" or \"Use Hammer on Shiny Object\"). Debug Labels Those are labels that can you help while you develop. FPSCounter will show the current FPS (frame per second), and can easily show you if the game is running too slow (slower than 60 FPS usually is considered too slow). MousePositionLabel will show you the current (x,y) position of the mouse cursor. DebugLabel (which is internally used by both FPSCounter and MousePositionLabel ) lets you bind a function to a label. The function will be repeatedly called and the text result will be shown on the label."
  },
  "articles/hotspots.html": {
    "href": "articles/hotspots.html",
    "title": "Hotspots | MonoAGS Documentation",
    "keywords": "Hotspots You can make any object to be a \"hotspot\" which will allow the player to interact with it. Hotspot Text You can supply a hotspot text for the object. This will be shown via a hotspot label (a label which shows the hotspot text of an object when the mouse hovers over it). Walk Point You can also set a walk point for this object. This is the point to which the player character will walk to before triggering an interaction script. Note though that this depends on which \"Approach style\" (if any) you chose for your character, see Approaching . Interactions For each hotspot you should subscribe to interaction events, which define what happens when interacting with the hotspot. The interaction model, is very simple, you only have 2 types of interactions with objects: Interact Event This is used for all \"verb\" interactions with the object. Depending on your game, you might have different verbs which you can use. A 2 buttons style game usually has 2 verbs, \"Look\" and \"Interact\". A Sierra style game might have a rotating cursor system with \"Look\", \"Interact\" and \"Talk\" verbs. A Monkey Island style game might have 9 different verbs to choose from, and a verb coin style game might have different verbs per object. The engine allows all of those modes. By using the IInteractions interface, you'll request an event for the verb you're interested in and subscribe to it. As an example, you can write: oLockedDoor.Interactions.OnInteract(\"Look\").Subscribe(onLookingAtLockedDoor); private void onLookingAtLockedDoor(object sender, ObjectEventArgs args) { cHero.Say(\"This door is locked.\"); } Note that in c#, you can also write this in one line using anonymous functions: oLockedDoor.Interactions.OnInteract(\"Look\").Subscribe((sender, args) => cHero.Say(\"This door is locked.\")); Also note that for \"Look\" and \"Interact\", the two most common verbs in adventure games today, the engine has some defaults built in, and it's recommended (but not mandatory) that you use the predefined AGSInteractions.LOOK and AGSInteractions.INTERACT instead of coming up with your own names. Inventory Interact Event Inventory interactions is for when a character is holding an inventory item and wants to use it on an object. Depending on your game, you might have different verbs here too. Most games today only have a \"Use inventory item on object\" but some games might also additionally have a \"Give item to object\" for example. Therefore the inventory interact also gets a verb, and otherwise acts the same as the interact event, only you get the used inventory item as part of the event arguments: oLockedDoor.Interactions.OnInventoryInteract(AGSInteractions.INTERACT).Subscribe(onUsingInventoryOnDoor); private void onUsingInventoryOnDoor(object sender, InventoryInteractEventArgs args) { if (args.Item == iKey) { cHero.Say(\"Hooray! I opened the door.\"); } else { cHero.Say(\"I don't understand how this would help me to open the door.\"); } } Default Interactions You might not want to write interactions for all your objects and verbs. Depending on the amount of objects, verbs and inventory items you have, this might prove an impossible task. The solution in this case is to have a fallback, usually a default generic sentence (or a random sentence out of a list) that the character says, something along the line of \"I can't do that\". That being said, \"I can't do that\", might be seem as a tad too generic, maybe we can do a little bit more. This is why, there are several ways you can configure defaults for your interactions. For once, for each hotspot object, with the 2 previous interaction events we showed, you can also pass AGSInteractions.DEFAULT as your verb. This will be used as the default interaction for this object when you did not subscribe to a specific verb. Additionally, there's also a global IInteractions object (you can find it in IGame.Events.DefaultInteractions ) for which you can subscribe to supply default scripts which are not per a specific object. As this uses the same interface as the hotspot interactions, you use the same events as you saw on the examples here, to have a default per verb but not per object. Finally, you can also pass the AGSInteractions.DEFAULT verb to the default interactions object, for a super generic default behavior (\"I can't do that\"). This will be only used when everything else fails. To recap, when the engine tries to match an interaction to a script, this is the order it uses: Object's verb script Object's default verb script Default interactions verb script Default interactions default verb script"
  },
  "articles/guis.html": {
    "href": "articles/guis.html",
    "title": "GUIs | MonoAGS Documentation",
    "keywords": "GUIs A GUI (graphical user interface, also referred to as a HUD- heads up display) is a control which is usually layered on top of the game, and allows the user to interact with the game in various ways. In MonoAGS all GUI controls are based off of IUIControl which is basically an object ( IObject ) with a few more components sprinkled on top. We already covered objects , so we will go over here on just the additional components. UI Common Components UI Events Each UI control allows you to subscribe to UI events and respond to mouse/touch input: Mouse Enter/Leave When the users moves the mouse in/out the boundaries of the control. The boundaries of the control can be either its bounding box or pixel perfect (see Collisions ). Those 2 events are good for hover effects, for example. The event arguments will tell you the position of the mouse. Mouse Move When the user moves the mouse inside the boundaries of the control. The event arguments will tell you the position of the mouse. Mouse Down/Up When the user presses a mouse button/releases a mouse button inside the boundaries of the control. The event arguments will tell you which button was pressed/release, and the position of the mouse. Mouse Clicked/Double Clicked When the user clicks (a fast press and release) a mouse button or double clicks the mouse button inside the boundaries of the control. The event arguments will tell you which button was clicked, and the position of the mouse. Lost Focus When the user clicks a mouse button outside the boundaries of the control. Skinning Skinning provides you with the ability to provide a custom look/theme to your controls. MonoAGS currently comes with 2 basic themes, a blue theme ( AGSBlueSkin ) and a gray theme ( AGSGraySkin ), both used the generic AGSColoredSkin with a pre-defined set of rules for coloring various aspects of the GUIs. You can use AGSColoredSkin to define other skins, or just implement ISkin for complete skinning freedom (but do look at how AGSColoredSkin is implemented to get an idea of how to write your skin). Note that the 2 basic skins are currently written as a proof of concept, not as beautiful fully functional skins. If you have a passion for graphic design and wish to create a beautiful skin for the engine, please let us know. GUI Types On top of the basic GUI control, several GUIs are available for use: Panels A panel is a UI control which hosts other UI controls. Note: the panel is in fact completely unnecessary, as any other UI control can host UI controls as well, but it's useful as it provides a clear intent on its use. Scrolling Panels A panel might contain contents bigger than the size of the panel itself. In that case a panel can be made scrollable, with either horizontal or vertical sliders (or both) to scroll through the inner contents of the panel. Labels A label is used for showing text, see Labels . Buttons A button can be clicked to trigger an event (though as we saw, that's actually a property of all UI controls). The button gives you 3 animations that you need to assign, for idle/hover/pushed, which will trigger changing the button appearance based on its state, making it look like how a button usually looks. Checkboxes A checkbox can be either checked or not checked. For the checkbox you need to provide 4 animations: Not checked, Not checked and hovered, Checked, Checked and hovered. Textboxes A textbox allows you to edit text. You can query/set the text that appears in the box, query/set the position of the (caret)[ https://en.wikipedia.org/wiki/Caret_navigation ] and its flashing speed. You can also subscribe to an event which triggers on each key sent to the textbox and you can block the text from reaching the box (if you want a number only input, for example, you can only allow numbers to reach the box). Listboxes A listbox allows you to select an option from a list of options. Comboboxes A combobox (also referred to as a drop-down) is a text+button which when clicked, shows you a list of options to choose from (a listbox). The selected option from the drop-down list appears as text next to the button. The combobox is therefore composed of several controls: A textbox for the text, a drop down button, a panel from the drop down list, and a button for each of the items in the drop down list. You can control all of those from the combobox, as well as getting/setting the selected item. Sliders A slider is useful for selecting a value from a range. The user usually slides a handle across a line (which is either horizontal or vertical) to select a value. The slider is composed of an object for the handle, and an object for the background (the line). You need to assign valid objects for both, which will then be shown and the handle can be dragged by the user. You'll also need to send minimum and maximum values for the slider, and you'll be able to get/set the selected value, set whether the slider is vertical/horizontal, assign an optional label which shows the selected value, and subscribe to an event for whenever the value in the slider changes. Inventory Windows An inventory window is used for displaying a character's inventory . For displaying the window, you need to set the size allocated for displaying each inventory item in the window and assign the window to an inventory (usually the player's). You then have the ability to scroll the window up/down (usually you'll add to buttons that when clicked will call the scroll up/down functions) or specifically set the top item which is shown in the window (those are for cases when the inventory contains too many items such that not all fit in the window). Message Boxes A message box is a dialog which is shown to the user with information. The dialog can also comes with buttons for selecting an action (like an \"Are you sure you want to quit?\" dialog, for example). For displaying message boxes, you can use AGSMessageBox.Display for which you give a text and a list of buttons. It will display the text and the buttons at the bottom of the box and it returns the button which was clicked so that you'll be able to trigger the desired action. For convenience, on top of AGSMessageBox.Display , there are 2 built in message boxes: AGSMessageBox.YesNo and AGSMessageBox.OkCancel , which will show you a yes/no question, or a ok/cancel dialog (they both use AGSMessageBox.Display internally), and those will return to you a boolean value indicating whether yes/ok or no/cancel were selected. Trees A tree can be used for displaying a hierarchical collection of text labels. Each label is a node in the tree which can be collapsed/expanded to hide/show its children. Stack Layouts A stack layout allows you to automatically lay out entities on the screen, one after the other, with fixed spacing in between, either horizontally or vertically. GUI Focus The concept of focus for GUIs (or modal windows ), is for when you want a specific GUI control to force interaction with the user, thus you don't want any of the other GUIs responding to user input at that time. For example, when showing a yes/no question to the user, you don't want the user to be able to open the inventory window. When there's a textbox for editing text (for example, entering a save name), you don't want the keyboard input to move the character around the room. For the first scenario, you can add a modal window component ( IModalWindowComponent ) to your control which gives you the ability to grab focus and lose focus ( AGSMessageBox does this automatically). For the second, keyboard preventing scenario, the ITextBox comes built in with this functionality. You can always query if there's a control/textbox which has focus by using IGame.State.FocusedUI , and either querying FocusedWindow or FocusedTextBox ."
  },
  "articles/game.html": {
    "href": "articles/game.html",
    "title": "Game Interface | MonoAGS Documentation",
    "keywords": "Game Interface The game interface ( IGame ) is the main entry point to everything (or almost everything) you can do with the engine. By calling AGSGame.CreateEmpty you'll get the game interface, which you can then use and pass around. You'd usually want to subscribe to the game load event where you'll load up resources and show the first screen. Then you'll want to call IGame.Start for which you'll pass the game settings (name of the game, resolution, etc, see Settings ), which will start the game (and will call the game load event). After doing that, at any script, you can always get the IGame interface (assuming you don't want to pass it around) by calling AGSGame.Game . The game interface has the following systems you can interact with: Factory The game factory is an interface to ease up creating game elements. The IGameFactory interface itself contains sub-factories which specialize in specific types of elements. The sub-factories that you can access there are: Graphics For loading images, animations , and directional animations . For example, you can call game.Factory.Graphics.LoadAnimationFromFolder(animationFolder) to load an animation (that's the short version of this function, with default configurations, there's a longer version for which you can pass animation configurations). Sound For loading audio clips . Inventory For creating inventory items and inventory windows . UI For creating UIs , like panels, labels, checkboxes, textboxes, comboboxes and sliders. Fonts For loading and installing fonts. Note: installing fonts are needed specifically for Macs, as you must install and then restart the game on a Mac for the changes to take place, therefore it's recommended to call install fonts on the fonts you want to use at the start of the game where it will automatically restart if the fonts were not already installed (on Mac only, the game won't be restarted on other platforms). Objects For creating objects , characters and hotspot areas (those will be converted to objects which are also hotspots ). Rooms For creating rooms , room areas , and edges . Outfits For creating character outfits . Dialogs For creating dialogs and dialog options . Shaders For loading shaders . Resources For loading resources . Usually you won't have to actually use it, as the other factories provide higher level methods of loading your assets. Masks For loading bitmap masks. Those are used for masking room areas. Usually you won't have to actually use it, as the other factories provide higher level methods for loading room areas. Game State Game state is the entry point for everything that can change in the game (when the user saves the game, we'll save the state and hopefully won't need to save anything else, because the state is the only thing that changes): This includes the player character , the rooms , the UI , the focused UI , the cutscene , the room transitions and global variables. It also allows you to pause/resume the game, change its global speed and change the current room. Cutscene As part of the game states, you can control the current cutscene. A cutscene is a scene in the game in which user interaction is disabled. Usually, you'll want to offer the user a way of skipping the scene as well. From the game, you can mark a start of a cutscene with ICutscene.Start and wrap it up with ICutscene.End (you must have a cutscene end for every start and you must ensure that every possible branch from the start will reach the end). You can set how the user triggers skipping a cutscene. The built in defaults are \"Escape key\"/\"Any key\"/\"Any key or mouse\". Or you can implement your own cutscene skipping by calling ICutscene.BeginSkip . Finally, you can query to see if a cutscene is currently running, and if a cutscene is currently skipping. Input The input allows you to query the mouse/keyboard state (what key is pressed, what position is the mouse in, etc) and subscribe for events for the mouse/keyboard (a mouse button was pressed/released, mouse was moved, a keyboard key was pressed/released). Normally you wouldn't need to handle input here, as the available game components will do that for you (and they use the input API for this). Additionally, you can set the cursor from the input API (the cursor is actually an object so you can do with it everything you do with objects, like animating, rotating, scaling, etc). Usually you won't need to do that, the control scheme you'll choose (rotating cursors/two buttons for interact and look/verb coin) will do that for you. Settings The game settings allows you to set: Title The title will appear in the title window of your game (if it's not full-screen). Virtual Resolution The virtual resolution in which you code your game. This is the coordinate system in which you'll move all of your objects (unless if you set a rendering layer with an independent resolution ). Window Size The size of the window (if the game is not showing full-screen). Window Border If the game is not in full-screen, you can have a fixed border, a re-sizable window (which will allow the user to resize the window), or a hidden border: you can use a hidden border with a maximized window to have the game on full-screen without actually having your game on full-screen. Window State You can set whether your window is normal, minimized, maximized or full-screen. If the window is full-screen then the border and size settings have no effect. Note that you can combined the maximized setting with the hidden border setting to have your game be full-screen without changing to full-screen mode. Full-Screen vs Maximized with hidden border There are a lot of discussions on what's better . Full-screen might give your game a better performance in theory, whereas maximized window might be more stable (or work on more computers). In anyway, MonoAGS supports both. Preserve Aspect Ratio If the game is configured to preserve the aspect ratio, then in case the window is resized and the aspect ratio is changed, the screen will be letter-boxed or pillar-boxed so the aspect ratio for the actual content will remain the same. If not, then it will stretch to fit. VSync Allows to set the vsync mode (synchronization of the frame update rate with screen refresh rate to prevent tearing). Audio Settings The audio settings allow you to change the master volume, and to control the cross fading between rooms. Game Events The game events allow you to subscribe to important events in the game. Game Load Event The game load event happens when you start your game. This is where you load your resources (at least the resources for the first room) and set the first room for the game to start in. On Repeatedly Execute Event The on repeatedly execute event happens every tick and allows you to check for conditions and do specific actions when the conditions fulfill. The frequency of this events depends on the FPS (frames per second). By default, if the hardware (and software) can handle it, we run at 60 FPS, meaning this event will be called 60 times per second. IMPORTANT: As this event runs 60 times per second (by default), it can be abused and deteriorate the performance of the game. So it's important to keep two rules: Don't perform long actions on each tick. Don't allocate memory on each tick. On Before Render Event This event is called on every render cycle before rendering starts. It can be used for native background drawings, or for native OpenGL calls for setting thins up (like setting shader variables). On Screen Resize This event is called whenever the screen is resized. Default Interactions Allows setting the default interactions ."
  },
  "articles/getting-started.html": {
    "href": "articles/getting-started.html",
    "title": "Getting Started | MonoAGS Documentation",
    "keywords": "Getting Started Get the code: As there is no release yet, the code needs to be downloaded from the Github repository If you're developing from a Windows machine, you need to install Visual Studio 2017 (Community edition is enough and free). If you're developing from a Mac, you need to install Visual Studio For Mac (Community edition is enough and free). If you're developing from Linux, you need to install Mono and MonoDevelop . After installing, open Visual Studio and open the MonoAGS.sln (the solution) file that's in the root folder of the code you downloaded. Compile the code: When you want to compile for development purposes, choose the Debug configuration (from the top bar), but when you compile for deploying your game, choose DesktopRelease for desktop or AndroidRelease for android. As for platform, choose \"Any Cpu\" for desktop and \"ARM\" for android (note: on Mac and Linux \"Any Cpu\" is actually the default option and nothing is written next to the configuration). For setting up Android development, see this guide if you're running on Windows and this guide if you're running on Mac (Android development is currently not possible from Linux). Then setup your device using this guide. For IOS development, you need to run from Mac, see this guide for installation, and this guide for setting up your device. If you own both a Mac and a Windows machine and want to test IOS from your Windows machine, it's possible connecting it to the Mac machine, see here for instructions. If you're having errors with compiling or running the game, check out possible reasons in the troubleshooting section in the faq. Running the demo: The game comes with a small demo which you can run to test that everything is working properly (and see a few of the features in action)- if you look at the solution explorer (the side bar) you'll see a demo folder, that contains a DemoQuest.Desktop (for the desktop build) and a DemoQuest.Droid (for the android build). Right click the project which you want to run, and select \"Set as startup project\". After that, press the \"play\" button on the top bar (the arrow pointing right) for starting the game. Solution structure: The demo folder contains several projects: DemoQuest - this is the project that contains the core logic of the game. It is a shared project that is used by both the desktop and android projects, so you won't have to write your code twice (or more, once more platforms are added). DemoQuest.Desktop - this is the desktop project that wraps around the shared DemoQuest project and allows you to run the game on a desktop computer. If you have code that you want to run only on desktop but not on other platforms, you'll place that code in this project. DemoQuest.Android this is the android project, works the same way as the desktop project, only android specific code goes here. Besides the demo folder, there's also the Engine folder which contains AGS.Engine , AGS.Engine.Desktop and AGS.Engine.Android which as you can imagine follow the same pattern: AGS.Engine implements the core of the engine's logic while the other projects only add platform specific code. Additionally, in the root folder of the solution, you'll also find the AGS.API project and the Tests project. The tests project is for running tests that check that the engine is functioning properly, as a game developer you shouldn't touch that project (you can delete it if you want). The API project contain all of the definitions of what different systems and components of the game should do. This might also be referred to as contracts, or using the c# term of interfaces (it's a common convention in c# to start all interface names with an \"I\"). Those interfaces are then implemented by the engine. Ideally, the game is programmed against the interfaces, so plugin authors might implement those interfaces differently and your game will be able to run with those plugins as well. Create your own game project: It is recommended, for now, that you modify the demo game for developing your game and not create your own project. There will be tooling for creating your game, but it's not there yet, so if you want to create a separate project, there will be some legwork involved. Here's the instructions if you do want to start from a blank page: Right click the solution in the solution explorer, and create a new folder with your game (this is not mandatory, but recommended for better organization). Right click the folder and click to \"Add a new project\". This gives you a window with selection of a lot of templates which you can use. You'll need to do this 3 times and create 3 projects: a shared project (multi-platform), a console project (.Net, this is the desktop project, only required if you want your game to run on desktop) and an Android App (only required if you want your game to run on android). Add references from the desktop and android projects to the shared project, AGS.API and AGS.Engine (to add references, there should be a references node under the project in the solution explorer, right click it and click on add a reference, which will show the list of project to choose from). Also add a reference to AGS.Engine.Desktop from the desktop project and to AGS.Engine.Android from the android project. Then copy the boilerplate code from the DemoQuest.Desktop and DemoQuest.Android to your desktop and android projects and whatever code you want from the DemoQuest shared project to your shared project. Coding your game: The official language for coding your game is C#. There are a lot of resources online for learning c# if needed. While not officially supported, other languages might be used on some or all platforms (they should play nice with dot net, mono, and xamarin). F# would be the best bet as it's the modern functional language counter-part of c#, but other languages might be partially or fully supported. See the following links: http://www.mono-project.com/docs/about-mono/languages/ https://en.wikipedia.org/wiki/List_of_CLI_languages If you have tried using the engine with an alternative language, please let us know your findings."
  },
  "api/AGS.API.SkipCutsceneTrigger.html": {
    "href": "api/AGS.API.SkipCutsceneTrigger.html",
    "title": "Enum SkipCutsceneTrigger | MonoAGS Documentation",
    "keywords": "Enum SkipCutsceneTrigger Different options of how to trigger skipping a cutscene. Namespace : AGS.API Assembly : AGS.API.dll Syntax public enum SkipCutsceneTrigger Fields Name Description AnyKey Cutscene will be skipped when pressing on any key on the keyboard. AnyKeyOrMouse Cutscene will be skipped when pressing on any key on the keyboard or any mouse button click. Custom Cutscene will not be skipped automatically, you have to program it yourself by calling the Skip command. EscapeKeyOnly Cutscene will be skipped when clicking on escape (the default)"
  },
  "api/AGS.API.SizeF.html": {
    "href": "api/AGS.API.SizeF.html",
    "title": "Struct SizeF | MonoAGS Documentation",
    "keywords": "Struct SizeF Represents a float size (width and height). Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : AGS.API Assembly : AGS.API.dll Syntax public struct SizeF Constructors | Improve this Doc View Source SizeF(Single, Single) Declaration public SizeF(float width, float height) Parameters Type Name Description System.Single width System.Single height Fields | Improve this Doc View Source Empty Declaration public static SizeF Empty Field Value Type Description SizeF Properties | Improve this Doc View Source Height Gets the height. Declaration public float Height { get; } Property Value Type Description System.Single The height. | Improve this Doc View Source Width Gets the width. Declaration public float Width { get; } Property Value Type Description System.Single The width. Methods | Improve this Doc View Source Deconstruct(out Single, out Single) Declaration public void Deconstruct(out float width, out float height) Parameters Type Name Description System.Single width System.Single height | Improve this Doc View Source Equals(SizeF) Declaration public bool Equals(SizeF other) Parameters Type Name Description SizeF other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source Scale(Single, Single) Scale the size with specified factorX and factorY. Declaration public SizeF Scale(float factorX, float factorY) Parameters Type Name Description System.Single factorX The factor in which to scale the width. System.Single factorY The factor in which to scale the height. Returns Type Description SizeF The new size. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Implicit((Single width, Single height) to SizeF) Declaration public static implicit operator SizeF((float width, float height)size) Parameters Type Name Description System.ValueTuple < System.Single , System.Single > size Returns Type Description SizeF"
  },
  "api/AGS.API.Size.html": {
    "href": "api/AGS.API.Size.html",
    "title": "Struct Size | MonoAGS Documentation",
    "keywords": "Struct Size Represents an integer size (width and height). Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : AGS.API Assembly : AGS.API.dll Syntax public struct Size Constructors | Improve this Doc View Source Size(Int32, Int32) Declaration public Size(int width, int height) Parameters Type Name Description System.Int32 width System.Int32 height Fields | Improve this Doc View Source Empty Declaration public static Size Empty Field Value Type Description Size Properties | Improve this Doc View Source Height Gets the height. Declaration public int Height { get; } Property Value Type Description System.Int32 The height. | Improve this Doc View Source Width Gets the width. Declaration public int Width { get; } Property Value Type Description System.Int32 The width. Methods | Improve this Doc View Source Deconstruct(out Int32, out Int32) Declaration public void Deconstruct(out int width, out int height) Parameters Type Name Description System.Int32 width System.Int32 height | Improve this Doc View Source Equals(Size) Declaration public bool Equals(Size other) Parameters Type Name Description Size other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Implicit((Int32 width, Int32 height) to Size) Declaration public static implicit operator Size((int width, int height)size) Parameters Type Name Description System.ValueTuple < System.Int32 , System.Int32 > size Returns Type Description Size"
  },
  "api/AGS.API.ShaderVarsBuffer.html": {
    "href": "api/AGS.API.ShaderVarsBuffer.html",
    "title": "Struct ShaderVarsBuffer | MonoAGS Documentation",
    "keywords": "Struct ShaderVarsBuffer A buffer containing shader variables. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : AGS.API Assembly : AGS.API.dll Syntax public struct ShaderVarsBuffer Constructors | Improve this Doc View Source ShaderVarsBuffer(ShaderMode, String, Int32) Initializes a new instance of the AGS.API.ShaderVar struct. Declaration public ShaderVarsBuffer(ShaderMode stage, string name, int numVars = 1) Parameters Type Name Description ShaderMode stage The shader mode that the variable will be passed to. System.String name Name of the variable. System.Int32 numVars Number of variables in the buffer (all variables are of type float). Properties | Improve this Doc View Source Name Gets the name of the variable. Declaration public string Name { get; } Property Value Type Description System.String The name. | Improve this Doc View Source Stage Gets the shader mode that the variable will be passed to. Declaration public ShaderMode Stage { get; } Property Value Type Description ShaderMode The stage. | Improve this Doc View Source Vars Gets the type of the variable. Declaration public float[] Vars { get; } Property Value Type Description System.Single [] The type of the variable."
  },
  "api/AGS.API.ShaderMode.html": {
    "href": "api/AGS.API.ShaderMode.html",
    "title": "Enum ShaderMode | MonoAGS Documentation",
    "keywords": "Enum ShaderMode Shader mode (currently only fragment and vertex shaders are supported). Namespace : AGS.API Assembly : AGS.API.dll Syntax public enum ShaderMode Fields Name Description ComputeShader FragmentShader GeometryShader GeometryShaderExt TessControlShader TessEvaluationShader VertexShader"
  },
  "api/AGS.API.IViewport.html": {
    "href": "api/AGS.API.IViewport.html",
    "title": "Interface IViewport | MonoAGS Documentation",
    "keywords": "Interface IViewport It might be that not all of the room is shown on the screen at once (for example, a scrolling room). A viewport to the room instructs the engine on what parts of the room to show. Inherited Members System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IViewport : INotifyPropertyChanged Properties | Improve this Doc View Source Angle The rotation angle (in degrees) of the viewport. Declaration float Angle { get; set; } Property Value Type Description System.Single The angle. | Improve this Doc View Source Camera Gets or sets the camera which automatically manipulates the viewport to follow a target (usually the player). Declaration ICamera Camera { get; set; } Property Value Type Description ICamera The camera. | Improve this Doc View Source DisplayListSettings Allows to control what will be seen via the viewport. Declaration IDisplayListSettings DisplayListSettings { get; } Property Value Type Description IDisplayListSettings The display list settings. | Improve this Doc View Source Interactive Can the user interact with objects in the viewport? Declaration bool Interactive { get; set; } Property Value Type Description System.Boolean true if interactive; otherwise, false . | Improve this Doc View Source Parent Adds the ability to attach a viewport to an object. This makes the ProjectionBox of the viewport be relative to that object. Declaration IObject Parent { get; set; } Property Value Type Description IObject The parent. | Improve this Doc View Source Pivot Gets or sets the pivot point from which the position, scale and rotation of the viewport are determined. For example, rotating the viewport from its center point will rotate it in place, while rotating it from its bottom-left point will rotate the entire viewport around the bottom-left. It might help to think of the pivot as the point on an image on which you place your finger on before rotating. The units of the pivot point is in relation to the viewport size, where (0f,0f) is the bottom-left corner, and (1f,1f) is the top-right corner. The default is (0f, 0f), which means the bottom-left point of the viewport. Declaration PointF Pivot { get; set; } Property Value Type Description PointF The pivot. Examples viewport.Pivot = new PointF(0.5f, 0.5f); //placing the pivot point in the middle of the viewport | Improve this Doc View Source ProjectionBox Gets or sets the box into which the viewport will project into. The measurement for the box is the overall factor to the window size. So, for example, a rectangle with (x,y) = (0,0) and (width,height) = (1,1) will be projected onto the entire window (this is the default), and a rectangle with (x,y) = (0.25,0.25) and (width,height) = (0.5,0.5) will be projected on half the window and will be centered. Note: the projection box respects the \"keep aspect ratio\" setting ( PreserveAspectRatio ), so if that option is enabled in the settings (on by default), the \"window size\" is without the black side-bars. Declaration RectangleF ProjectionBox { get; set; } Property Value Type Description RectangleF The projection box. | Improve this Doc View Source RoomProvider Gets or sets the room provider, which returns the room currently shown by the viewport. Declaration IRoomProvider RoomProvider { get; set; } Property Value Type Description IRoomProvider The room provider. | Improve this Doc View Source ScaleX The horizontal zoom factor of the room. Declaration float ScaleX { get; set; } Property Value Type Description System.Single The scale x. | Improve this Doc View Source ScaleY The vertical zoom factor of the room. Declaration float ScaleY { get; set; } Property Value Type Description System.Single The scale y. | Improve this Doc View Source ScreenArea Gets the area (in window co-ordinates) used by the viewport. Declaration Rectangle ScreenArea { get; } Property Value Type Description Rectangle The screen area. | Improve this Doc View Source X The left location of the room from which to show the screen. Declaration float X { get; set; } Property Value Type Description System.Single The x. | Improve this Doc View Source Y The bottom location for the room from which to show the screen. Declaration float Y { get; set; } Property Value Type Description System.Single The y. | Improve this Doc View Source Z Gets or sets the Z ordering for the viewport. The smaller the number, the more visible the viewport gets.. Declaration float Z { get; set; } Property Value Type Description System.Single The z. Methods | Improve this Doc View Source GetMatrix(IRenderLayer) Gets the matrix used to transform objects from the viewport co-ordinates to the screen co-ordinates. Declaration Matrix4 GetMatrix(IRenderLayer layer) Parameters Type Name Description IRenderLayer layer Layer. Returns Type Description Matrix4 The matrix. | Improve this Doc View Source GetScreenArea(IGameSettings, IWindowInfo, Boolean) Refreshs the screen area for the viewport (this is called by the engine). Declaration Rectangle GetScreenArea(IGameSettings settings, IWindowInfo window, bool updateArea) Parameters Type Name Description IGameSettings settings Settings. IWindowInfo window Window. System.Boolean updateArea Should we update the screen area internally? This is not always desired, like if we're setting a viewport for a frame buffer and not the screen. Returns Type Description Rectangle | Improve this Doc View Source IsObjectVisible(IObject) Checks whether a given object should be visible in the viewport. Declaration bool IsObjectVisible(IObject obj) Parameters Type Name Description IObject obj Object. Returns Type Description System.Boolean true , if object should be visible, false otherwise. See Also IRoom"
  },
  "api/AGS.API.IUIFactory.html": {
    "href": "api/AGS.API.IUIFactory.html",
    "title": "Interface IUIFactory | MonoAGS Documentation",
    "keywords": "Interface IUIFactory Factory for creating UI controls (buttons, textboxes, etc). Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IUIFactory Methods | Improve this Doc View Source CreateScrollingPanel(IPanel, Single, Single, Single) Adds horizontal and vertical scrollbars on the edges of the panel that allow to scroll the contents on the panel. The scrollbars are only shown if the contents is bigger than panel. The function expands the given panel by a gutter size which is used to display the scrollbars, and returns a contents panel with the original size, in which to put the scrolled contents. Declaration IPanel CreateScrollingPanel(IPanel panel, float gutterSize = 15F, float stepHorizontal = 10F, float stepVertical = 10F) Parameters Type Name Description IPanel panel Panel. System.Single gutterSize The gutter size (which contains the scrollbars). System.Single stepHorizontal The step when clicking the arrows on the horizontal scrollbar. System.Single stepVertical The step when clicking the arrows on the vertical scrollbar. Returns Type Description IPanel | Improve this Doc View Source GetButton(String, ButtonAnimation, ButtonAnimation, ButtonAnimation, Single, Single, IObject, String, ITextConfig, Boolean, Single, Single) Creats a button. Declaration IButton GetButton(string id, ButtonAnimation idle, ButtonAnimation hovered, ButtonAnimation pushed, float x, float y, IObject parent = null, string text = \"\", ITextConfig config = null, bool addToUi = true, float width = -1F, float height = -1F) Parameters Type Name Description System.String id A unique identifer for the button (it has to be globally unique across all entities). ButtonAnimation idle Idle animation (when the button is not clicked on or hovered). ButtonAnimation hovered Hovered animation (when the mouse is hovering the button). ButtonAnimation pushed Pushed animation (when clicking the button). System.Single x The x coordinate. System.Single y The y coordinate. IObject parent The UI control's parent. System.String text Text for the button. ITextConfig config Configuration for rendering the text. System.Boolean addToUi If set to true add to game's GUI list for rendering. System.Single width Width (if not supplied the engine takes it from the idle animation's first frame). System.Single height Height (if not supplied the engine takes it from the idle animation's first frame). Returns Type Description IButton The button. | Improve this Doc View Source GetButton(String, IAnimation, IAnimation, IAnimation, Single, Single, IObject, String, ITextConfig, Boolean, Single, Single) Creats a button. Declaration IButton GetButton(string id, IAnimation idle, IAnimation hovered, IAnimation pushed, float x, float y, IObject parent = null, string text = \"\", ITextConfig config = null, bool addToUi = true, float width = -1F, float height = -1F) Parameters Type Name Description System.String id A unique identifer for the button (it has to be globally unique across all entities). IAnimation idle Idle animation (when the button is not clicked on or hovered). IAnimation hovered Hovered animation (when the mouse is hovering the button). IAnimation pushed Pushed animation (when clicking the button). System.Single x The x coordinate. System.Single y The y coordinate. IObject parent The UI control's parent. System.String text Text for the button. ITextConfig config Configuration for rendering the text. System.Boolean addToUi If set to true add to game's GUI list for rendering. System.Single width Width (if not supplied the engine takes it from the idle animation's first frame). System.Single height Height (if not supplied the engine takes it from the idle animation's first frame). Returns Type Description IButton The button. | Improve this Doc View Source GetButton(String, String, String, String, Single, Single, IObject, String, ITextConfig, Boolean, Single, Single) Creats a button. Declaration IButton GetButton(string id, string idleImagePath, string hoveredImagePath, string pushedImagePath, float x, float y, IObject parent = null, string text = \"\", ITextConfig config = null, bool addToUi = true, float width = -1F, float height = -1F) Parameters Type Name Description System.String id A unique identifer for the panel (it has to be globally unique across all entities). System.String idleImagePath Idle image resourece/file path (when the button is not clicked on or hovered). System.String hoveredImagePath Hovered image resource/file path (when the mouse is hovering the button). System.String pushedImagePath Pushed image resource/file path (when clicking the button). System.Single x The x coordinate. System.Single y The y coordinate. IObject parent The UI control's parent. System.String text Text for the button. ITextConfig config Configuration for rendering the text. System.Boolean addToUi If set to true add to game's GUI list for rendering. System.Single width Width (if not supplied the engine takes it from the idle animation's first frame). System.Single height Height (if not supplied the engine takes it from the idle animation's first frame) Returns Type Description IButton The button. | Improve this Doc View Source GetButtonAsync(String, String, String, String, Single, Single, IObject, String, ITextConfig, Boolean, Single, Single) Creats a button asynchronously. Declaration Task<IButton> GetButtonAsync(string id, string idleImagePath, string hoveredImagePath, string pushedImagePath, float x, float y, IObject parent = null, string text = \"\", ITextConfig config = null, bool addToUi = true, float width = -1F, float height = -1F) Parameters Type Name Description System.String id A unique identifer for the panel (it has to be globally unique across all entities). System.String idleImagePath Idle image resourece/file path (when the button is not clicked on or hovered). System.String hoveredImagePath Hovered image resource/file path (when the mouse is hovering the button). System.String pushedImagePath Pushed image resource/file path (when clicking the button). System.Single x The x coordinate. System.Single y The y coordinate. IObject parent The UI control's parent. System.String text Text for the button. ITextConfig config Configuration for rendering the text. System.Boolean addToUi If set to true add to game's GUI list for rendering. System.Single width Width (if not supplied the engine takes it from the idle animation's first frame). System.Single height Height (if not supplied the engine takes it from the idle animation's first frame) Returns Type Description System.Threading.Tasks.Task < IButton > The button. | Improve this Doc View Source GetCheckBox(String, ButtonAnimation, ButtonAnimation, ButtonAnimation, ButtonAnimation, Single, Single, IObject, String, ITextConfig, Boolean, Single, Single, Boolean) Creats a checkbox. Declaration ICheckBox GetCheckBox(string id, ButtonAnimation notChecked, ButtonAnimation notCheckedHovered, ButtonAnimation checked, ButtonAnimation checkedHovered, float x, float y, IObject parent = null, string text = \"\", ITextConfig config = null, bool addToUi = true, float width = -1F, float height = -1F, bool isCheckButton = false) Parameters Type Name Description System.String id A unique identifer for the checkbox (it has to be globally unique across all entities). ButtonAnimation notChecked Not checked animation (when the checkbox is not checked). ButtonAnimation notCheckedHovered Hovered and not checked animation (when the checkbox is hovered by the mouse but not checked). ButtonAnimation checked Checked animation (when the checkbox is checked). ButtonAnimation checkedHovered Hovered and checked animation (when the checkbox is hovered by the mouse and checked). System.Single x The x coordinate. System.Single y The y coordinate. IObject parent The UI control's parent. System.String text Text for the checkbox. ITextConfig config Configuration for rendering the text. System.Boolean addToUi If set to true add to game's GUI list for rendering. System.Single width Width (if not supplied the engine takes it from the not checked animation's first frame). System.Single height Height (if not supplied the engine takes it from the not checked animation's first frame). System.Boolean isCheckButton If true, this checkbox will be skinned as a button (which has a check/unchecked state), and not as a checkbox, so it can look like a toggle button. Returns Type Description ICheckBox The checkbox. | Improve this Doc View Source GetCheckBox(String, IAnimation, IAnimation, IAnimation, IAnimation, Single, Single, IObject, String, ITextConfig, Boolean, Single, Single, Boolean) Creats a checkbox. Declaration ICheckBox GetCheckBox(string id, IAnimation notChecked, IAnimation notCheckedHovered, IAnimation checked, IAnimation checkedHovered, float x, float y, IObject parent = null, string text = \"\", ITextConfig config = null, bool addToUi = true, float width = -1F, float height = -1F, bool isCheckButton = false) Parameters Type Name Description System.String id A unique identifer for the checkbox (it has to be globally unique across all entities). IAnimation notChecked Not checked animation (when the checkbox is not checked). IAnimation notCheckedHovered Hovered and not checked animation (when the checkbox is hovered by the mouse but not checked). IAnimation checked Checked animation (when the checkbox is checked). IAnimation checkedHovered Hovered and checked animation (when the checkbox is hovered by the mouse and checked). System.Single x The x coordinate. System.Single y The y coordinate. IObject parent The UI control's parent. System.String text Text for the checkbox. ITextConfig config Configuration for rendering the text. System.Boolean addToUi If set to true add to game's GUI list for rendering. System.Single width Width (if not supplied the engine takes it from the not checked animation's first frame). System.Single height Height (if not supplied the engine takes it from the not checked animation's first frame). System.Boolean isCheckButton If true, this checkbox will be skinned as a button (which has a check/unchecked state), and not as a checkbox, so it can look like a toggle button. Returns Type Description ICheckBox The checkbox. | Improve this Doc View Source GetCheckBox(String, String, String, String, String, Single, Single, IObject, String, ITextConfig, Boolean, Single, Single, Boolean) Creats a checkbox. Declaration ICheckBox GetCheckBox(string id, string notCheckedPath, string notCheckedHoveredPath, string checkedPath, string checkedHoveredPath, float x, float y, IObject parent = null, string text = \"\", ITextConfig config = null, bool addToUi = true, float width = -1F, float height = -1F, bool isCheckButton = false) Parameters Type Name Description System.String id A unique identifer for the checkbox (it has to be globally unique across all entities). System.String notCheckedPath Not checked image resource/file path (when the checkbox is not checked). System.String notCheckedHoveredPath Hovered and not checked image resource/file path (when the checkbox is hovered by the mouse but not checked). System.String checkedPath Checked image resource/file path (when the checkbox is checked). System.String checkedHoveredPath Hovered and checked image resource/file path (when the checkbox is hovered by the mouse and checked). System.Single x The x coordinate. System.Single y The y coordinate. IObject parent The UI control's parent. System.String text Text for the checkbox. ITextConfig config Configuration for rendering the text. System.Boolean addToUi If set to true add to game's GUI list for rendering. System.Single width Width (if not supplied the engine takes it from the not checked animation's first frame). System.Single height Height (if not supplied the engine takes it from the not checked animation's first frame). System.Boolean isCheckButton If true, this checkbox will be skinned as a button (which has a check/unchecked state), and not as a checkbox, so it can look like a toggle button. Returns Type Description ICheckBox The checkbox. | Improve this Doc View Source GetCheckBoxAsync(String, String, String, String, String, Single, Single, IObject, String, ITextConfig, Boolean, Single, Single, Boolean) Creats a checkbox asynchronously. Declaration Task<ICheckBox> GetCheckBoxAsync(string id, string notCheckedPath, string notCheckedHoveredPath, string checkedPath, string checkedHoveredPath, float x, float y, IObject parent = null, string text = \"\", ITextConfig config = null, bool addToUi = true, float width = -1F, float height = -1F, bool isCheckButton = false) Parameters Type Name Description System.String id A unique identifer for the checkbox (it has to be globally unique across all entities). System.String notCheckedPath Not checked image resource/file path (when the checkbox is not checked). System.String notCheckedHoveredPath Hovered and not checked image resource/file path (when the checkbox is hovered by the mouse but not checked). System.String checkedPath Checked image resource/file path (when the checkbox is checked). System.String checkedHoveredPath Hovered and checked image resource/file path (when the checkbox is hovered by the mouse and checked). System.Single x The x coordinate. System.Single y The y coordinate. IObject parent The UI control's parent. System.String text Text for the checkbox. ITextConfig config Configuration for rendering the text. System.Boolean addToUi If set to true add to game's GUI list for rendering. System.Single width Width (if not supplied the engine takes it from the not checked animation's first frame). System.Single height Height (if not supplied the engine takes it from the not checked animation's first frame). System.Boolean isCheckButton If true, this checkbox will be skinned as a button (which has a check/unchecked state), and not as a checkbox, so it can look like a toggle button. Returns Type Description System.Threading.Tasks.Task < ICheckBox > The checkbox. | Improve this Doc View Source GetComboBox(String, IButton, ITextBox, Func<String, IUIControl>, IObject, Boolean, Single, Single, String, Single) Creates a combo box (drop down). Declaration IComboBox GetComboBox(string id, IButton dropDownButton = null, ITextBox textBox = null, Func<string, IUIControl> listItemFactory = null, IObject parent = null, bool addToUi = true, float defaultWidth = 500F, float defaultHeight = 40F, string watermark = \"\", float dropDownPanelOffset = 0F) Parameters Type Name Description System.String id A unique identifer for the combo box (it has to be globally unique across all entities). IButton dropDownButton Drop down button. If not provided the a default one will be created. ITextBox textBox The text box for showing the selected choice. If not provided the a default one will be created. System.Func < System.String , IUIControl > listItemFactory A function for creating a button for the drop down list. If not provided a default one will be created. IObject parent The UI control's parent. System.Boolean addToUi If set to true add to game's GUI list for rendering. System.Single defaultWidth If no textbox was provided, this will be the width of the textbox. System.Single defaultHeight If no textbox or dropdown button was provided, this will be the height of the combobox. System.String watermark An optional watermark text to show when there's no text and the textbox is out of focus (i.e explanation text, see example here: https://marketplace.visualstudio.com/items?itemName=havardhu.WatermarkTextBoxControl ). System.Single dropDownPanelOffset An optional vertical offset for the dropdown panel from the combobox Returns Type Description IComboBox The combo box. | Improve this Doc View Source GetForm(String, String, Single, Single, Single, Single, Single, Boolean) Creates a form. Declaration IForm GetForm(string id, string title, float width, float titleHeight, float contentsHeight, float x, float y, bool addToUi = true) Parameters Type Name Description System.String id Identifier. System.String title Title. System.Single width Width. System.Single titleHeight Title height. System.Single contentsHeight Contents height. System.Single x The x coordinate. System.Single y The y coordinate. System.Boolean addToUi If set to true add to game's GUI list for rendering. Returns Type Description IForm The form. | Improve this Doc View Source GetLabel(String, String, Single, Single, Single, Single, IObject, ITextConfig, Boolean) Creates a label. Declaration ILabel GetLabel(string id, string text, float width, float height, float x, float y, IObject parent = null, ITextConfig config = null, bool addToUi = true) Parameters Type Name Description System.String id A unique identifer for the label (it has to be globally unique across all entities). System.String text The text that appears on the label. System.Single width Width. System.Single height Height. System.Single x The x coordinate. System.Single y The y coordinate. IObject parent The UI control's parent. ITextConfig config The configuration for rendering the text. System.Boolean addToUi If set to true add to game's GUI list for rendering. Returns Type Description ILabel The label. | Improve this Doc View Source GetListBox(String, IRenderLayer, Func<String, IUIControl>, Single, Single, Boolean, Boolean, Boolean) Creates a listbox (a list of items bound in a box). Declaration IListbox GetListBox(string id, IRenderLayer layer, Func<string, IUIControl> listItemFactory = null, float defaultWidth = 500F, float defaultHeight = 40F, bool addToUi = true, bool isVisible = true, bool withScrollBars = true) Parameters Type Name Description System.String id Identifier. IRenderLayer layer Layer. System.Func < System.String , IUIControl > listItemFactory A function for creating an item in the list. If not provided a default one will be created. System.Single defaultWidth The default width for a list item. System.Single defaultHeight The default height for a list item. System.Boolean addToUi If set to true add to game's GUI list for rendering. System.Boolean isVisible If set to true set the listbox to be visible. System.Boolean withScrollBars If set to true the listbox will have horizontal and vertical scrollbars to scroll the contents inside. Returns Type Description IListbox The list box. | Improve this Doc View Source GetPanel(String, IImage, Single, Single, IObject, Boolean) Create a panel. Declaration IPanel GetPanel(string id, IImage image, float x, float y, IObject parent = null, bool addToUi = true) Parameters Type Name Description System.String id A unique identifer for the panel (it has to be globally unique across all entities). IImage image A background image for the panel. System.Single x The x coordinate. System.Single y The y coordinate. IObject parent The UI control's parent. System.Boolean addToUi If set to true add to the game's GUI list for rendering. Returns Type Description IPanel The panel. | Improve this Doc View Source GetPanel(String, Single, Single, Single, Single, IObject, Boolean) Create a panel. Declaration IPanel GetPanel(string id, float width, float height, float x, float y, IObject parent = null, bool addToUi = true) Parameters Type Name Description System.String id A unique identifer for the panel (it has to be globally unique across all entities). System.Single width The panel's width. System.Single height The panel's height. System.Single x The x coordinate. System.Single y The y coordinate. IObject parent The UI control's parent. System.Boolean addToUi If set to true add to the game's GUI list for rendering. Returns Type Description IPanel The panel. | Improve this Doc View Source GetPanel(String, String, Single, Single, IObject, ILoadImageConfig, Boolean) Create a panel. Declaration IPanel GetPanel(string id, string imagePath, float x, float y, IObject parent = null, ILoadImageConfig loadConfig = null, bool addToUi = true) Parameters Type Name Description System.String id A unique identifer for the panel (it has to be globally unique across all entities). System.String imagePath A resource/file path (see cref=\"IResourceLoader\") for the panel's background image/>. System.Single x The x coordinate. System.Single y The y coordinate. IObject parent The UI control's parent. ILoadImageConfig loadConfig The configuration for loading the image. System.Boolean addToUi If set to true add to the game's GUI list for rendering. Returns Type Description IPanel The panel. | Improve this Doc View Source GetPanelAsync(String, String, Single, Single, IObject, ILoadImageConfig, Boolean) Create a panel asynchronously. Declaration Task<IPanel> GetPanelAsync(string id, string imagePath, float x, float y, IObject parent = null, ILoadImageConfig loadConfig = null, bool addToUi = true) Parameters Type Name Description System.String id A unique identifer for the panel (it has to be globally unique across all entities). System.String imagePath A resource/file path (see cref=\"IResourceLoader\") for the panel's background image/>. System.Single x The x coordinate. System.Single y The y coordinate. IObject parent The UI control's parent. ILoadImageConfig loadConfig The configuration for loading the image. System.Boolean addToUi If set to true add to the game's GUI list for rendering. Returns Type Description System.Threading.Tasks.Task < IPanel > The panel. | Improve this Doc View Source GetScrollbar(String, SliderDirection, IObject, Single, Single, Single, Single) Creates a scrollbar. A scrollbar is a ISlider with 2 buttons (left + right or up + down depending on which SliderDirection is used) that can be clicked to modify the slider. Declaration IScrollbar GetScrollbar(string idPrefix, SliderDirection direction, IObject parent = null, float width = 15F, float height = 15F, float step = 10F, float buttonBorderWidth = 1F) Parameters Type Name Description System.String idPrefix Identifier prefix which will be used to generate ids for the slider and buttons. SliderDirection direction Direction. IObject parent Parent for the slider. System.Single width Width of the slider. System.Single height Height of the slider. System.Single step Step to move the slider when clicking the button. System.Single buttonBorderWidth Border width for the buttons. Returns Type Description IScrollbar The scrollbar. | Improve this Doc View Source GetSlider(String, String, String, Single, Single, Single, IObject, ITextConfig, ILoadImageConfig, Boolean) Creates a slider Declaration ISlider GetSlider(string id, string imagePath, string handleImagePath, float value, float min, float max, IObject parent = null, ITextConfig config = null, ILoadImageConfig loadConfig = null, bool addToUi = true) Parameters Type Name Description System.String id A unique identifer for the slider (it has to be globally unique across all entities). System.String imagePath Image resource/file path for the slider. System.String handleImagePath Resource/file path for the handle's image (the item which you drag across the sliding line). System.Single value The slider's initial value. System.Single min The slider's minimum value. System.Single max The slider's maximum value. IObject parent The UI control's parent. ITextConfig config A configuration for rendering the slider's value as text (if null than the slider's value will not be rendered as text, but just the handle will be shown). ILoadImageConfig loadConfig Load configuration for the slider's images. System.Boolean addToUi If set to true add to game's GUI list for rendering. Returns Type Description ISlider The slider. | Improve this Doc View Source GetSliderAsync(String, String, String, Single, Single, Single, IObject, ITextConfig, ILoadImageConfig, Boolean) Creates a slider asynchronously. Declaration Task<ISlider> GetSliderAsync(string id, string imagePath, string handleImagePath, float value, float min, float max, IObject parent = null, ITextConfig config = null, ILoadImageConfig loadConfig = null, bool addToUi = true) Parameters Type Name Description System.String id A unique identifer for the slider (it has to be globally unique across all entities). System.String imagePath Image resource/file path for the slider. System.String handleImagePath Resource/file path for the handle's image (the item which you drag across the sliding line). System.Single value The slider's initial value. System.Single min The slider's minimum value. System.Single max The slider's maximum value. IObject parent The UI control's parent. ITextConfig config A configuration for rendering the slider's value as text (if null than the slider's value will not be rendered as text, but just the handle will be shown). ILoadImageConfig loadConfig Load configuration for the slider's images. System.Boolean addToUi If set to true add to game's GUI list for rendering. Returns Type Description System.Threading.Tasks.Task < ISlider > The slider. | Improve this Doc View Source GetTextBox(String, Single, Single, IObject, String, ITextConfig, Boolean, Single, Single) Creats a textbox. Declaration ITextBox GetTextBox(string id, float x, float y, IObject parent = null, string watermark = \"\", ITextConfig config = null, bool addToUi = true, float width = -1F, float height = -1F) Parameters Type Name Description System.String id A unique identifer for the textbox (it has to be globally unique across all entities). System.Single x The x coordinate. System.Single y The y coordinate. IObject parent The UI control's parent. System.String watermark An optional watermark text to show when there's no text and the textbox is out of focus (i.e explanation text, see example here: https://marketplace.visualstudio.com/items?itemName=havardhu.WatermarkTextBoxControl ). ITextConfig config Configuration for rendering the text. System.Boolean addToUi If set to true add to game's GUI list for rendering. System.Single width Width. System.Single height Height Returns Type Description ITextBox The textbox."
  },
  "api/AGS.API.IUIEvents.html": {
    "href": "api/AGS.API.IUIEvents.html",
    "title": "Interface IUIEvents | MonoAGS Documentation",
    "keywords": "Interface IUIEvents The UI events component adds the ability to subscribe to multiple events which are needed by GUIs \\ (like mouse click, enter, leave). Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax [RequiredComponent(typeof(IEnabledComponent), true)] [RequiredComponent(typeof(IVisibleComponent), true)] [RequiredComponent(typeof(IColliderComponent), true)] public interface IUIEvents : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source IsMouseIn Gets a value indicating whether the mouse cursor is within the entity's boundaries. Declaration bool IsMouseIn { get; } Property Value Type Description System.Boolean true if is mouse in; otherwise, false . | Improve this Doc View Source LostFocus An event which is triggered whenever the entity loses focus (a mouse button was clicked outside the boundaries of the entity). Declaration IEvent<MouseButtonEventArgs> LostFocus { get; } Property Value Type Description IEvent < MouseButtonEventArgs > The lost focus. | Improve this Doc View Source MouseClicked An event which is triggered whenever the mouse is clicked within the boundaries of the entity. Note that a mouse click is mouse button pressed down, swiftly followed by button release. Declaration IEvent<MouseClickEventArgs> MouseClicked { get; } Property Value Type Description IEvent < MouseClickEventArgs > The event. | Improve this Doc View Source MouseDoubleClicked An event which is triggered whenever the mouse is double clicked within the boundaries of the entity. Note that a mouse double click is 2 swift mouse button clicks in a row (of the same button). Declaration IEvent<MouseClickEventArgs> MouseDoubleClicked { get; } Property Value Type Description IEvent < MouseClickEventArgs > The event. | Improve this Doc View Source MouseDown An event which is triggered whenever a mouse button is pressed down within the boundaries of the entity. Declaration IEvent<MouseButtonEventArgs> MouseDown { get; } Property Value Type Description IEvent < MouseButtonEventArgs > The event. | Improve this Doc View Source MouseEnter An event which is triggered whenever the mouse enters the boundaries of the entity. Declaration IEvent<MousePositionEventArgs> MouseEnter { get; } Property Value Type Description IEvent < MousePositionEventArgs > The event. | Improve this Doc View Source MouseLeave An event which is triggered whenever the mouse leaves the boundaries of the entity. Declaration IEvent<MousePositionEventArgs> MouseLeave { get; } Property Value Type Description IEvent < MousePositionEventArgs > The event. | Improve this Doc View Source MouseMove An event which is triggered whenever the mouse moves within the boundaries of the entity. Declaration IEvent<MousePositionEventArgs> MouseMove { get; } Property Value Type Description IEvent < MousePositionEventArgs > The event. | Improve this Doc View Source MouseUp An event which is triggered whenever a mouse button is released, if the button was pressed down within the boundaries of the entity. Declaration IEvent<MouseButtonEventArgs> MouseUp { get; } Property Value Type Description IEvent < MouseButtonEventArgs > The event."
  },
  "api/AGS.API.ITextConfig.html": {
    "href": "api/AGS.API.ITextConfig.html",
    "title": "Interface ITextConfig | MonoAGS Documentation",
    "keywords": "Interface ITextConfig Configuration which is used when rendering text. Inherited Members System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ITextConfig : INotifyPropertyChanged Properties | Improve this Doc View Source Alignment Gets the alignment of the text (the text will be aligned to its hosting label. Declaration Alignment Alignment { get; set; } Property Value Type Description Alignment The alignment. | Improve this Doc View Source AutoFit Allows for a label and its text to fit together in various way Declaration AutoFit AutoFit { get; set; } Property Value Type Description AutoFit | Improve this Doc View Source Brush Gets the brush for drawing the text. The brush is usually a solid color (for example, a blue brush), but can potentially be a different brush (like a gradient brush). Declaration IBrush Brush { get; set; } Property Value Type Description IBrush The brush. | Improve this Doc View Source Font Gets the font used to render the text. Declaration IFont Font { get; set; } Property Value Type Description IFont The font. | Improve this Doc View Source LabelMinSize An optional minimum size for the label containing the text. This will be enforced after AutoFit has taken place. Declaration SizeF? LabelMinSize { get; set; } Property Value Type Description System.Nullable < SizeF > The minimum size of the label. | Improve this Doc View Source OutlineBrush Gets an optional brush for drawing an outline for the text. An outline is the same text drawn behind the original text, only slightly bigger and usually with a different color, to provide better contrast for the rendered text. Declaration IBrush OutlineBrush { get; set; } Property Value Type Description IBrush The outline brush. | Improve this Doc View Source OutlineWidth Gets the width of the outline. Declaration float OutlineWidth { get; set; } Property Value Type Description System.Single The width of the outline. | Improve this Doc View Source PaddingBottom Gets a bottom padding (in pixels) for the text from its hosting label. Declaration float PaddingBottom { get; set; } Property Value Type Description System.Single The bottom padding. | Improve this Doc View Source PaddingLeft Gets a left padding (in pixels) for the text from its hosting label. Declaration float PaddingLeft { get; set; } Property Value Type Description System.Single The left padding. | Improve this Doc View Source PaddingRight Gets a right padding (in pixels) for the text from its hosting label. Declaration float PaddingRight { get; set; } Property Value Type Description System.Single The right padding. | Improve this Doc View Source PaddingTop Gets a top padding (in pixels) for the text from its hosting label. Declaration float PaddingTop { get; set; } Property Value Type Description System.Single The top padding. | Improve this Doc View Source ShadowBrush Gets an optional brush for drawing a shadow for the text. The shadow is the same text drawn behind the original text with an offset, giving the appearance of a shadow. Declaration IBrush ShadowBrush { get; set; } Property Value Type Description IBrush The shadow brush. See Also ShadowOffsetX ShadowOffsetY | Improve this Doc View Source ShadowOffsetX Gets the shadow x offset. This is the number of horizontal pixels that the shadow will be drawn away from the text (assuming ShadowBrush is used). Declaration float ShadowOffsetX { get; set; } Property Value Type Description System.Single The shadow x offset. | Improve this Doc View Source ShadowOffsetY Gets the shadow y offset. This is the number of vertical pixels that the shadow will be drawn away from the text (assuming ShadowBrush is used). Declaration float ShadowOffsetY { get; set; } Property Value Type Description System.Single The shadow y offset."
  },
  "api/AGS.API.ITextComponent.html": {
    "href": "api/AGS.API.ITextComponent.html",
    "title": "Interface ITextComponent | MonoAGS Documentation",
    "keywords": "Interface ITextComponent A text component allows displaying text on the screen. Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax [RequiredComponent(typeof(IImageComponent), true)] [RequiredComponent(typeof(IDrawableInfoComponent), true)] [RequiredComponent(typeof(ICropSelfComponent), false)] [RequiredComponent(typeof(IModelMatrixComponent), true)] [RequiredComponent(typeof(IVisibleComponent), true)] public interface ITextComponent : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source CaretPosition The position of the caret inside the string (if the caret is displayed- i.e if it's a textbox). A value of 3, for example, means the caret will be shown after the 3rd character. The default is 0, meaning the caret will be placed at the start of the string. The caret position automatically changes based on the keyboard input. Declaration int CaretPosition { get; set; } Property Value Type Description System.Int32 See Also RenderCaret | Improve this Doc View Source CaretXOffset Horizontal offset in pixels for the caret. Declaration int CaretXOffset { get; set; } Property Value Type Description System.Int32 The caret X offset. | Improve this Doc View Source CustomImageResolutionFactor The text component can supply a custom resolution factor (due to text scaling) to override the resolution factor used by calculations in IModelMatrixComponent . Declaration PointF? CustomImageResolutionFactor { get; } Property Value Type Description System.Nullable < PointF > The custom image resolution factor. | Improve this Doc View Source CustomImageSize The text component can supply a custom image size to override the image size used by calculations in IModelMatrixComponent . Declaration SizeF? CustomImageSize { get; } Property Value Type Description System.Nullable < SizeF > The custom size. | Improve this Doc View Source CustomTextCrop Allows to set a custom cropper for the text (used by ICropChildrenComponent ) to crop the text of the child. Declaration ICropSelfComponent CustomTextCrop { get; set; } Property Value Type Description ICropSelfComponent The custom text crop. | Improve this Doc View Source LabelRenderSize Gets or sets the size of the label that hosts the text (that label can have a color and a border, and is also used for text alignment calculations). Declaration SizeF LabelRenderSize { get; set; } Property Value Type Description SizeF The size of the label render. | Improve this Doc View Source OnLabelSizeChanged Event which fires whenever the label size changes. Declaration IBlockingEvent OnLabelSizeChanged { get; } Property Value Type Description IBlockingEvent The on label size changed. | Improve this Doc View Source RenderCaret Gets or sets a value indicating whether this ITextComponent should render a caret (a vertical line, used for displaying text boxes). Declaration bool RenderCaret { get; set; } Property Value Type Description System.Boolean true if render caret; otherwise, false . See Also CaretPosition | Improve this Doc View Source Text Gets or sets the text. Declaration string Text { get; set; } Property Value Type Description System.String The text. | Improve this Doc View Source TextBackgroundVisible Gets or sets a value indicating whether the background of the text should be rendered. Declaration bool TextBackgroundVisible { get; set; } Property Value Type Description System.Boolean true if label visible; otherwise, false . | Improve this Doc View Source TextBoundingBoxes Gets the bounding boxes which surround the text.. Declaration AGSBoundingBoxes TextBoundingBoxes { get; } Property Value Type Description AGSBoundingBoxes The text bounding boxes. See Also PrepareTextBoundingBoxes() | Improve this Doc View Source TextConfig Gets or sets the text configuration (font, color, outline, etc). Declaration ITextConfig TextConfig { get; set; } Property Value Type Description ITextConfig The text config. | Improve this Doc View Source TextHeight Gets the height of the text. Declaration float TextHeight { get; } Property Value Type Description System.Single The height of the text. | Improve this Doc View Source TextLockStep Allows locking the component from changing (to allow for changing multiple components \"at once\"). Declaration ILockStep TextLockStep { get; } Property Value Type Description ILockStep The lock step. | Improve this Doc View Source TextVisible Gets or sets a value indicating whether to show/hide the text.. Declaration bool TextVisible { get; set; } Property Value Type Description System.Boolean true if text visible; otherwise, false . | Improve this Doc View Source TextWidth Gets the width of the text. Declaration float TextWidth { get; } Property Value Type Description System.Single The width of the text. Methods | Improve this Doc View Source PrepareTextBoundingBoxes() Prepares the bounding boxes for the text. This is called repeatedly by the engine, but you can call it yourself if you need accurate measurements NOW. Declaration void PrepareTextBoundingBoxes() See Also TextBoundingBoxes"
  },
  "api/AGS.API.ITextBoxComponent.html": {
    "href": "api/AGS.API.ITextBoxComponent.html",
    "title": "Interface ITextBoxComponent | MonoAGS Documentation",
    "keywords": "Interface ITextBoxComponent This component allows us to create a textbox control (a UI control which allows keyboard input to print text on screen). Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax [RequiredComponent(typeof(ITextComponent), true)] [RequiredComponent(typeof(IUIEvents), true)] [RequiredComponent(typeof(ITranslateComponent), true)] [RequiredComponent(typeof(IDrawableInfoComponent), true)] [RequiredComponent(typeof(IInObjectTreeComponent), true)] [RequiredComponent(typeof(IHasRoomComponent), true)] [RequiredComponent(typeof(IImageComponent), true)] [RequiredComponent(typeof(IVisibleComponent), true)] [RequiredComponent(typeof(IAnimationComponent), false)] public interface ITextBoxComponent : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source CaretFlashDelay Sets the number of frames will wait for flashing the caret. The default is 10, meaning the caret will be shown for 10 frames, hidden for 10 frames, and so on. Declaration uint CaretFlashDelay { get; set; } Property Value Type Description System.UInt32 | Improve this Doc View Source IsFocused Gets or sets whether the textbox is focused or not. Only when the textbox is focused it can receive input from the keyboard (and the caret is shown). The textbox automatically gets focus when clicked, and loses focus when the user clicks somewhere else. Declaration bool IsFocused { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source OnPressingKey This event can be subscribed to get notifications when keys are pressed. You can also use this event to cancel processing (or perform special processing) for specific keys. Let's say, for example, that we don't want our textbox to allow spaces. First, we'll subscribe to the event. Then, if a space key is pressed, we'll cancel its processing. Also, let's say that our textbox is inside a dialog, and we want the enter key to close the dialog (and then do something with the text). We'll listen to the enter key in the same dialog to close it. _myTextbox.OnPressingKey.Subscribe(onPressingKey); ... ... private void onPressingKey(TextboxKeyPressingEventArgs args) { if (args.Key == Key.Space) { args.ShouldCancel = true; return; } if (args.Key == Key.Enter) { args.ShouldCancel = true; _myTextbox.IsFocused = false; _myDialog.Close(); doSomethingWithText(_myTextbox.Text); } } Declaration IBlockingEvent<TextBoxKeyPressingEventArgs> OnPressingKey { get; } Property Value Type Description IBlockingEvent < TextBoxKeyPressingEventArgs > | Improve this Doc View Source Watermark An optional label that can act as a watermark. A watermark is for text which is shown in the textbox when it's empty and out of focus. An example of a watermark can be seen here: https://marketplace.visualstudio.com/items?itemName=havardhu.WatermarkTextBoxControl Declaration ILabel Watermark { get; set; } Property Value Type Description ILabel The watermark label."
  },
  "api/AGS.API.ITextBox.html": {
    "href": "api/AGS.API.ITextBox.html",
    "title": "Interface ITextBox | MonoAGS Documentation",
    "keywords": "Interface ITextBox A pre-set entity with all of the UI control components, plus a text and textbox component, for allowing editing/inserting text. Inherited Members IUIEvents.MouseEnter IUIEvents.MouseLeave IUIEvents.MouseMove IUIEvents.MouseClicked IUIEvents.MouseDoubleClicked IUIEvents.MouseDown IUIEvents.MouseUp IUIEvents.LostFocus IUIEvents.IsMouseIn ISkinComponent.Skin ISkinComponent.SkinTags IEntity.ID IEntity.DisplayName IEntity.GetFriendlyName() IComponentsCollection.AddComponent<TComponent>() IComponentsCollection.AddComponent(Type) IComponentsCollection.AddComponent<TComponent>(IComponent) IComponentsCollection.RemoveComponent<TComponent>() IComponentsCollection.RemoveComponent(Type) IComponentsCollection.RemoveComponent(IComponent) IComponentsCollection.PopComponent<TComponent>() IComponentsCollection.HasComponent<TComponent>() IComponentsCollection.HasComponent(Type) IComponentsCollection.HasComponent(IComponent) IComponentsCollection.GetComponent<TComponent>() IComponentsCollection.GetComponent(Type) IComponentsCollection.Bind<TComponent>(Action<TComponent>, Action<TComponent>) IComponentsCollection.Count IComponentsCollection.ComponentsInitialized IComponentsCollection.OnComponentsInitialized IComponentsCollection.OnComponentsChanged IComponentsCollection.OnDisposed(Action) System.Collections.Generic.IEnumerable<AGS.API.IComponent>.GetEnumerator() IHasRoomComponent.Room IHasRoomComponent.PreviousRoom IHasRoomComponent.OnRoomChanged IHasRoomComponent.ChangeRoomAsync(IRoom, Nullable<Single>, Nullable<Single>) IAnimationComponent.Animation IAnimationComponent.OnAnimationStarted IAnimationComponent.StartAnimation(IAnimation) IAnimationComponent.Animate(IAnimation) IAnimationComponent.AnimateAsync(IAnimation) IInTree<IObject>.TreeNode IColliderComponent.CenterPoint IColliderComponent.CollidesWith(Single, Single, IViewport) IVisibleComponent.Visible IVisibleComponent.UnderlyingVisible IEnabledComponent.Enabled IEnabledComponent.UnderlyingEnabled IEnabledComponent.ClickThrough ICustomPropertiesComponent.Properties IDrawableInfoComponent.RenderLayer IDrawableInfoComponent.IgnoreViewport IDrawableInfoComponent.IgnoreScalingArea IShaderComponent.Shader IImageComponent.IsImageVisible IImageComponent.CurrentSprite IImageComponent.SpriteProvider IBorderComponent.Border IPixelPerfectComponent.IsPixelPerfect IPixelPerfectCollidable.PixelPerfectHitTestArea IScale.Height IScale.Width IScale.ScaleX IScale.ScaleY IScale.Scale IScale.BaseSize IScale.ResetScale() IScale.ResetScale(Single, Single) IScale.ScaleTo(Single, Single) IScale.FlipHorizontally() IScale.FlipVertically() IRotate.Angle ITranslate.Position ITranslate.X ITranslate.Y ITranslate.Z IHasImage.Opacity IHasImage.Tint IHasImage.Brightness IHasImage.Pivot IHasImage.Image IModelMatrixComponent.GetModelMatrices() IModelMatrixComponent.OnMatrixChanged IModelMatrixComponent.ModelMatrixLockStep IBoundingBoxComponent.GetBoundingBoxes(IViewport) IBoundingBoxComponent.WorldBoundingBox IBoundingBoxComponent.OnBoundingBoxesChanged IBoundingBoxComponent.BoundingBoxLockStep IWorldPositionComponent.WorldX IWorldPositionComponent.WorldY IWorldPositionComponent.WorldXY ITextComponent.TextConfig ITextComponent.Text ITextComponent.LabelRenderSize ITextComponent.TextVisible ITextComponent.TextBackgroundVisible ITextComponent.TextHeight ITextComponent.TextWidth ITextComponent.OnLabelSizeChanged ITextComponent.CustomImageSize ITextComponent.CustomImageResolutionFactor ITextComponent.CustomTextCrop ITextComponent.TextBoundingBoxes ITextComponent.CaretPosition ITextComponent.RenderCaret ITextComponent.CaretXOffset ITextComponent.PrepareTextBoundingBoxes() ITextComponent.TextLockStep ITextBoxComponent.OnPressingKey ITextBoxComponent.IsFocused ITextBoxComponent.CaretFlashDelay ITextBoxComponent.Watermark IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ITextBox : IUIControl, IUIEvents, ISkinComponent, IObject, IEntity, IComponentsCollection, IEnumerable<IComponent>, IEnumerable, IHasRoomComponent, IAnimationComponent, IInObjectTreeComponent, IInTree<IObject>, IColliderComponent, IVisibleComponent, IEnabledComponent, ICustomPropertiesComponent, IDrawableInfoComponent, IShaderComponent, ITranslateComponent, IImageComponent, IBorderComponent, IScaleComponent, IRotateComponent, IPixelPerfectComponent, IPixelPerfectCollidable, IHasModelMatrix, IScale, IRotate, ITranslate, IHasImage, IModelMatrixComponent, IBoundingBoxComponent, IWorldPositionComponent, ITextComponent, ITextBoxComponent, IComponent, IDisposable, INotifyPropertyChanged"
  },
  "api/AGS.API.IStringItem.html": {
    "href": "api/AGS.API.IStringItem.html",
    "title": "Interface IStringItem | MonoAGS Documentation",
    "keywords": "Interface IStringItem A textual item to be shown on GUI controls (like combobox, listbox or tree). Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IStringItem Properties | Improve this Doc View Source HoverTextConfig Gets or sets the text rendering configuration for the item when the mouse is hovered over it. Declaration ITextConfig HoverTextConfig { get; set; } Property Value Type Description ITextConfig The hover text config. | Improve this Doc View Source IdleTextConfig Gets or sets the text rendering configuration for the item. Declaration ITextConfig IdleTextConfig { get; set; } Property Value Type Description ITextConfig The idle text config. | Improve this Doc View Source Properties Custom properties which can be assigned to the item and give more context. Declaration ICustomProperties Properties { get; } Property Value Type Description ICustomProperties The custom properties. | Improve this Doc View Source Text Gets or sets the text of the item. Declaration string Text { get; set; } Property Value Type Description System.String The text."
  },
  "api/AGS.API.IStackLayoutComponent.html": {
    "href": "api/AGS.API.IStackLayoutComponent.html",
    "title": "Interface IStackLayoutComponent | MonoAGS Documentation",
    "keywords": "Interface IStackLayoutComponent The stack layout component organizes its children in a one-dimensional line (\"stack\"), either horizontally, or vertically. The default is a simple vertical layout (top to bottom). Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax [RequiredComponent(typeof(IInObjectTreeComponent), true)] public interface IStackLayoutComponent : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source AbsoluteSpacing Gets or sets the absolute spacing between each item in the layout. This is an extra constant spacing that will be applied on top of the RelativeSpacing . This will either set the X or the Y of the children depending on the Direction of the layout. Set a positive x for left-to-right or negative x for right-to-left. Set a positive y for bottom-to-top or negative y for top-to-bottom. Declaration float AbsoluteSpacing { get; set; } Property Value Type Description System.Single The spacing. | Improve this Doc View Source CenterLayout Gets or sets a value indicating whether this IStackLayoutComponent centers layout around StartLocation . The default is false, meaning that StartLocation will be used as the starting point and not as the center. Declaration bool CenterLayout { get; set; } Property Value Type Description System.Boolean true if center layout; otherwise, false . | Improve this Doc View Source Direction Gets or sets the direction of the layout (horizontal or vertical). Declaration LayoutDirection Direction { get; set; } Property Value Type Description LayoutDirection The direction. | Improve this Doc View Source EntitiesToIgnore Gets a list of entitiy IDs to ignore from the layout. Declaration IConcurrentHashSet<string> EntitiesToIgnore { get; } Property Value Type Description IConcurrentHashSet < System.String > The entities to ignore. | Improve this Doc View Source LayoutAfterCrop Gets or sets whether the layout should account for any cropping made to the inner children. A use-case for this is when laying out a child which crops its children (i.e \"your\" grandchildren). A use-case for not enabling this (the default) is when you're laying out children inside a scrollable (and cropping) panel. Declaration bool LayoutAfterCrop { get; set; } Property Value Type Description System.Boolean true if layout after crop; otherwise, false . | Improve this Doc View Source OnLayoutChanged An event which fires whenever the layout changes. Declaration IBlockingEvent OnLayoutChanged { get; } Property Value Type Description IBlockingEvent The on layout changed event. | Improve this Doc View Source RelativeSpacing Gets or sets the relative spacing between each item in the layout. This is a factor which will multiply by the size of each item. This will either set the X or the Y of the children depending on the Direction of the layout. Set the X spacing for a width multiplier (1 will assign left-to-right, -1 will assign right-to-left). Set the Y spacing for a height multiplier (1 will assign bottom-to-top, -1 will assign top-to-bottom). Declaration float RelativeSpacing { get; set; } Property Value Type Description System.Single The relative spacing. | Improve this Doc View Source StartLocation Gets or sets the start location, which is the first item in the layout will be placed in that location, unless CenterLayout is enabled (in which case it represents the center point of the layout). Declaration float StartLocation { get; set; } Property Value Type Description System.Single The start location. Methods | Improve this Doc View Source DryRun() Performs the calculation of the layout without actually changing anything, and returns the width/height (depending if this is a horizontal/vertical layout) of the potential layout. Declaration float DryRun() Returns Type Description System.Single The width/height of the potential layout. | Improve this Doc View Source ForceRefreshLayout() Forces a layout refresh now (blocking), assuming layout was started. This should only be done from the update thread. Declaration void ForceRefreshLayout() | Improve this Doc View Source StartLayout() Starts applying the layout to its children (this needs to be called at least once). Declaration void StartLayout() | Improve this Doc View Source StopLayout() Stops applying the layout to its children. Declaration void StopLayout()"
  },
  "api/AGS.API.ISpriteSheet.html": {
    "href": "api/AGS.API.ISpriteSheet.html",
    "title": "Interface ISpriteSheet | MonoAGS Documentation",
    "keywords": "Interface ISpriteSheet Represents a sprite sheet: An image that contains multiple sprites in it, with some rules on how to read the sprites to perform an animation (usually). Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ISpriteSheet Properties | Improve this Doc View Source CellHeight Gets the height of the cell (in pixels). Declaration int CellHeight { get; } Property Value Type Description System.Int32 The height of the cell (in pixels). | Improve this Doc View Source CellsToGrab Gets the number of cells to grab when reading the sprite sheet. Declaration int CellsToGrab { get; } Property Value Type Description System.Int32 The number of cells to grab. | Improve this Doc View Source CellWidth Gets the width of the cell (in pixels). Declaration int CellWidth { get; } Property Value Type Description System.Int32 The width of the cell (in pixels). | Improve this Doc View Source Order Tells the engine how to read the sprite sheet (in what order). Declaration SpriteSheetOrder Order { get; } Property Value Type Description SpriteSheetOrder The reading order. | Improve this Doc View Source Path Gets the sprite sheet path (either the resource path, or the machine path). Declaration string Path { get; } Property Value Type Description System.String The path. | Improve this Doc View Source StartFromCell Which cell should we start from, when reading the sprite sheet? Declaration int StartFromCell { get; } Property Value Type Description System.Int32 The 'start from' cell."
  },
  "api/AGS.API.ISpriteProvider.html": {
    "href": "api/AGS.API.ISpriteProvider.html",
    "title": "Interface ISpriteProvider | MonoAGS Documentation",
    "keywords": "Interface ISpriteProvider Interface of a single sprite source. Inherited Members System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ISpriteProvider : INotifyPropertyChanged Properties | Improve this Doc View Source Sprite Gets a sprite to work with. Declaration ISprite Sprite { get; } Property Value Type Description ISprite The sprite."
  },
  "api/AGS.API.ISprite.html": {
    "href": "api/AGS.API.ISprite.html",
    "title": "Interface ISprite | MonoAGS Documentation",
    "keywords": "Interface ISprite A sprite is an image which can be manipulated (scaled, rotated or translated in space). Inherited Members IPixelPerfectCollidable.PixelPerfectHitTestArea IScale.Height IScale.Width IScale.ScaleX IScale.ScaleY IScale.Scale IScale.BaseSize IScale.ResetScale() IScale.ResetScale(Single, Single) IScale.ScaleTo(Single, Single) IScale.FlipHorizontally() IScale.FlipVertically() IRotate.Angle ITranslate.Position ITranslate.X ITranslate.Y ITranslate.Z IHasImage.Opacity IHasImage.Tint IHasImage.Brightness IHasImage.Pivot IHasImage.Image System.ComponentModel.INotifyPropertyChanged.PropertyChanged System.IDisposable.Dispose() Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ISprite : IPixelPerfectCollidable, IHasModelMatrix, IScale, IRotate, ITranslate, IHasImage, INotifyPropertyChanged, IDisposable Methods | Improve this Doc View Source Clone() Clone this sprite. This is a deep clone, meaning the generated sprite will be detached from the existing sprite. Declaration ISprite Clone() Returns Type Description ISprite The cloned sprite."
  },
  "api/AGS.API.ISpeechLine.html": {
    "href": "api/AGS.API.ISpeechLine.html",
    "title": "Interface ISpeechLine | MonoAGS Documentation",
    "keywords": "Interface ISpeechLine Represents a line of speech (text and sound). Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ISpeechLine Properties | Improve this Doc View Source AudioClip Gets the audio clip to be played (or null if there's no speech file for this line). Declaration IAudioClip AudioClip { get; } Property Value Type Description IAudioClip The audio clip. | Improve this Doc View Source Text Gets the text to be rendered on screen for this line. Declaration string Text { get; } Property Value Type Description System.String The text."
  },
  "api/AGS.API.ISpeechCache.html": {
    "href": "api/AGS.API.ISpeechCache.html",
    "title": "Interface ISpeechCache | MonoAGS Documentation",
    "keywords": "Interface ISpeechCache The speech cache is responsible for providing the correct audio clips to play for a specific text that's being said. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ISpeechCache Methods | Improve this Doc View Source GetSpeechLineAsync(String, String) Gets the audio clip to play and the text to write on screen for the specific said text. Declaration Task<ISpeechLine> GetSpeechLineAsync(string characterName, string text) Parameters Type Name Description System.String characterName The name of the character that speaks the text System.String text The said text. Returns Type Description System.Threading.Tasks.Task < ISpeechLine > The audio."
  },
  "api/AGS.API.ISoundProperties.html": {
    "href": "api/AGS.API.ISoundProperties.html",
    "title": "Interface ISoundProperties | MonoAGS Documentation",
    "keywords": "Interface ISoundProperties Allows to read or adjust the properties (volume, pitch, gain) of a sound/clip. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ISoundProperties Properties | Improve this Doc View Source Panning Gets or sets the panning the sound is coming from. The valid range is -1..1 -1 will play the sound on the left speaker. 1 will play the sound on the right speaker. 0 will play the sound equally on both speakers. Values in between will be interpolated accordingly. Note: Panning can only work on Mono sounds (it will not work for Stereo sounds). Also note that this is not necessarily the actual panning in which the sound will be played, as it might be modified by other systems To query the real volume, RealPanning . Declaration float Panning { get; set; } Property Value Type Description System.Single The location. See Also SoundModifiers | Improve this Doc View Source Pitch Gets or sets the pitch multiplier. The default is 1 (no pitch change). The minimum is 0.0001 (or, to be accurate, more than 0). Note that this is not necessarily the actual pitch in which the sound will be played, as it might be modified by other systems To query the real volume, RealPitch . Declaration float Pitch { get; set; } Property Value Type Description System.Single The pitch. See Also SoundModifiers | Improve this Doc View Source Tags Allows adding a tag to an audio clip/sound, which can be used by the engine or the game to modify this or other sounds accordingly. For example, if the sound is tagged as \"Speech\", the engine has an opt-in rule (ReduceWhenSpeechAudioRule) which reduces the volume of all playing sounds that are not tagged as \"Speech\". Common tags, other than \"Speech\" might be \"Music\" and \"Sounds\", but you can be creative with your custom tags (like: \"In a cave\") and add rules ( AudioRules ) that modify the sounds based on those tags. Declaration IConcurrentHashSet<string> Tags { get; } Property Value Type Description IConcurrentHashSet < System.String > The tags. | Improve this Doc View Source Volume Gets or sets the volume. The minimum volume is 0 (no volume). The maximum volume is 1 (also the default), though some sound cards may actually support increasing the volume. Note that this is not necessarily the actual volume in which the sound will be played, as it might be modified by other systems (like reducing volume for background sounds when speech sound is playing). To query the real volume, RealVolume . Declaration float Volume { get; set; } Property Value Type Description System.Single The volume. See Also SoundModifiers"
  },
  "api/AGS.API.ISoundPlayer.html": {
    "href": "api/AGS.API.ISoundPlayer.html",
    "title": "Interface ISoundPlayer | MonoAGS Documentation",
    "keywords": "Interface ISoundPlayer Allows to play a sound. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ISoundPlayer Properties | Improve this Doc View Source CurrentlyPlayingSounds Gets a list of currently playing sounds for this audio clip. Declaration ReadOnlyCollection<ISound> CurrentlyPlayingSounds { get; } Property Value Type Description System.Collections.ObjectModel.ReadOnlyCollection < ISound > The list of currently playing sounds. | Improve this Doc View Source IsPlaying Gets a value indicating whether this ISoundPlayer is playing a sound (or more than 1 sound). Declaration bool IsPlaying { get; } Property Value Type Description System.Boolean true if is playing; otherwise, false . | Improve this Doc View Source OnSoundCompleted An event which is sent when an existing sound has completed playing. Declaration IBlockingEvent<ISound> OnSoundCompleted { get; } Property Value Type Description IBlockingEvent < ISound > The event. | Improve this Doc View Source OnSoundStarted An event which is sent when a new sound starts playing. Declaration IBlockingEvent<ISound> OnSoundStarted { get; } Property Value Type Description IBlockingEvent < ISound > The event. Methods | Improve this Doc View Source Play(Boolean, ISoundProperties) Plays a sound. Declaration ISound Play(bool shouldLoop = false, ISoundProperties properties = null) Parameters Type Name Description System.Boolean shouldLoop If set to true should loop. ISoundProperties properties Properties. Returns Type Description ISound Examples In order to play a sound and then asynchronously wait for it to finish: private async Task onSpecificTrigger() { ISound sound = myAudioClip.Play(); doStuffWhileSoundIsPlaying(); //This happens in parallel to the playing sound await sound.Completed; doStuffAfterSoundFinishedPlaying(); } | Improve this Doc View Source Play(Single, Boolean) Plays a sound Declaration ISound Play(float volume, bool shouldLoop = false) Parameters Type Name Description System.Single volume Volume (allowed values: 0-1, see ISoundPropertie). System.Boolean shouldLoop If set to true should loop. Returns Type Description ISound | Improve this Doc View Source PlayAndWait(ISoundProperties) Plays a sound and blocks until the sound is completed. Declaration void PlayAndWait(ISoundProperties properties = null) Parameters Type Name Description ISoundProperties properties Properties. | Improve this Doc View Source PlayAndWait(Single) Plays a sound and blocks until the sound is completed. Declaration void PlayAndWait(float volume) Parameters Type Name Description System.Single volume Volume (allowed values: 0-1, see ISoundPropertie)."
  },
  "api/AGS.API.ISoundModifier.html": {
    "href": "api/AGS.API.ISoundModifier.html",
    "title": "Interface ISoundModifier | MonoAGS Documentation",
    "keywords": "Interface ISoundModifier A sound modifier can be implemented in order to modify one or more properties of a sound on-the-fly. For example, the engine has an audio rule ( IAudioRule ) that adds a modifier to all non-speech sounds, which reduces the volume of those sounds when a speech sound plays. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ISoundModifier Properties | Improve this Doc View Source OnChange Fires an event when the modifier changes. The sound subscribes to this event to be notified it that it needs to re-calculate its properties. Declaration IBlockingEvent OnChange { get; } Property Value Type Description IBlockingEvent The on change. Methods | Improve this Doc View Source GetPanning(Single) Gets the panning after modification. Declaration float GetPanning(float panning) Parameters Type Name Description System.Single panning Panning before modification. Returns Type Description System.Single The panning after modification. | Improve this Doc View Source GetPitch(Single) Gets the pitch after modification. Declaration float GetPitch(float pitch) Parameters Type Name Description System.Single pitch Pitch before modification. Returns Type Description System.Single The pitch after modification. | Improve this Doc View Source GetVolume(Single) Gets the volume after modification. Declaration float GetVolume(float volume) Parameters Type Name Description System.Single volume Volume before modification. Returns Type Description System.Single The volume after modification. See Also SoundModifiers"
  },
  "api/AGS.API.ISoundEmitter.html": {
    "href": "api/AGS.API.ISoundEmitter.html",
    "title": "Interface ISoundEmitter | MonoAGS Documentation",
    "keywords": "Interface ISoundEmitter A sound emitter allows to bind an audio clip to an entity which is moving on a screen. Playing a sound from the emitter will pan it or set the volume (both can be turned off) to sound like it coming from the same location the entity is in. You can also assign the emitter to automatically play the sound on specific animation frames (so it's a perfect fit for footsteps, for example). Inherited Members ISoundPlayer.Play(Boolean, ISoundProperties) ISoundPlayer.Play(Single, Boolean) ISoundPlayer.PlayAndWait(ISoundProperties) ISoundPlayer.PlayAndWait(Single) ISoundPlayer.IsPlaying ISoundPlayer.CurrentlyPlayingSounds ISoundPlayer.OnSoundStarted ISoundPlayer.OnSoundCompleted Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ISoundEmitter : ISoundPlayer Examples var footstep = await game.Factory.Sound.LoadAudioClipAsync(\"Sounds/footstep.ogg\"); ISoundEmitter emitter = new AGSSoundEmitter(game); emitter.AudioClip = footstep; emitter.Object = cHero; emitter.Assign(cHero.Outfit[AGSOutfit.Walk], 1, 5); //will play the footstep on frames 1 and 5 of the walking animation Properties | Improve this Doc View Source AudioClip Gets or sets the audio clip that is bound to the emitter. Declaration IAudioClip AudioClip { get; set; } Property Value Type Description IAudioClip The audio clip. | Improve this Doc View Source AutoAdjustVolume Gets or sets a value indicating whether this ISoundEmitter auto adjusts volume when the bound entity is standing on a volume changing area. This is on by default. Declaration bool AutoAdjustVolume { get; set; } Property Value Type Description System.Boolean true if auto adjust volume; otherwise, false . | Improve this Doc View Source AutoPan Gets or sets a value indicating whether this ISoundEmitter auto pans the sound based on the location (panning is the act of distributing the sound across left/right speakers to make the sound appear more to the left/right). This is on by default. Declaration bool AutoPan { get; set; } Property Value Type Description System.Boolean true if auto pan; otherwise, false . | Improve this Doc View Source EntityID Gets or sets the entity identifier. This is used by the emitter to check if the entity is in a volume altering area, to change the volume of the sound accordingly. You can set the Object property instead a short-hand convience. Declaration string EntityID { get; set; } Property Value Type Description System.String The entity identifier. | Improve this Doc View Source HasRoom Gets or sets the room component, for the emitter to not play the sound if the entity is not in currently rendered room. You can set the Object property instead a short-hand convience. Declaration IHasRoomComponent HasRoom { get; set; } Property Value Type Description IHasRoomComponent The has room. | Improve this Doc View Source Object Sets the object which is bound to the emitter. This is a short-hand to set the translate, room and entity id components. Declaration IObject Object { set; } Property Value Type Description IObject The object. | Improve this Doc View Source WorldPosition Gets or sets the world position component (for binding to location). You can set the Object property instead a short-hand convience. Declaration IWorldPositionComponent WorldPosition { get; set; } Property Value Type Description IWorldPositionComponent The translate. Methods | Improve this Doc View Source Assign(IAnimation, Int32[]) Assign the specified animation frames to play the sound whenever the frames are showing. Declaration void Assign(IAnimation animation, params int[] frames) Parameters Type Name Description IAnimation animation The animation. System.Int32 [] frames The frame numbers (where 0 is the first frame). | Improve this Doc View Source Assign(IAnimationFrame[]) Assign the specified animation frames to play the sound whenever the frames are showing. Declaration void Assign(params IAnimationFrame[] frames) Parameters Type Name Description IAnimationFrame [] frames Frames. | Improve this Doc View Source Assign(IDirectionalAnimation, Int32[]) Assign the specified animation frames (in all directions) to play the sound whenever the frames are showing. This assumes all animations in all directions have matching frames, otherwise use the more specific overloads. Declaration void Assign(IDirectionalAnimation animation, params int[] frames) Parameters Type Name Description IDirectionalAnimation animation The animation. System.Int32 [] frames The frame numbers (where 0 is the first frame)."
  },
  "api/AGS.API.ISound.html": {
    "href": "api/AGS.API.ISound.html",
    "title": "Interface ISound | MonoAGS Documentation",
    "keywords": "Interface ISound An instance of a playing sound. You'll usually use an IAudioClip to play a sound, and control the playing sound from this interface. Inherited Members ISoundProperties.Volume ISoundProperties.Pitch ISoundProperties.Panning ISoundProperties.Tags Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ISound : ISoundProperties Properties | Improve this Doc View Source Completed A task that can be used to await a playing sound asynchronously until it completes (do not use on a looping sound). Declaration Task Completed { get; } Property Value Type Description System.Threading.Tasks.Task The completed. Examples private async Task onMusicBoxInteract() { ISound sound = musicBoxAudioClip.Play(); await cHero.SayAsync(\"The music box is currently playing a song...\"); //We didn't wait for the sound to complete yet, so the character is speaking in parallel await sound.Completed; await cHero.SayAsync(\"What a nice song that was!\"); } | Improve this Doc View Source Duration Gets duration of the sound in seconds. Declaration float Duration { get; } Property Value Type Description System.Single | Improve this Doc View Source HasCompleted Has this ISound completed playing? Declaration bool HasCompleted { get; } Property Value Type Description System.Boolean true if has completed; otherwise, false . | Improve this Doc View Source IsLooping Is this ISound looping (i.e running in an endless loop)? Declaration bool IsLooping { get; } Property Value Type Description System.Boolean true if is looping; otherwise, false . | Improve this Doc View Source IsPaused Is this ISound paused? Declaration bool IsPaused { get; } Property Value Type Description System.Boolean true if is paused; otherwise, false . | Improve this Doc View Source IsValid Is the sound a valid sound and expected to play properly, or is there some audio problem and this is a dummy object? Declaration bool IsValid { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Position Gets or sets the playback position within the sound in seconds. Declaration float Position { get; set; } Property Value Type Description System.Single The position. | Improve this Doc View Source RealPanning Gets the real panning of the sound (after it has been modified by all the existing sound modifiers). Declaration float RealPanning { get; } Property Value Type Description System.Single The real panning. See Also SoundModifiers Panning | Improve this Doc View Source RealPitch Gets the real pitch of the sound (after it has been modified by all the existing sound modifiers). Declaration float RealPitch { get; } Property Value Type Description System.Single The real pitch. See Also SoundModifiers Pitch | Improve this Doc View Source RealVolume Gets the real volume of the sound (after it has been modified by all the existing sound modifiers). Declaration float RealVolume { get; } Property Value Type Description System.Single The real volume. See Also SoundModifiers Volume | Improve this Doc View Source SoundModifiers A list of modifiers for sound properties. The sound modifiers act on the existing sound properties that you set (volume, panning, pitch), and modify them on-the-fly (for example, the engine has a rule where the volume of non-speech sounds is reduced when speech is playing). Declaration IAGSBindingList<ISoundModifier> SoundModifiers { get; } Property Value Type Description IAGSBindingList < ISoundModifier > The list of sound modifiers. See Also Volume Pitch Panning RealVolume RealPitch RealPanning | Improve this Doc View Source SourceID An internal id for the source that is playing the sound. This can be used if low-level OpenAL access is needed, but for regular uses can be ignored. Declaration int SourceID { get; } Property Value Type Description System.Int32 The source identifier. Methods | Improve this Doc View Source Pause() Pause this sound. Declaration void Pause() | Improve this Doc View Source Resume() Resume this sound (if the sound is already playing, or already completed, then it does nothing). Declaration void Resume() | Improve this Doc View Source Rewind() Rewind this sound to the beginning (if the sound has already completed, then it does nothing). Declaration void Rewind() | Improve this Doc View Source Stop() Stop this sound (if the sound has already completed, then it does nothing). Declaration void Stop()"
  },
  "api/AGS.API.ISayConfig.html": {
    "href": "api/AGS.API.ISayConfig.html",
    "title": "Interface ISayConfig | MonoAGS Documentation",
    "keywords": "Interface ISayConfig Configuration for how speech is rendered. Inherited Members System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ISayConfig : INotifyPropertyChanged Properties | Improve this Doc View Source BackgroundColor Gets or sets the color of the text label's background (the default is transparent). Declaration Color BackgroundColor { get; set; } Property Value Type Description Color The color of the background. | Improve this Doc View Source Border Gets or sets an optional border which will surround the label hosting the text. Declaration IBorderStyle Border { get; set; } Property Value Type Description IBorderStyle The border. | Improve this Doc View Source LabelSize Gets or sets the size of the label which will host the text: default is (250, 200). Declaration SizeF LabelSize { get; set; } Property Value Type Description SizeF The size of the label. | Improve this Doc View Source PortraitConfig A configuration for rendering a portrait. If this is null, no portrait will be rendered. Declaration IPortraitConfig PortraitConfig { get; set; } Property Value Type Description IPortraitConfig The portrait config. | Improve this Doc View Source SkipText Determines how to skip the said text- by time, mouse, both (the default) or a custom implementation. Declaration SkipText SkipText { get; set; } Property Value Type Description SkipText The skip text. | Improve this Doc View Source TextConfig Configuration for how the text is rendered (font, color, outlines, etc). Declaration ITextConfig TextConfig { get; set; } Property Value Type Description ITextConfig The text config. | Improve this Doc View Source TextDelay When SkipText is configured to be either ByTime or ByTimeAndMouse then the engine estimates how long to keep the said text on the screen before moving on. This property determines how long (in milliseconds) should the engine wait for each character in the text (and 40 milliseconds overall are added on top of that to avoid too short sentences ending abruptly). The default for this value is 70 milliseconds. Declaration int TextDelay { get; set; } Property Value Type Description System.Int32 The text delay. Examples If the character says \"Hello, world!\" and TextDelay = 70, then the amount of the time the engine waits will be: 40 + number of characters * 70 = 40 + 13 * 70 = 950 (milliseconds). | Improve this Doc View Source TextOffset An optional offset for rendering the text from the planned location. Declaration PointF TextOffset { get; set; } Property Value Type Description PointF The text offset."
  },
  "api/AGS.API.ISayComponent.html": {
    "href": "api/AGS.API.ISayComponent.html",
    "title": "Interface ISayComponent | MonoAGS Documentation",
    "keywords": "Interface ISayComponent A component which adds the ability to speak for an entity. Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax [RequiredComponent(typeof(ITranslateComponent), false)] [RequiredComponent(typeof(IHasRoomComponent), false)] [RequiredComponent(typeof(IOutfitComponent), true)] [RequiredComponent(typeof(IFaceDirectionComponent), true)] public interface ISayComponent : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source OnBeforeSay An event which allows you to manipulate the text label just before it is being rendered, and to allow you to have a custom skip text implementation. Declaration IBlockingEvent<BeforeSayEventArgs> OnBeforeSay { get; } Property Value Type Description IBlockingEvent < BeforeSayEventArgs > The on before say. | Improve this Doc View Source SpeechConfig Gets the speech configuration. Declaration ISayConfig SpeechConfig { get; } Property Value Type Description ISayConfig The speech config. Methods | Improve this Doc View Source SayAsync(String, Nullable<PointF>, Nullable<PointF>) Say the specified text asynchronously. This basically does the following: Puts text on the screen for some time Change the character animation to the speaking animation Optionally display a portrait of the character Optionally play an audio clip You can configure how the text is rendered (color, font, etc: see text rendering section for more on the all the options that you have for text rendering), when the text is skipped (by time and how much, by mouse, both, or none which means you implement text skipping yourself), a label to host the text with a border(see the section about borders) and background color, and a text offset to offset the location of the text.That offset will be relative to the default text display location which will be selected by the engine: The engine, by default, tries to place the text above the character and a little to the side, unless the text won't fit the screen, then it changes the location to ensure the text fits the screen. If you don't like that behavior you can implement your own text location by implementing the ISayLocationProvider interface (and hooking it up, see the section about customizability). As for the portrait, you can configure the object which shows the portrait(this is a standard object, so it can has everything a normal object has, including animations, scaling, rotations, etc), plus a strategy on where to position the portrait(SpeakerPosition- on the top, either left or right based on where the speaker is standing, Alternating- top right, then top left, then top right, etc or Custom which leaves the portrait positioning to you) and custom offsets for both the portrait and for the text from the portrait. In order to play an audio clip, the text you pass to the speech method should have a number at the beginning prefixed by an ampersand, for example, \"&17 Hello there!\". If the number exists, the engine will look for an audio file with the first four capital letters of your character's id followed by the number. So if the line was said by \"Christopher\", the engine will look for the file \"CHRI17\". Those files should be placed in a special folder, under Assets -> Speech -> English. Note: In future revisions we're planning on introducing multi-language support, and also other ways of building the speech \"database\". If the engine does not find the file it will not play an audio clip, and in any way the \"&17\" will be stripped away from the text and will not be displayed on screen. Declaration Task SayAsync(string text, PointF? textPosition = default(PointF? ), PointF? portraitPosition = default(PointF? )) Parameters Type Name Description System.String text Text. System.Nullable < PointF > textPosition Optional position (bottom-left by default, subscribe OnBeforeSay and change the Pivot of the label to override it) for where the text will be placed. If not provided, the engine will place the text above the character's head. The interface for selecting the default text position (if none is passed here) is ISayLocationProvider and you can override it if needed to provide default text (and portrait) locations. System.Nullable < PointF > portraitPosition Optional position for where the portrait will be placed (if there is a portrait configured). If no position provided the engine will place the portrait based on the portrait configuration ( PortraitConfig ), assuming there is a portrait configuration. The interface for selecting the default portrait position (if none is passed here) is ISayLocationProvider and you can override it if needed to provide default portrait (and text) locations. Returns Type Description System.Threading.Tasks.Task Examples await cHero.SayAsync(\"&17 Hello there!\"); //Will say \"Hello there!\" and will play \"JASO17.ogg\" (assuming the character name is \"Jason\" and JASO17.ogg exists in Assets/Speech/English) Task waitForTalk = cHero.SayAsync(\"Walking Home!\"); await cHero.WalkAsync(home); //character will walk and talk at the same time. await waitForTalk; //Waiting for the talk to complete before moving to the next setnence. await cHero.SayAsync(\"And, I'm home!\", (200, 100)); //The text for this sentence will be placed at co-ordinates (200, 100) instead of above the character's head. See Also IComponent"
  },
  "api/AGS.API.ISaveLoad.html": {
    "href": "api/AGS.API.ISaveLoad.html",
    "title": "Interface ISaveLoad | MonoAGS Documentation",
    "keywords": "Interface ISaveLoad Allows saving/loading a game. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ISaveLoad Methods | Improve this Doc View Source Load(String) Load the game with the specified saveName. Declaration void Load(string saveName) Parameters Type Name Description System.String saveName Save name. | Improve this Doc View Source LoadAsync(String) Load the game asynchronously with the specified saveName. Declaration Task LoadAsync(string saveName) Parameters Type Name Description System.String saveName Save name. Returns Type Description System.Threading.Tasks.Task The load. | Improve this Doc View Source Restart() Restarts the game by loading the last set restart point. Declaration void Restart() See Also SetRestartPoint() | Improve this Doc View Source Save(String) Save the game with the specified saveName. Declaration void Save(string saveName) Parameters Type Name Description System.String saveName Save name. | Improve this Doc View Source SaveAsync(String) Save the game asynchronously with the specified saveName. Declaration Task SaveAsync(string saveName) Parameters Type Name Description System.String saveName Save name. Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source SetRestartPoint() Sets the restart point. This will save the game and will be loaded when restarting the game. Declaration void SetRestartPoint() See Also Restart()"
  },
  "api/AGS.API.ISaturationEffectComponent.html": {
    "href": "api/AGS.API.ISaturationEffectComponent.html",
    "title": "Interface ISaturationEffectComponent | MonoAGS Documentation",
    "keywords": "Interface ISaturationEffectComponent Allows adjusting the saturation of an entity/screen. If added as a component to an entity, the saturation property will control the entity's saturation. If created separately (and initialized with a null entity), this can be use to control the saturation of the entire screen. //to adjust saturation for an object: myObj.AddComponent<ISaturationEffectComponent>().Saturation = 0.5f; //to adjust saturation for the screen: var effect = new SaturationEffect(game.Factory.Shaders, game.Events); effect.Init(null); effect.Saturation = 0.5f; Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ISaturationEffectComponent : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source Saturation Gets or sets the saturation for the entity/screen. The default is 1, which is the same color as the original image. A lower value than 1 will reduce saturation (0 being completely gray) and a greater value than 1 will increase saturation. Declaration float Saturation { get; set; } Property Value Type Description System.Single The saturation."
  },
  "api/AGS.API.IRuntimeSettings.html": {
    "href": "api/AGS.API.IRuntimeSettings.html",
    "title": "Interface IRuntimeSettings | MonoAGS Documentation",
    "keywords": "Interface IRuntimeSettings Game settings. Inherited Members IGameSettings.VirtualResolution IGameSettings.Defaults IGameSettings.Backend System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IRuntimeSettings : IGameSettings, INotifyPropertyChanged Properties | Improve this Doc View Source PreserveAspectRatio If the game is configured to preserve the aspect ratio, then in case the window is resized and the aspect ratio is changed, the screen will be letterboxed or pillarboxed so the aspect ratio for the actual content will remain the same Declaration bool PreserveAspectRatio { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Title Gets the title (the name of the game): would appear on the game window's title bar. Declaration string Title { get; set; } Property Value Type Description System.String The title. | Improve this Doc View Source Vsync Gets the vsync mode (synchronization of the frame update rate with screen refresh rate to prevent tearing). To read about how this works: https://hardforum.com/threads/how-vsync-works-and-why-people-loathe-it.928593/ Declaration VsyncMode Vsync { get; set; } Property Value Type Description VsyncMode The vsync. | Improve this Doc View Source WindowBorder Gets the style of the window's border. Declaration WindowBorder WindowBorder { get; set; } Property Value Type Description WindowBorder The window border. | Improve this Doc View Source WindowSize Gets the size of the window (the size of the actual window on screen). Declaration Size WindowSize { get; set; } Property Value Type Description Size The size of the window. | Improve this Doc View Source WindowState Gets the state of the window (minimized/maximized/etc). Declaration WindowState WindowState { get; set; } Property Value Type Description WindowState The state of the window. Methods | Improve this Doc View Source LoadFrom(IGameSettings) Loads settings from the specified object. Declaration void LoadFrom(IGameSettings settings) Parameters Type Name Description IGameSettings settings Settings."
  },
  "api/AGS.API.IRotateComponent.html": {
    "href": "api/AGS.API.IRotateComponent.html",
    "title": "Interface IRotateComponent | MonoAGS Documentation",
    "keywords": "Interface IRotateComponent A component which allows rotating an entity. Inherited Members IRotate.Angle IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IRotateComponent : IRotate, IComponent, IDisposable, INotifyPropertyChanged"
  },
  "api/AGS.API.IRotate.html": {
    "href": "api/AGS.API.IRotate.html",
    "title": "Interface IRotate | MonoAGS Documentation",
    "keywords": "Interface IRotate Allows rotating an entity/sprite. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IRotate Properties | Improve this Doc View Source Angle Gets or sets the angle of the entity/sprite (in degrees). Declaration float Angle { get; set; } Property Value Type Description System.Single The angle."
  },
  "api/AGS.API.IRoomTransitions.html": {
    "href": "api/AGS.API.IRoomTransitions.html",
    "title": "Interface IRoomTransitions | MonoAGS Documentation",
    "keywords": "Interface IRoomTransitions Allows to set the room transitions (and to get some information on the transitions) Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IRoomTransitions Properties | Improve this Doc View Source Transition Gets or sets the room transition. All future room transitions will use this transition until a new one has been set. Declaration IRoomTransition Transition { get; set; } Property Value Type Description IRoomTransition The transition. Examples Let's set a box out transition: _gameState.RoomTransitions.Transition = AGSRoomTransitions.BoxOut(); Methods | Improve this Doc View Source SetOneTimeNextTransition(IRoomTransition) Sets a one time transition. This transition will only be used once (for the next room transition), and then the old transition will be used again. Declaration void SetOneTimeNextTransition(IRoomTransition transition) Parameters Type Name Description IRoomTransition transition The room transition to be used once. Examples Let's set a dissolve transition, only for the next room transition: _gameState.RoomTransitions.SetOneTimeNextTransition(AGSRoomTransitions.Dissolve());"
  },
  "api/AGS.API.IResourceLoader.html": {
    "href": "api/AGS.API.IResourceLoader.html",
    "title": "Interface IResourceLoader | MonoAGS Documentation",
    "keywords": "Interface IResourceLoader The resource loader is the go-to place for retrieving resources. It does so by querying various resources packs for the resource you require until it is found. Each resource pack has a priority which determines the order of precedence in which the packs are queried (higher priority gets precedence). There are currently 2 built-in resource packs in the engine, which allow for 2 ways you can have resources in your game: They can be embedded in the project or loaded from the file system. This interface allows for loading resource either from the embedded project files or from the file system. The advantage of having the resources embedded is that you can rest assured the resources will be distributed with your game and cannot be touched from outside, which is why it's the recommended method. Loading from file system might be useful if you need the resources to be loaded dynamically, for example you might want to download resources from the internet, or if you give the user the option to choose her/his avatar. To embed resources in your game project, first add the resource files to the \"Assets\" folder in your shared game project(it doesn't have to be in the root \"Assets\" folder, you can have any structure you want in there). Then, in the solution explorer, right click the \"Assets\" folder and \"Add Existing\" (there are options for adding files or complete folders, depending on what you want to do) and add those resources to the project. You should then see those resources in the tree. Lastly, right click those resources and select \"Embedded Resource\" as your \"Build Option\". Note that even the resource is embedded, it's only embedded when compiling the game, so you cannot delete the file before deploying your game, and if you replace the file, it will be automatically replaced in the game on your next run. The path used by the loading methods has to be structured as so: if the resource is to be loaded from a file in the file system, then put the absolute path of the file. If the resource is embedded then put the relative path of the file (when the current folder is the \"Assets\" folder). So, for example, if you have an audio file called \"trumpet.ogg\" sitting under a \"Sounds\" folder in \"Assets\", your path would be \"Sounds/trumpet.ogg\". Note that this would work even if the file is sitting in that folder but not embedded. This is because (assuming the resource loader is configured with both an embedded resource pack and a file system resource pack) ResourceLoader will search for both an embedded resource and for a file from the file system. The order of the search depends on the configured priority for each resource pack. Inherited Members IResourcePack.LoadResource(String) IResourcePack.LoadResources(String) IResourcePack.ResolvePath(String) Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IResourceLoader : IResourcePack Properties | Improve this Doc View Source ResourcePacks Allows adding/removing resource packs from the resource loader. Declaration IAGSBindingList<ResourcePack> ResourcePacks { get; } Property Value Type Description IAGSBindingList < ResourcePack > The resource packs. Methods | Improve this Doc View Source LoadResourcesFromPaths(String[]) Loads a list of resources from a list of embedded/file paths. Declaration List<IResource> LoadResourcesFromPaths(params string[] paths) Parameters Type Name Description System.String [] paths Paths. Returns Type Description System.Collections.Generic.List < IResource > The resources."
  },
  "api/AGS.API.IResource.html": {
    "href": "api/AGS.API.IResource.html",
    "title": "Interface IResource | MonoAGS Documentation",
    "keywords": "Interface IResource A resource is any asset which is loaded from a stream of data (could be from a file, or embedded in memory, or network stream, or any other stream). Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IResource Properties | Improve this Doc View Source ID A unique identifer for the resource. Declaration string ID { get; } Property Value Type Description System.String The identifier. | Improve this Doc View Source Stream The stream of data associated with the resource. Declaration Stream Stream { get; } Property Value Type Description System.IO.Stream The stream."
  },
  "api/AGS.API.IResolver.html": {
    "href": "api/AGS.API.IResolver.html",
    "title": "Interface IResolver | MonoAGS Documentation",
    "keywords": "Interface IResolver The resolver is an object that allows you to retrieve various systems from the engine. It uses an inversion of control container ( https://en.wikipedia.org/wiki/Inversion_of_control ) in order to allow you to replace the built-in engine system implementations with your own implementations. For more details, see: https://tzachshabtay.github.io/MonoAGS/articles/customizations.html Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IResolver Methods | Improve this Doc View Source Resolve<TService>() Resolves a service. Declaration TService Resolve<TService>() Returns Type Description TService The requested service. Type Parameters Name Description TService The type of the service you request."
  },
  "api/AGS.API.IRepeatedlyExecuteEventArgs.html": {
    "href": "api/AGS.API.IRepeatedlyExecuteEventArgs.html",
    "title": "Interface IRepeatedlyExecuteEventArgs | MonoAGS Documentation",
    "keywords": "Interface IRepeatedlyExecuteEventArgs Event arguments for the OnRepeatedlyExecute event. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IRepeatedlyExecuteEventArgs Properties | Improve this Doc View Source DeltaTime Gets the delta time in seconds from the last tick (the last update event). You can use it to achieve framerate independence for custom movements. See here: https://www.scirra.com/tutorials/67/delta-time-and-framerate-independence Declaration double DeltaTime { get; } Property Value Type Description System.Double The delta time."
  },
  "api/AGS.API.IRenderPipeline.html": {
    "href": "api/AGS.API.IRenderPipeline.html",
    "title": "Interface IRenderPipeline | MonoAGS Documentation",
    "keywords": "Interface IRenderPipeline The render pipeline is responsible for collecting all of the rendering information and passing it on to the render loop. It allows entities to subscribe their own renderers and pass on custom drawing instructions. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IRenderPipeline Properties | Improve this Doc View Source OnBeforeProcessingDisplayList An event that fires on each tick before processing the display list for rendering. This allows viewing (and even modifying) the display list prior to rendering it. Declaration IBlockingEvent<DisplayListEventArgs> OnBeforeProcessingDisplayList { get; } Property Value Type Description IBlockingEvent < DisplayListEventArgs > The event. Methods | Improve this Doc View Source Subscribe(String, IRenderer, Int32) Subscribe the specified renderer to the specified entity. If the entity is part of the display list (i.e if it's in the current room or a GUI), all subscribed renderers will be called to submit their drawing instructions. Declaration void Subscribe(string entityID, IRenderer renderer, int z = 0) Parameters Type Name Description System.String entityID Entity identifier. IRenderer renderer Renderer. System.Int32 z Gets the z index for deciding which renderer will be in front of the other renderer (in case there are multiple renderers per entity). The smaller the Z, the more in front a renderer is. | Improve this Doc View Source Unsubscribe(String, IRenderer) Unsubscribe the specified renderer and entity. Declaration void Unsubscribe(string entityID, IRenderer renderer) Parameters Type Name Description System.String entityID Entity identifier. IRenderer renderer Renderer. See Also IRenderer IRendererLoop IRenderInstruction IDisplayList"
  },
  "api/AGS.API.IFocusedUI.html": {
    "href": "api/AGS.API.IFocusedUI.html",
    "title": "Interface IFocusedUI | MonoAGS Documentation",
    "keywords": "Interface IFocusedUI Contains information about UI controls which have focus (and thus block input from other controls). Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IFocusedUI Properties | Improve this Doc View Source CannotLoseFocus A list of entities that cannot lose focus. Those will still grab input even if there's a grabbing focus dialog showing. This is useful for debugging tools, for example. Declaration IConcurrentHashSet<string> CannotLoseFocus { get; } Property Value Type Description IConcurrentHashSet < System.String > The cannot lose focus. | Improve this Doc View Source FocusedWindow Gets the focused window (useful for modal dialogs). If a window has focus then objects outside the window will not be clickable. To make your window focusable, add the IModalWindowComponent and then use GrabFocus/LoseFocus as needed. Declaration IEntity FocusedWindow { get; } Property Value Type Description IEntity The focused window. | Improve this Doc View Source HasKeyboardFocus Gets or sets the control which receives keyboard events. If there's a control with keyboard focus, then keyboard input should go to that control and not to anywhere else. Declaration IEntity HasKeyboardFocus { get; set; } Property Value Type Description IEntity The focused text box."
  },
  "api/AGS.API.IFaceDirectionComponent.html": {
    "href": "api/AGS.API.IFaceDirectionComponent.html",
    "title": "Interface IFaceDirectionComponent | MonoAGS Documentation",
    "keywords": "Interface IFaceDirectionComponent Gives the ability for a character to change the direction he/she is facing. Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax [RequiredComponent(typeof(IAnimationComponent), true)] [RequiredComponent(typeof(ITranslateComponent), true)] public interface IFaceDirectionComponent : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source CurrentDirectionalAnimation Gets or sets the current directional animation used by the character to face to different directions. Declaration IDirectionalAnimation CurrentDirectionalAnimation { get; set; } Property Value Type Description IDirectionalAnimation The current directional animation. Examples cEgo.CurrentDirectionalAnimation = cEgo.Outfit.IdleAnimation; await cEgo.FaceDirectionAsync(Direction.Right); //character is facing right doing nothing (idle). cEgo.CurrentDirectionalAnimation = dancingAnimation; awaut cEgo.FaceDirectionAsync(Direction.Down); //character is now doing a dance right to our face! | Improve this Doc View Source Direction Gets the current direction that the character is facing. Down -> the character is looking directly at the camera. Up -> The character's back is facing the camera. Declaration Direction Direction { get; } Property Value Type Description Direction The direction. Examples if (cEgo.Direction == Direction.Down) { await cEgo.SayAsync(\"I'm looking right at you!\"); } Methods | Improve this Doc View Source FaceDirectionAsync(Direction) Changes the direction the character is facing to asynchronously (without blocking the game). Declaration Task FaceDirectionAsync(Direction direction) Parameters Type Name Description Direction direction The direction to face. Returns Type Description System.Threading.Tasks.Task The task that should be awaited on to signal completion. Examples private async Task faceDown() { await cEgo.FaceDirectionAsync(Direction.Down); } private async Task faceDownAndDoStuffInBetween() { Task faceDirectionCompleted = cEgo.FaceDirectionAsync(Direction.Down); await cSomeOtherDude.SayAsync(\"Let me know when you finished turning around..\"); await faceDirectionCompleted;; await cEgo.SayAsync(\"All done!\"); } | Improve this Doc View Source FaceDirectionAsync(IObject) Changes the direction the character is facing to asynchronously (without blocking the game), so it will face the specified object. Declaration Task FaceDirectionAsync(IObject obj) Parameters Type Name Description IObject obj The object to face. Returns Type Description System.Threading.Tasks.Task The task that should be awaited on to signal completion. Examples private async Task lookAtMirror() { await cEgo.FaceDirectionAsync(oMirror); } private async Task lookAtMirrorAndDoStuffInBetween() { Task faceMirrorCompleted = cEgo.FaceDirectionAsync(oMirror); await cSomeOtherDude.SayAsync(\"Let me know when you see the mirror.\"); await faceMirrorCompleted; await cEgo.SayAsync(\"Yes, I see it now!\"); } | Improve this Doc View Source FaceDirectionAsync(Single, Single) Changes the direction the character is facing to asynchronously (without blocking the game), so it will face (x,y). Declaration Task FaceDirectionAsync(float x, float y) Parameters Type Name Description System.Single x The x position. System.Single y The y position. Returns Type Description System.Threading.Tasks.Task The task that should be awaited on to signal completion. Examples private async Task face100100() { await cEgo.FaceDirectionAsync(100f,100f); } | Improve this Doc View Source FaceDirectionAsync(Single, Single, Single, Single) Changes the direction the character is facing to asynchronously (without blocking the game), so it will face (toX,toY), assuming it is currently facing (fromX,fromY). Declaration Task FaceDirectionAsync(float fromX, float fromY, float toX, float toY) Parameters Type Name Description System.Single fromX From x. System.Single fromY From y. System.Single toX To x. System.Single toY To y. Returns Type Description System.Threading.Tasks.Task Examples private async Task armyLookOneByOne() { await cGeneral.SayAsync(\"Everybody, look at the way I'm looking.\"); await cGeneral.FaceDirectionAsync(150f, 150f); foreach (var soldier in soldiers) { await soldier.FaceDirectionAsync(cGeneral.X, cGeneral.Y, 150f, 150f); //Awaiting each soldier before going over to the next, meaning the will change directions one by one. } await cGeneral.SayAsync(\"Took you long enough!\"); } private async Task armyLookAtTheSameTime() { await cGeneral.SayAsync(\"Everybody, look at the way I'm looking.\"); await cGeneral.FaceDirectionAsync(150f, 150f); List{Task} tasks = new List{Task}(soldiers.Count); foreach (var soldier in soldiers) { tasks.Add(soldier.FaceDirectionAsync(cGeneral.X, cGeneral.Y, 150f, 150f)); } await Task.WhenAll(tasks); await cGeneral.SayAsync(\"Took you long enough!\"); } private async Task armyLookAtRandomTimes() { await cGeneral.SayAsync(\"Everybody, look at the way I'm looking.\"); await cGeneral.FaceDirectionAsync(150f, 150f); List{Task} tasks = new List{Task}(soldiers.Count); foreach (var soldier in soldiers) { tasks.Add(Task.Delay(MathUtils.Random().Next(10,50)).ContinueWith(soldier.FaceDirectionAsync(cGeneral.X, cGeneral.Y, 150f, 150f))); } await Task.WhenAll(tasks); await cGeneral.SayAsync(\"Took you long enough!\"); } See Also IComponent"
  },
  "api/AGS.API.IEvent.html": {
    "href": "api/AGS.API.IEvent.html",
    "title": "Interface IEvent | MonoAGS Documentation",
    "keywords": "Interface IEvent Represents an event which can be subscribed both synchronously or asynchorously, and is invoked asynchronously. An event is a notification for something that has happened. Interested parties can subscribe to the event and be notified when it triggers ( https://en.wikipedia.org/wiki/Event-driven_programming ). Inherited Members System.IDisposable.Dispose() Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IEvent : IDisposable Properties | Improve this Doc View Source SubscribersCount Gets the number of subscribers to the event. Declaration int SubscribersCount { get; } Property Value Type Description System.Int32 The subscribers count. Methods | Improve this Doc View Source InvokeAsync() Invoke the event asynchronously. Declaration Task InvokeAsync() Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source Subscribe(Action, CallbackPriority) Subscribe the specified callback to the event. Once subscribed, whenever the event happens this callback will be called. Declaration void Subscribe(Action callback, CallbackPriority priority = CallbackPriority.Normal) Parameters Type Name Description System.Action callback Callback. CallbackPriority priority The callback priority (determines the order in which the subscribers get the events). | Improve this Doc View Source SubscribeToAsync(Func<Task>, CallbackPriority) Subscribe the specified asynchronous callback to the event. Once subscribed, whenever the event happens this callback will be called. Declaration void SubscribeToAsync(Func<Task> callback, CallbackPriority priority = CallbackPriority.Normal) Parameters Type Name Description System.Func < System.Threading.Tasks.Task > callback Callback. CallbackPriority priority The callback priority (determines the order in which the subscribers get the events). | Improve this Doc View Source Unsubscribe(Action, CallbackPriority) Unsubscribe the specified callback from the event. This will stops notifications to call this callback. Declaration void Unsubscribe(Action callback, CallbackPriority priority = CallbackPriority.Normal) Parameters Type Name Description System.Action callback Callback. CallbackPriority priority The callback priority (determines the order in which the subscribers get the events). | Improve this Doc View Source UnsubscribeToAsync(Func<Task>, CallbackPriority) Unsubscribe the specified asynchronous callback from the event. This will stops notifications to call this callback. Declaration void UnsubscribeToAsync(Func<Task> callback, CallbackPriority priority = CallbackPriority.Normal) Parameters Type Name Description System.Func < System.Threading.Tasks.Task > callback Callback. CallbackPriority priority The callback priority (determines the order in which the subscribers get the events). | Improve this Doc View Source WaitUntilAsync(Func<Boolean>, CallbackPriority) Asynchronously wait until the event fires and the specific condition applies. Declaration Task WaitUntilAsync(Func<bool> condition, CallbackPriority priority = CallbackPriority.Normal) Parameters Type Name Description System.Func < System.Boolean > condition The condition we are waiting to apply before moving on. CallbackPriority priority The callback priority (determines the order in which the subscribers get the events). Returns Type Description System.Threading.Tasks.Task The task to be awaited."
  },
  "api/AGS.API.IEvent-1.html": {
    "href": "api/AGS.API.IEvent-1.html",
    "title": "Interface IEvent<TEventArgs> | MonoAGS Documentation",
    "keywords": "Interface IEvent<TEventArgs> Represents an event which can be subscribed both synchronously or asynchorously, and is invoked asynchronously. An event is a notification for something that has happened. Interested parties can subscribe to the event and be notified when it triggers ( https://en.wikipedia.org/wiki/Event-driven_programming ). Inherited Members System.IDisposable.Dispose() Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IEvent<TEventArgs> : IDisposable Type Parameters Name Description TEventArgs Properties | Improve this Doc View Source SubscribersCount Gets the number of subscribers to the event. Declaration int SubscribersCount { get; } Property Value Type Description System.Int32 The subscribers count. Methods | Improve this Doc View Source InvokeAsync(TEventArgs) Invoke the event asynchronously. Declaration Task InvokeAsync(TEventArgs args) Parameters Type Name Description TEventArgs args Event arguments which can be used to provide additional data. Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source Subscribe(Action, CallbackPriority) Subscribe the specified callback to the event. Once subscribed, whenever the event happens this callback will be called. This version of Subscribe ignores incoming arguments from the event (if you need the arguments, use the other overload which gets an action of TEventArgs). Declaration void Subscribe(Action callback, CallbackPriority priority = CallbackPriority.Normal) Parameters Type Name Description System.Action callback Callback. CallbackPriority priority The callback priority (determines the order in which the subscribers get the events). | Improve this Doc View Source Subscribe(Action<TEventArgs>, CallbackPriority) Subscribe the specified callback to the event. Once subscribed, whenever the event happens this callback will be called. Declaration void Subscribe(Action<TEventArgs> callback, CallbackPriority priority = CallbackPriority.Normal) Parameters Type Name Description System.Action <TEventArgs> callback Callback. CallbackPriority priority The callback priority (determines the order in which the subscribers get the events). | Improve this Doc View Source SubscribeToAsync(Func<TEventArgs, Task>, CallbackPriority) Subscribe the specified asynchronous callback to the event. Once subscribed, whenever the event happens this callback will be called. Declaration void SubscribeToAsync(Func<TEventArgs, Task> callback, CallbackPriority priority = CallbackPriority.Normal) Parameters Type Name Description System.Func <TEventArgs, System.Threading.Tasks.Task > callback Callback. CallbackPriority priority The callback priority (determines the order in which the subscribers get the events). | Improve this Doc View Source SubscribeToAsync(Func<Task>, CallbackPriority) Subscribe the specified asynchronous callback to the event. Once subscribed, whenever the event happens this callback will be called. This version of Subscribe ignores incoming arguments from the event (if you need the arguments, use the other overload which gets a func of TEventArgs -> Task). Declaration void SubscribeToAsync(Func<Task> callback, CallbackPriority priority = CallbackPriority.Normal) Parameters Type Name Description System.Func < System.Threading.Tasks.Task > callback Callback. CallbackPriority priority The callback priority (determines the order in which the subscribers get the events). | Improve this Doc View Source Unsubscribe(Action, CallbackPriority) Unsubscribe the specified callback from the event. This will stops notifications to call this callback. Declaration void Unsubscribe(Action callback, CallbackPriority priority = CallbackPriority.Normal) Parameters Type Name Description System.Action callback Callback. CallbackPriority priority The callback priority (determines the order in which the subscribers get the events). | Improve this Doc View Source Unsubscribe(Action<TEventArgs>, CallbackPriority) Unsubscribe the specified callback from the event. This will stops notifications to call this callback. Declaration void Unsubscribe(Action<TEventArgs> callback, CallbackPriority priority = CallbackPriority.Normal) Parameters Type Name Description System.Action <TEventArgs> callback Callback. CallbackPriority priority The callback priority (determines the order in which the subscribers get the events). | Improve this Doc View Source UnsubscribeToAsync(Func<TEventArgs, Task>, CallbackPriority) Unsubscribe the specified asynchronous callback from the event. This will stops notifications to call this callback. Declaration void UnsubscribeToAsync(Func<TEventArgs, Task> callback, CallbackPriority priority = CallbackPriority.Normal) Parameters Type Name Description System.Func <TEventArgs, System.Threading.Tasks.Task > callback Callback. CallbackPriority priority The callback priority (determines the order in which the subscribers get the events). | Improve this Doc View Source UnsubscribeToAsync(Func<Task>, CallbackPriority) Unsubscribe the specified asynchronous callback from the event. This will stops notifications to call this callback. Declaration void UnsubscribeToAsync(Func<Task> callback, CallbackPriority priority = CallbackPriority.Normal) Parameters Type Name Description System.Func < System.Threading.Tasks.Task > callback Callback. CallbackPriority priority The callback priority (determines the order in which the subscribers get the events). | Improve this Doc View Source WaitUntilAsync(Predicate<TEventArgs>, CallbackPriority) Asynchronously wait until the event fires and the specific condition applies. Declaration Task WaitUntilAsync(Predicate<TEventArgs> condition, CallbackPriority priority = CallbackPriority.Normal) Parameters Type Name Description System.Predicate <TEventArgs> condition The condition we are waiting to apply before moving on. CallbackPriority priority The callback priority (determines the order in which the subscribers get the events). Returns Type Description System.Threading.Tasks.Task The task to be awaited."
  },
  "api/AGS.API.IEntity.html": {
    "href": "api/AGS.API.IEntity.html",
    "title": "Interface IEntity | MonoAGS Documentation",
    "keywords": "Interface IEntity An entity is the most basic unit for composition. On itself it doesn't do anything except be a collection of components. Each added component adds more abilities to the entity. For example, adding a \"talk\" component to the entity, will give the entity the ability to talk. Inherited Members IComponentsCollection.AddComponent<TComponent>() IComponentsCollection.AddComponent(Type) IComponentsCollection.AddComponent<TComponent>(IComponent) IComponentsCollection.RemoveComponent<TComponent>() IComponentsCollection.RemoveComponent(Type) IComponentsCollection.RemoveComponent(IComponent) IComponentsCollection.PopComponent<TComponent>() IComponentsCollection.HasComponent<TComponent>() IComponentsCollection.HasComponent(Type) IComponentsCollection.HasComponent(IComponent) IComponentsCollection.GetComponent<TComponent>() IComponentsCollection.GetComponent(Type) IComponentsCollection.Bind<TComponent>(Action<TComponent>, Action<TComponent>) IComponentsCollection.Count IComponentsCollection.ComponentsInitialized IComponentsCollection.OnComponentsInitialized IComponentsCollection.OnComponentsChanged IComponentsCollection.OnDisposed(Action) System.Collections.Generic.IEnumerable<AGS.API.IComponent>.GetEnumerator() System.IDisposable.Dispose() Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IEntity : IComponentsCollection, IEnumerable<IComponent>, IEnumerable, IDisposable Properties | Improve this Doc View Source DisplayName A human-readable name. This string could be used to display entity's name to players. Declaration string DisplayName { get; set; } Property Value Type Description System.String The name. | Improve this Doc View Source ID A unique identifier for the entity. This id is used by the engine to distinguish between different entities, so the id must be unique. Declaration string ID { get; } Property Value Type Description System.String The identifier. Methods | Improve this Doc View Source GetFriendlyName() Returns a human-readable name of an entity, either taken from DisplayName or composed from other properties. Declaration string GetFriendlyName() Returns Type Description System.String The name."
  },
  "api/AGS.API.IEnabledComponent.html": {
    "href": "api/AGS.API.IEnabledComponent.html",
    "title": "Interface IEnabledComponent | MonoAGS Documentation",
    "keywords": "Interface IEnabledComponent Adds the ability for an entity to be disabled/enabled. Only enabled entities can be interacted with by the player. Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax [RequiredComponent(typeof(IInObjectTreeComponent), true)] public interface IEnabledComponent : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source ClickThrough Gets or sets a value indicating whether this entity is click-through, meaning it can't be clicked. The difference between setting an entity to be click-through and between disabling it (by setting its Enabled property to be false), is that unlike disabling, the children of the entity will not be affected. Declaration bool ClickThrough { get; set; } Property Value Type Description System.Boolean true if click through; otherwise, false . | Improve this Doc View Source Enabled Gets or sets a value indicating whether this entity is enabled. Note that even if you set the entity to be enabled, it might still appear as disabled if it's part of a tree and its parent (or the parent's parent, or the parent's grandparent, and so on) is itself disabled. However the setting will be remembered (via the UnderlyingEnabled property) so if the parent will become enabled the entity will also become enabled if was set to be enabled before. Declaration bool Enabled { get; set; } Property Value Type Description System.Boolean true if enabled; otherwise, false . Examples button.TreeNode.SetParent(null); // the button has no parent button.Enabled = true; Debug.WriteLine(\"Is button enabled? {0}, button.Enabled); //This will print \"Is button enabled? True\". button.TreeNode.SetParent(panel); // the panel is now the parent of the button. panel.Enabled = false; Debug.WriteLine(\"Is button enabled? {0}, button.Enabled); //This will print \"Is button enabled? False\" because the parent is disabled. panel.Enabled = true; Debug.WriteLine(\"Is button enabled? {0}, button.Enabled); //This will print \"Is button enabled? True\" because both the parent and the button are enabled. | Improve this Doc View Source UnderlyingEnabled Gets a value indicating whether this entity underlying property is enabled. If the entity was set to be enabled but its parent is disabled, the entity will read as disabled. The \"UnderlyingEnabled\" property however, will remember that the entity was set to be enabled, so in case the parent will be enabled, the entity will remember that it is now enabled as well. Declaration bool UnderlyingEnabled { get; } Property Value Type Description System.Boolean true if underlying enabled; otherwise, false . See Also Enabled"
  },
  "api/AGS.API.IEdges.html": {
    "href": "api/AGS.API.IEdges.html",
    "title": "Interface IEdges | MonoAGS Documentation",
    "keywords": "Interface IEdges Room edges are a convenient way for scripting a room change once a player walks beyond an edge. You can set the 'X' for the left and right edge, and the 'Y' for the top and bottom edge and subscribe to events when the player crosses the edge to change the room. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IEdges Properties | Improve this Doc View Source Bottom Gets the bottom edge. Declaration IEdge Bottom { get; } Property Value Type Description IEdge The bottom. | Improve this Doc View Source Left Gets the left edge. Declaration IEdge Left { get; } Property Value Type Description IEdge The left. | Improve this Doc View Source Right Gets the right edge. Declaration IEdge Right { get; } Property Value Type Description IEdge The right. | Improve this Doc View Source Top Gets the top edge. Declaration IEdge Top { get; } Property Value Type Description IEdge The top."
  },
  "api/AGS.API.IDialogLayout.html": {
    "href": "api/AGS.API.IDialogLayout.html",
    "title": "Interface IDialogLayout | MonoAGS Documentation",
    "keywords": "Interface IDialogLayout Allows customizing how the dialog options will be layed out on the screen. The default will show them at the bottom of the screen. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IDialogLayout Methods | Improve this Doc View Source LayoutAsync(IObject, IList<IDialogOption>) Asynchronously lays out the dialog options on the screen.. Declaration Task LayoutAsync(IObject dialogGraphics, IList<IDialogOption> options) Parameters Type Name Description IObject dialogGraphics The dialog background graphics. System.Collections.Generic.IList < IDialogOption > options The list of dialog options to show. Returns Type Description System.Threading.Tasks.Task The task to await."
  },
  "api/AGS.API.IDialogFactory.html": {
    "href": "api/AGS.API.IDialogFactory.html",
    "title": "Interface IDialogFactory | MonoAGS Documentation",
    "keywords": "Interface IDialogFactory A factory to create dialogs and dialog options. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IDialogFactory Methods | Improve this Doc View Source GetDialog(String, Single, Single, IObject, Boolean, IDialogOption[]) Creates a new dialog. Declaration IDialog GetDialog(string id, float x = 0F, float y = 0F, IObject graphics = null, bool showWhileOptionsAreRunning = false, params IDialogOption[] options) Parameters Type Name Description System.String id A unique id for the dialog. System.Single x The x coordinate of the dialog left side. System.Single y The y coordinate of the dialog bottom side. IObject graphics The background graphic object of the dialog. System.Boolean showWhileOptionsAreRunning Should the dialog be displayed while the characters are speaking? IDialogOption [] options The list of dialog options to display. Returns Type Description IDialog The new dialog. | Improve this Doc View Source GetDialogOption(String, ITextConfig, ITextConfig, ITextConfig, Boolean, Boolean) Creates a dialog option. Declaration IDialogOption GetDialogOption(string text, ITextConfig config = null, ITextConfig hoverConfig = null, ITextConfig hasBeenChosenConfig = null, bool speakOption = true, bool showOnce = false) Parameters Type Name Description System.String text The text that appears in the dialog option. ITextConfig config Configuration for how to render the text. ITextConfig hoverConfig Configuration for how to render the text when the mouse is hovering it. ITextConfig hasBeenChosenConfig Configuration for how to render the text when it was already previously selected. If showOnce is true, the option will be hidden and this configuration is irrelevant. System.Boolean speakOption Should the character say the option after the user selects it? System.Boolean showOnce Should the engine hide the option after selecting it once? Returns Type Description IDialogOption The new dialog option."
  },
  "api/AGS.API.IDialogActions.html": {
    "href": "api/AGS.API.IDialogActions.html",
    "title": "Interface IDialogActions | MonoAGS Documentation",
    "keywords": "Interface IDialogActions Represents a sequence of actions that can be performed after a dialog choice. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IDialogActions Properties | Improve this Doc View Source Actions Gets the actions. Declaration IList<IDialogAction> Actions { get; } Property Value Type Description System.Collections.Generic.IList < IDialogAction > The actions. Methods | Improve this Doc View Source AddActions(IDialogAction[]) Adds a list of dialog actions. Declaration void AddActions(params IDialogAction[] actions) Parameters Type Name Description IDialogAction [] actions Actions. | Improve this Doc View Source AddActions(Action[]) Adds a list of actions Declaration void AddActions(params Action[] actions) Parameters Type Name Description System.Action [] actions Actions. | Improve this Doc View Source AddAsyncActions(Func<Task>[]) Adds a list of asynchronous actions. Declaration void AddAsyncActions(params Func<Task>[] actions) Parameters Type Name Description System.Func < System.Threading.Tasks.Task >[] actions Actions. | Improve this Doc View Source AddAsyncConditionalActions(Func<Task<Boolean>>[]) Adds a list of asynchronous actions that may cancel the sequence. Declaration void AddAsyncConditionalActions(params Func<Task<bool>>[] actions) Parameters Type Name Description System.Func < System.Threading.Tasks.Task < System.Boolean >>[] actions Actions. | Improve this Doc View Source AddConditionalActions(Func<Boolean>[]) Adds a list of actions that may cancel the sequence. Declaration void AddConditionalActions(params Func<bool>[] actions) Parameters Type Name Description System.Func < System.Boolean >[] actions Actions. | Improve this Doc View Source AddPlayerText(String[]) Adds an action for saying text by the player. Declaration void AddPlayerText(params string[] sentences) Parameters Type Name Description System.String [] sentences The list of sentences that the player will say one by one. | Improve this Doc View Source AddText(ICharacter, String[]) Adds an action for saying text by a character. Declaration void AddText(ICharacter character, params string[] sentences) Parameters Type Name Description ICharacter character The speaking character. System.String [] sentences The list of sentences that the character will say one by one. | Improve this Doc View Source RunAsync() Runs the actions list asynchronously, one by one. Declaration Task<bool> RunAsync() Returns Type Description System.Threading.Tasks.Task < System.Boolean > True if all the actions were executed, false if the sequence was cancelled."
  },
  "api/AGS.API.IDialogAction.html": {
    "href": "api/AGS.API.IDialogAction.html",
    "title": "Interface IDialogAction | MonoAGS Documentation",
    "keywords": "Interface IDialogAction A dialog action. This is usually text spoken by one of the characters, but it can be any action, which will run in the sequence. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IDialogAction Properties | Improve this Doc View Source Enabled Gets or sets a value indicating whether this IDialogAction is enabled. If it's disabled it will be skipped. Declaration bool Enabled { get; set; } Property Value Type Description System.Boolean true if enabled; otherwise, false . Methods | Improve this Doc View Source RunActionAsync() Runs the dialog action asynchronously. Declaration Task<bool> RunActionAsync() Returns Type Description System.Threading.Tasks.Task < System.Boolean > True if should continue to the next action, false if should cancel the sequence of actions."
  },
  "api/AGS.API.IDialog.html": {
    "href": "api/AGS.API.IDialog.html",
    "title": "Interface IDialog | MonoAGS Documentation",
    "keywords": "Interface IDialog Represents a dialog (an on-going conversation) between two (or more) characters. The dialog is structured as a sequence of actions (usually the characters talking), followed by a list of choices for the player, where each choice branches to another sequence of actions, followed by another list of choices, and so on. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IDialog Properties | Improve this Doc View Source Graphics The background graphics for the dialog. Declaration IObject Graphics { get; } Property Value Type Description IObject The graphics. | Improve this Doc View Source Options Gets the list of options for the user to choose from. Declaration IList<IDialogOption> Options { get; } Property Value Type Description System.Collections.Generic.IList < IDialogOption > The options. | Improve this Doc View Source ShowWhileOptionsAreRunning Gets a value indicating whether this IDialog should show while the actions triggered by the selected option are running. Declaration bool ShowWhileOptionsAreRunning { get; } Property Value Type Description System.Boolean true if show while options are running; otherwise, false . | Improve this Doc View Source StartupActions Gets the startup actions (will be performed before the dialog options are shown to the user). Declaration IDialogActions StartupActions { get; } Property Value Type Description IDialogActions The startup actions. Methods | Improve this Doc View Source AddOptions(IDialogOption[]) Adds the specified options to the user's list of choices. Declaration void AddOptions(params IDialogOption[] options) Parameters Type Name Description IDialogOption [] options Options. | Improve this Doc View Source RunAsync() Run the dialog asynchronously. This will run the StartupActions , followed by showing the Options Declaration Task RunAsync() Returns Type Description System.Threading.Tasks.Task"
  },
  "api/AGS.API.IDepthClipping.html": {
    "href": "api/AGS.API.IDepthClipping.html",
    "title": "Interface IDepthClipping | MonoAGS Documentation",
    "keywords": "Interface IDepthClipping Depth clipping allows clipping objects (i.e hiding objects) if they're either too close or too far from the camera. A near clipping plane is for clipping objects which are too close to the camera, and a far clipping plane is for clipping objects which are too far from the camera. Inherited Members System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IDepthClipping : INotifyPropertyChanged Properties | Improve this Doc View Source FarClippingPlane Gets or sets the far clipping plane (objects behind of the plane will be hidden from the camera). The default is null, meaning no far clipping is taking place. Declaration IClippingPlane FarClippingPlane { get; set; } Property Value Type Description IClippingPlane The near clipping plane. | Improve this Doc View Source NearClippingPlane Gets or sets the near clipping plane (objects in front of the plane will be hidden from the camera). The default is null, meaning no near clipping is taking place. Declaration IClippingPlane NearClippingPlane { get; set; } Property Value Type Description IClippingPlane The near clipping plane. Methods | Improve this Doc View Source IsObjectClipped(IObject) Checkes whether an object is clipped (i.e should be hidden) by one of the clipping planes. Declaration bool IsObjectClipped(IObject obj) Parameters Type Name Description IObject obj Object. Returns Type Description System.Boolean true , if object should be clipped, false otherwise."
  },
  "api/AGS.API.IArea.html": {
    "href": "api/AGS.API.IArea.html",
    "title": "Interface IArea | MonoAGS Documentation",
    "keywords": "Interface IArea Areas are specific regions in a room that provide additional behaviors that apply only within that region. Inherited Members IEntity.ID IEntity.DisplayName IEntity.GetFriendlyName() IComponentsCollection.AddComponent<TComponent>() IComponentsCollection.AddComponent(Type) IComponentsCollection.AddComponent<TComponent>(IComponent) IComponentsCollection.RemoveComponent<TComponent>() IComponentsCollection.RemoveComponent(Type) IComponentsCollection.RemoveComponent(IComponent) IComponentsCollection.PopComponent<TComponent>() IComponentsCollection.HasComponent<TComponent>() IComponentsCollection.HasComponent(Type) IComponentsCollection.HasComponent(IComponent) IComponentsCollection.GetComponent<TComponent>() IComponentsCollection.GetComponent(Type) IComponentsCollection.Bind<TComponent>(Action<TComponent>, Action<TComponent>) IComponentsCollection.Count IComponentsCollection.ComponentsInitialized IComponentsCollection.OnComponentsInitialized IComponentsCollection.OnComponentsChanged IComponentsCollection.OnDisposed(Action) System.Collections.Generic.IEnumerable<AGS.API.IComponent>.GetEnumerator() IAreaComponent.Mask IAreaComponent.Enabled IAreaComponent.IsInArea(PointF) IAreaComponent.IsInArea(PointF, AGSBoundingBox, Single, Single) IAreaComponent.FindClosestPoint(PointF, Single) IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IArea : IEntity, IComponentsCollection, IEnumerable<IComponent>, IEnumerable, IAreaComponent, IComponent, IDisposable, INotifyPropertyChanged See Also IWalkableArea IWalkBehindArea IScalingArea IZoomArea IAreaRestriction"
  },
  "api/AGS.API.IApproachStyle.html": {
    "href": "api/AGS.API.IApproachStyle.html",
    "title": "Interface IApproachStyle | MonoAGS Documentation",
    "keywords": "Interface IApproachStyle How to approach hotspots? Can be configured per verb. Inherited Members System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IApproachStyle : INotifyPropertyChanged Properties | Improve this Doc View Source ApplyApproachStyleOnDefaults Gets or sets a value indicating whether this IApproachStyle should applied on default interactions as well (i.e hotspot and verb combos which don't have a specific interaction defined). If this is set to false, NeverWalk will be used for default interactions. Declaration bool ApplyApproachStyleOnDefaults { get; set; } Property Value Type Description System.Boolean true if apply approach style on defaults; otherwise, false . | Improve this Doc View Source ApproachWhenVerb Allows to set how the character will approach hotspots, whereas each interaction verb (look, interact, etc) can have different settings. The default is: FaceOnly when looking, WalkIfHaveWalkPoint when interacting, NeverWalk for all other verbs. Declaration IDictionary<string, ApproachHotspots> ApproachWhenVerb { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , ApproachHotspots > The approach when verb. Methods | Improve this Doc View Source CopyFrom(IApproachStyle) Copies the style from another IApproachStyle . Declaration void CopyFrom(IApproachStyle style) Parameters Type Name Description IApproachStyle style Style."
  },
  "api/AGS.API.IAnimationFrame.html": {
    "href": "api/AGS.API.IAnimationFrame.html",
    "title": "Interface IAnimationFrame | MonoAGS Documentation",
    "keywords": "Interface IAnimationFrame An animation frame (an animation is composed from a list of frames, which change all the time to make the object looks like it's animated). Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IAnimationFrame Properties | Improve this Doc View Source Delay An animation frame has 2 modes of delays (how much time to wait before moving on to the next frame). It's either a specific delay or a random delay with an allowed range. A random delay with an allowed range is useful for simulating talking, for example, when the mouth is moving in random speeds, giving the illusion of actual talking, instead of repeating animation that breaks the illusion fast. Anyways, the delay is added on top of the animation's overall delay (see cref=\"IAnimationConfiguration\"/>) and measure in game ticks. So let's say we have an overall animation speed configured to be 5 (the default), and we have this frame delay configured to be also 5 (the default is 0) and the game is running with 60 FPS (frames per second- also the default), then the total delay for this frame will be 10 ticks, so it will run for 1/6 of a second. When setting the delay here, this means you want a deterministic delay (not randomly generated each time), and then you can also query the delay here. If you set the MinDelay and MaxDelay of a frame it means you want a random delay for the frame, so querying the delay here will give you a random value which will not be the actual current delay of the frame. Declaration int Delay { get; set; } Property Value Type Description System.Int32 The delay. | Improve this Doc View Source MaxDelay Gets or sets the maximum delay for generating random frame delays. Both MinDelay and MaxDelay should be set for a random frame delay. If MinDelay is 5 and MaxDelay is 10, then each time this frame runs it will delay an extra 5-10 ticks before switching to the next frame. Delay MinDelay Declaration int MaxDelay { get; set; } Property Value Type Description System.Int32 The maximum delay. | Improve this Doc View Source MinDelay Gets or sets the minimum delay for generating random frame delays. Both MinDelay and MaxDelay should be set for a random frame delay. If MinDelay is 5 and MaxDelay is 10, then each time this frame runs it will delay an extra 5-10 ticks before switching to the next frame. Delay MaxDelay Declaration int MinDelay { get; set; } Property Value Type Description System.Int32 The minimum delay. | Improve this Doc View Source SoundEmitter Gets or sets the sound emitter from this frame. If a sound emitter is attached to this frame and also has an attached audio clip, the audio clip will play when the frame is showing. You don't have to call this yourself, the sound emitter itself has convenience methods for assigning itself to several animations at once. Declaration ISoundEmitter SoundEmitter { get; set; } Property Value Type Description ISoundEmitter The sound emitter. | Improve this Doc View Source Sprite Gets or sets the sprite that is shown for this frame. Declaration ISprite Sprite { get; set; } Property Value Type Description ISprite The sprite. Methods | Improve this Doc View Source Clone() Clones the animation frame (performs a deep clone, so the new frame will be completely detached from the old frame). Declaration IAnimationFrame Clone() Returns Type Description IAnimationFrame The new cloned frame."
  },
  "api/AGS.API.IAnimationConfiguration.html": {
    "href": "api/AGS.API.IAnimationConfiguration.html",
    "title": "Interface IAnimationConfiguration | MonoAGS Documentation",
    "keywords": "Interface IAnimationConfiguration Allows to configure various aspects of the animation. Inherited Members System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IAnimationConfiguration : INotifyPropertyChanged Properties | Improve this Doc View Source DelayBetweenFrames Gets or sets the delay between each frame. The delay is measured in frames, so if we're running at the expected 60 FPS, a delay of 5 (the default) means each second 12 frames of animation will be shown. Note that each frame can be configured with an additional delay. That delay will be added for this overall delay for that specific frame, so a frame's delay is relative, while this delay can be used as an overall speed for the entire animation. Declaration int DelayBetweenFrames { get; set; } Property Value Type Description System.Int32 The delay between frames. | Improve this Doc View Source Looping Allows to configure how the animation cycles (does it run forwards, backwards, does it zig zag?) Declaration LoopingStyle Looping { get; set; } Property Value Type Description LoopingStyle The looping. | Improve this Doc View Source Loops Allows to configure the number of loops the animation will run before completing. 0 for an endless animation. Declaration int Loops { get; set; } Property Value Type Description System.Int32 The number of loops."
  },
  "api/AGS.API.HasFactoryAttribute.html": {
    "href": "api/AGS.API.HasFactoryAttribute.html",
    "title": "Class HasFactoryAttribute | MonoAGS Documentation",
    "keywords": "Class HasFactoryAttribute This attribute can be associated to an interface, to allow specifying factory methods that can be used to create a possible implementation. This is used by the inspector when selecting an implementation for an interface. For example, when selecting a border via IBorderStyle , it can refer you to various methods in IBorderFactory . Inheritance System.Object System.Attribute HasFactoryAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AGS.API Assembly : AGS.API.dll Syntax [AttributeUsage(AttributeTargets.Interface, AllowMultiple = true)] public class HasFactoryAttribute : Attribute Properties | Improve this Doc View Source DisplayName Gets or sets the display name. Declaration public string DisplayName { get; set; } Property Value Type Description System.String The display name. | Improve this Doc View Source FactoryType Gets or sets the type of the factory. Declaration public string FactoryType { get; set; } Property Value Type Description System.String The type of the factory. | Improve this Doc View Source MethodName Gets or sets the name of the method in the factory object. Declaration public string MethodName { get; set; } Property Value Type Description System.String The name of the method."
  },
  "api/AGS.API.GraphicsBackend.html": {
    "href": "api/AGS.API.GraphicsBackend.html",
    "title": "Enum GraphicsBackend | MonoAGS Documentation",
    "keywords": "Enum GraphicsBackend The graphics backend used to render the game. Namespace : AGS.API Assembly : AGS.API.dll Syntax public enum GraphicsBackend : byte Fields Name Description Direct3D11 Direct3D 11. Metal Metal. OpenGL OpenGL. OpenGLES OpenGL ES. Vulkan Vulkan."
  },
  "api/AGS.API.DisplayListEventArgs.html": {
    "href": "api/AGS.API.DisplayListEventArgs.html",
    "title": "Class DisplayListEventArgs | MonoAGS Documentation",
    "keywords": "Class DisplayListEventArgs Event arguments for retrieiving (and possibly modifying) the display list before rendering it. Inheritance System.Object DisplayListEventArgs Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AGS.API Assembly : AGS.API.dll Syntax public class DisplayListEventArgs Constructors | Improve this Doc View Source DisplayListEventArgs(List<IObject>) Initializes a new instance of the DisplayListEventArgs class. Declaration public DisplayListEventArgs(List<IObject> displayList) Parameters Type Name Description System.Collections.Generic.List < IObject > displayList Display list. Properties | Improve this Doc View Source DisplayList Gets or sets the display list. Declaration public List<IObject> DisplayList { get; set; } Property Value Type Description System.Collections.Generic.List < IObject > The display list."
  },
  "api/AGS.API.Direction.html": {
    "href": "api/AGS.API.Direction.html",
    "title": "Enum Direction | MonoAGS Documentation",
    "keywords": "Enum Direction A general direction to which a character can face. Namespace : AGS.API Assembly : AGS.API.dll Syntax public enum Direction Fields Name Description Down DownLeft DownRight Left Right Up UpLeft UpRight"
  },
  "api/AGS.API.CustomStringValueAttribute.html": {
    "href": "api/AGS.API.CustomStringValueAttribute.html",
    "title": "Class CustomStringValueAttribute | MonoAGS Documentation",
    "keywords": "Class CustomStringValueAttribute An attribute to be placed on a method that will be used instead of ToString() to supply the string display value to the inspector. The method must accept no arguments and return a string. Inheritance System.Object System.Attribute CustomStringValueAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AGS.API Assembly : AGS.API.dll Syntax [AttributeUsage(AttributeTargets.Method)] public class CustomStringValueAttribute : Attribute Constructors | Improve this Doc View Source CustomStringValueAttribute(CustomStringApplyWhen) Initializes a new instance of the CustomStringValueAttribute class. Declaration public CustomStringValueAttribute(CustomStringApplyWhen applyWhen) Parameters Type Name Description CustomStringApplyWhen applyWhen Apply when. Properties | Improve this Doc View Source ApplyWhen When to display the custom string instead of ToString()? Declaration public CustomStringApplyWhen ApplyWhen { get; } Property Value Type Description CustomStringApplyWhen"
  },
  "api/AGS.API.CustomStringApplyWhen.html": {
    "href": "api/AGS.API.CustomStringApplyWhen.html",
    "title": "Enum CustomStringApplyWhen | MonoAGS Documentation",
    "keywords": "Enum CustomStringApplyWhen Indicates when to apply a custom display string instead of using ToString(). Namespace : AGS.API Assembly : AGS.API.dll Syntax public enum CustomStringApplyWhen Fields Name Description Both Custom string will always be displayed instead of ToString(). CanWrite Custom string will be displayed if the property can be written to. ToString() will still be used if the property is read-only. ReadOnly Custom string will be displayed if the property is read-only. ToString() will still be used if the property can be written to."
  },
  "api/AGS.API.ComboSuggest.html": {
    "href": "api/AGS.API.ComboSuggest.html",
    "title": "Enum ComboSuggest | MonoAGS Documentation",
    "keywords": "Enum ComboSuggest Which mode to apply when typing text in the combo box's textbox? Namespace : AGS.API Assembly : AGS.API.dll Syntax public enum ComboSuggest Fields Name Description Enforce User can type in the textbox to filter the options in the combobox, but the user does not have the ability to type text which is not part of the combobox options (best for comboboxes with a lot of options). None The textbox is disabled, combobox selection must be made with the drop-down alone (best for comboboxes with a small number of options). Suggest User gets suggestions when typing in the textbox (based on the combobox items), however those are only suggestions, and the user is free to type text which is not part of the combobox options. An example where this can be used is in a color selector, where you have a list of available colors (in the dropdown) but also the ability to type RGB values directly."
  },
  "api/AGS.API.Colors.html": {
    "href": "api/AGS.API.Colors.html",
    "title": "Class Colors | MonoAGS Documentation",
    "keywords": "Class Colors A list of colors to choose from. Inheritance System.Object Colors Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AGS.API Assembly : AGS.API.dll Syntax public static class Colors Fields | Improve this Doc View Source AliceBlue Declaration public static Color AliceBlue Field Value Type Description Color | Improve this Doc View Source AntiqueWhite Declaration public static Color AntiqueWhite Field Value Type Description Color | Improve this Doc View Source Aqua Declaration public static Color Aqua Field Value Type Description Color | Improve this Doc View Source Aquamarine Declaration public static Color Aquamarine Field Value Type Description Color | Improve this Doc View Source Azure Declaration public static Color Azure Field Value Type Description Color | Improve this Doc View Source Beige Declaration public static Color Beige Field Value Type Description Color | Improve this Doc View Source Bisque Declaration public static Color Bisque Field Value Type Description Color | Improve this Doc View Source Black Declaration public static Color Black Field Value Type Description Color | Improve this Doc View Source BlanchedAlmond Declaration public static Color BlanchedAlmond Field Value Type Description Color | Improve this Doc View Source Blue Declaration public static Color Blue Field Value Type Description Color | Improve this Doc View Source BlueViolet Declaration public static Color BlueViolet Field Value Type Description Color | Improve this Doc View Source Brown Declaration public static Color Brown Field Value Type Description Color | Improve this Doc View Source BurlyWood Declaration public static Color BurlyWood Field Value Type Description Color | Improve this Doc View Source CadetBlue Declaration public static Color CadetBlue Field Value Type Description Color | Improve this Doc View Source Chartreuse Declaration public static Color Chartreuse Field Value Type Description Color | Improve this Doc View Source Chocolate Declaration public static Color Chocolate Field Value Type Description Color | Improve this Doc View Source Coral Declaration public static Color Coral Field Value Type Description Color | Improve this Doc View Source CornflowerBlue Declaration public static Color CornflowerBlue Field Value Type Description Color | Improve this Doc View Source Cornsilk Declaration public static Color Cornsilk Field Value Type Description Color | Improve this Doc View Source Crimson Declaration public static Color Crimson Field Value Type Description Color | Improve this Doc View Source Cyan Declaration public static Color Cyan Field Value Type Description Color | Improve this Doc View Source DarkBlue Declaration public static Color DarkBlue Field Value Type Description Color | Improve this Doc View Source DarkCyan Declaration public static Color DarkCyan Field Value Type Description Color | Improve this Doc View Source DarkGoldenrod Declaration public static Color DarkGoldenrod Field Value Type Description Color | Improve this Doc View Source DarkGray Declaration public static Color DarkGray Field Value Type Description Color | Improve this Doc View Source DarkGreen Declaration public static Color DarkGreen Field Value Type Description Color | Improve this Doc View Source DarkKhaki Declaration public static Color DarkKhaki Field Value Type Description Color | Improve this Doc View Source DarkMagenta Declaration public static Color DarkMagenta Field Value Type Description Color | Improve this Doc View Source DarkOliveGreen Declaration public static Color DarkOliveGreen Field Value Type Description Color | Improve this Doc View Source DarkOrange Declaration public static Color DarkOrange Field Value Type Description Color | Improve this Doc View Source DarkOrchid Declaration public static Color DarkOrchid Field Value Type Description Color | Improve this Doc View Source DarkRed Declaration public static Color DarkRed Field Value Type Description Color | Improve this Doc View Source DarkSalmon Declaration public static Color DarkSalmon Field Value Type Description Color | Improve this Doc View Source DarkSeaGreen Declaration public static Color DarkSeaGreen Field Value Type Description Color | Improve this Doc View Source DarkSlateBlue Declaration public static Color DarkSlateBlue Field Value Type Description Color | Improve this Doc View Source DarkSlateGray Declaration public static Color DarkSlateGray Field Value Type Description Color | Improve this Doc View Source DarkTurquoise Declaration public static Color DarkTurquoise Field Value Type Description Color | Improve this Doc View Source DarkViolet Declaration public static Color DarkViolet Field Value Type Description Color | Improve this Doc View Source DeepPink Declaration public static Color DeepPink Field Value Type Description Color | Improve this Doc View Source DeepSkyBlue Declaration public static Color DeepSkyBlue Field Value Type Description Color | Improve this Doc View Source DimGray Declaration public static Color DimGray Field Value Type Description Color | Improve this Doc View Source DodgerBlue Declaration public static Color DodgerBlue Field Value Type Description Color | Improve this Doc View Source Firebrick Declaration public static Color Firebrick Field Value Type Description Color | Improve this Doc View Source FloralWhite Declaration public static Color FloralWhite Field Value Type Description Color | Improve this Doc View Source ForestGreen Declaration public static Color ForestGreen Field Value Type Description Color | Improve this Doc View Source Fuchsia Declaration public static Color Fuchsia Field Value Type Description Color | Improve this Doc View Source Gainsboro Declaration public static Color Gainsboro Field Value Type Description Color | Improve this Doc View Source GhostWhite Declaration public static Color GhostWhite Field Value Type Description Color | Improve this Doc View Source Gold Declaration public static Color Gold Field Value Type Description Color | Improve this Doc View Source Goldenrod Declaration public static Color Goldenrod Field Value Type Description Color | Improve this Doc View Source Gray Declaration public static Color Gray Field Value Type Description Color | Improve this Doc View Source Green Declaration public static Color Green Field Value Type Description Color | Improve this Doc View Source GreenYellow Declaration public static Color GreenYellow Field Value Type Description Color | Improve this Doc View Source Honeydew Declaration public static Color Honeydew Field Value Type Description Color | Improve this Doc View Source HotPink Declaration public static Color HotPink Field Value Type Description Color | Improve this Doc View Source IndianRed Declaration public static Color IndianRed Field Value Type Description Color | Improve this Doc View Source Indigo Declaration public static Color Indigo Field Value Type Description Color | Improve this Doc View Source Ivory Declaration public static Color Ivory Field Value Type Description Color | Improve this Doc View Source Khaki Declaration public static Color Khaki Field Value Type Description Color | Improve this Doc View Source Lavender Declaration public static Color Lavender Field Value Type Description Color | Improve this Doc View Source LavenderBlush Declaration public static Color LavenderBlush Field Value Type Description Color | Improve this Doc View Source LawnGreen Declaration public static Color LawnGreen Field Value Type Description Color | Improve this Doc View Source LemonChiffon Declaration public static Color LemonChiffon Field Value Type Description Color | Improve this Doc View Source LightBlue Declaration public static Color LightBlue Field Value Type Description Color | Improve this Doc View Source LightCoral Declaration public static Color LightCoral Field Value Type Description Color | Improve this Doc View Source LightCyan Declaration public static Color LightCyan Field Value Type Description Color | Improve this Doc View Source LightGoldenrodYellow Declaration public static Color LightGoldenrodYellow Field Value Type Description Color | Improve this Doc View Source LightGray Declaration public static Color LightGray Field Value Type Description Color | Improve this Doc View Source LightGreen Declaration public static Color LightGreen Field Value Type Description Color | Improve this Doc View Source LightPink Declaration public static Color LightPink Field Value Type Description Color | Improve this Doc View Source LightSalmon Declaration public static Color LightSalmon Field Value Type Description Color | Improve this Doc View Source LightSeaGreen Declaration public static Color LightSeaGreen Field Value Type Description Color | Improve this Doc View Source LightSkyBlue Declaration public static Color LightSkyBlue Field Value Type Description Color | Improve this Doc View Source LightSlateGray Declaration public static Color LightSlateGray Field Value Type Description Color | Improve this Doc View Source LightSteelBlue Declaration public static Color LightSteelBlue Field Value Type Description Color | Improve this Doc View Source LightYellow Declaration public static Color LightYellow Field Value Type Description Color | Improve this Doc View Source Lime Declaration public static Color Lime Field Value Type Description Color | Improve this Doc View Source LimeGreen Declaration public static Color LimeGreen Field Value Type Description Color | Improve this Doc View Source Linen Declaration public static Color Linen Field Value Type Description Color | Improve this Doc View Source Magenta Declaration public static Color Magenta Field Value Type Description Color | Improve this Doc View Source Maroon Declaration public static Color Maroon Field Value Type Description Color | Improve this Doc View Source MediumAquamarine Declaration public static Color MediumAquamarine Field Value Type Description Color | Improve this Doc View Source MediumBlue Declaration public static Color MediumBlue Field Value Type Description Color | Improve this Doc View Source MediumOrchid Declaration public static Color MediumOrchid Field Value Type Description Color | Improve this Doc View Source MediumPurple Declaration public static Color MediumPurple Field Value Type Description Color | Improve this Doc View Source MediumSeaGreen Declaration public static Color MediumSeaGreen Field Value Type Description Color | Improve this Doc View Source MediumSlateBlue Declaration public static Color MediumSlateBlue Field Value Type Description Color | Improve this Doc View Source MediumSpringGreen Declaration public static Color MediumSpringGreen Field Value Type Description Color | Improve this Doc View Source MediumTurquoise Declaration public static Color MediumTurquoise Field Value Type Description Color | Improve this Doc View Source MediumVioletRed Declaration public static Color MediumVioletRed Field Value Type Description Color | Improve this Doc View Source MidnightBlue Declaration public static Color MidnightBlue Field Value Type Description Color | Improve this Doc View Source MintCream Declaration public static Color MintCream Field Value Type Description Color | Improve this Doc View Source MistyRose Declaration public static Color MistyRose Field Value Type Description Color | Improve this Doc View Source Moccasin Declaration public static Color Moccasin Field Value Type Description Color | Improve this Doc View Source NavajoWhite Declaration public static Color NavajoWhite Field Value Type Description Color | Improve this Doc View Source Navy Declaration public static Color Navy Field Value Type Description Color | Improve this Doc View Source OldLace Declaration public static Color OldLace Field Value Type Description Color | Improve this Doc View Source Olive Declaration public static Color Olive Field Value Type Description Color | Improve this Doc View Source OliveDrab Declaration public static Color OliveDrab Field Value Type Description Color | Improve this Doc View Source Orange Declaration public static Color Orange Field Value Type Description Color | Improve this Doc View Source OrangeRed Declaration public static Color OrangeRed Field Value Type Description Color | Improve this Doc View Source Orchid Declaration public static Color Orchid Field Value Type Description Color | Improve this Doc View Source PaleGoldenrod Declaration public static Color PaleGoldenrod Field Value Type Description Color | Improve this Doc View Source PaleGreen Declaration public static Color PaleGreen Field Value Type Description Color | Improve this Doc View Source PaleTurquoise Declaration public static Color PaleTurquoise Field Value Type Description Color | Improve this Doc View Source PaleVioletRed Declaration public static Color PaleVioletRed Field Value Type Description Color | Improve this Doc View Source PapayaWhip Declaration public static Color PapayaWhip Field Value Type Description Color | Improve this Doc View Source PeachPuff Declaration public static Color PeachPuff Field Value Type Description Color | Improve this Doc View Source Peru Declaration public static Color Peru Field Value Type Description Color | Improve this Doc View Source Pink Declaration public static Color Pink Field Value Type Description Color | Improve this Doc View Source Plum Declaration public static Color Plum Field Value Type Description Color | Improve this Doc View Source PowderBlue Declaration public static Color PowderBlue Field Value Type Description Color | Improve this Doc View Source Purple Declaration public static Color Purple Field Value Type Description Color | Improve this Doc View Source Red Declaration public static Color Red Field Value Type Description Color | Improve this Doc View Source RosyBrown Declaration public static Color RosyBrown Field Value Type Description Color | Improve this Doc View Source RoyalBlue Declaration public static Color RoyalBlue Field Value Type Description Color | Improve this Doc View Source SaddleBrown Declaration public static Color SaddleBrown Field Value Type Description Color | Improve this Doc View Source Salmon Declaration public static Color Salmon Field Value Type Description Color | Improve this Doc View Source SandyBrown Declaration public static Color SandyBrown Field Value Type Description Color | Improve this Doc View Source SeaGreen Declaration public static Color SeaGreen Field Value Type Description Color | Improve this Doc View Source SeaShell Declaration public static Color SeaShell Field Value Type Description Color | Improve this Doc View Source Sienna Declaration public static Color Sienna Field Value Type Description Color | Improve this Doc View Source Silver Declaration public static Color Silver Field Value Type Description Color | Improve this Doc View Source SkyBlue Declaration public static Color SkyBlue Field Value Type Description Color | Improve this Doc View Source SlateBlue Declaration public static Color SlateBlue Field Value Type Description Color | Improve this Doc View Source SlateGray Declaration public static Color SlateGray Field Value Type Description Color | Improve this Doc View Source Snow Declaration public static Color Snow Field Value Type Description Color | Improve this Doc View Source SpringGreen Declaration public static Color SpringGreen Field Value Type Description Color | Improve this Doc View Source SteelBlue Declaration public static Color SteelBlue Field Value Type Description Color | Improve this Doc View Source Tan Declaration public static Color Tan Field Value Type Description Color | Improve this Doc View Source Teal Declaration public static Color Teal Field Value Type Description Color | Improve this Doc View Source Thistle Declaration public static Color Thistle Field Value Type Description Color | Improve this Doc View Source Tomato Declaration public static Color Tomato Field Value Type Description Color | Improve this Doc View Source Transparent Declaration public static Color Transparent Field Value Type Description Color | Improve this Doc View Source Turquoise Declaration public static Color Turquoise Field Value Type Description Color | Improve this Doc View Source Violet Declaration public static Color Violet Field Value Type Description Color | Improve this Doc View Source Wheat Declaration public static Color Wheat Field Value Type Description Color | Improve this Doc View Source White Declaration public static Color White Field Value Type Description Color | Improve this Doc View Source WhiteSmoke Declaration public static Color WhiteSmoke Field Value Type Description Color | Improve this Doc View Source Yellow Declaration public static Color Yellow Field Value Type Description Color | Improve this Doc View Source YellowGreen Declaration public static Color YellowGreen Field Value Type Description Color"
  },
  "api/AGS.API.ClaimableCallbackWithArgs-1.html": {
    "href": "api/AGS.API.ClaimableCallbackWithArgs-1.html",
    "title": "Delegate ClaimableCallbackWithArgs<TEventArgs> | MonoAGS Documentation",
    "keywords": "Delegate ClaimableCallbackWithArgs<TEventArgs> This allows you to subscribe to an event with the option of claiming the event, so that other subscribers in the list will not receive the event. For an example- ClaimableCallback . Namespace : AGS.API Assembly : AGS.API.dll Syntax public delegate void ClaimableCallbackWithArgs<TEventArgs>(TEventArgs args, ref ClaimEventToken token); Parameters Type Name Description TEventArgs args ClaimEventToken token Type Parameters Name Description TEventArgs"
  },
  "api/AGS.API.ClaimableCallback.html": {
    "href": "api/AGS.API.ClaimableCallback.html",
    "title": "Delegate ClaimableCallback | MonoAGS Documentation",
    "keywords": "Delegate ClaimableCallback This allows you to subscribe to an event with the option of claiming the event, so that other subscribers in the list will not receive the event. myEvent.Subscribe(onEvent1); myEvent.Subscribe(onEvent2); void onEvent1(ref ClaimEventToken token) { token.Claimed = true; //We claimed the event, \"onEvent2\" will not get called. } Namespace : AGS.API Assembly : AGS.API.dll Syntax public delegate void ClaimableCallback(ref ClaimEventToken token); Parameters Type Name Description ClaimEventToken token"
  },
  "api/AGS.API.ButtonAnimation.html": {
    "href": "api/AGS.API.ButtonAnimation.html",
    "title": "Class ButtonAnimation | MonoAGS Documentation",
    "keywords": "Class ButtonAnimation Allows changing properties of the button to \"animate\" it as it moves between states (idle, hover, pushed). Each ButtonAnimation represents one of this states, and can have a different animation (or image), border, background color (tint) or text rendering configuration (font, shadows, etc- ITextConfig ). Inheritance System.Object ButtonAnimation Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : AGS.API Assembly : AGS.API.dll Syntax [ConcreteImplementation(DisplayName = \"Button State Animation\")] public class ButtonAnimation Constructors | Improve this Doc View Source ButtonAnimation(IAnimation) Initializes a new instance of the ButtonAnimation class. Declaration public ButtonAnimation(IAnimation animation) Parameters Type Name Description IAnimation animation Animation. | Improve this Doc View Source ButtonAnimation(IAnimation, IBorderStyle, ITextConfig, Nullable<Color>) Declaration public ButtonAnimation(IAnimation animation, IBorderStyle border, ITextConfig textConfig, Color? tint) Parameters Type Name Description IAnimation animation IBorderStyle border ITextConfig textConfig System.Nullable < Color > tint | Improve this Doc View Source ButtonAnimation(IAnimation, IImage, IBorderStyle, ITextConfig, Nullable<Color>) Declaration public ButtonAnimation(IAnimation animation, IImage image, IBorderStyle border, ITextConfig textConfig, Color? tint) Parameters Type Name Description IAnimation animation IImage image IBorderStyle border ITextConfig textConfig System.Nullable < Color > tint | Improve this Doc View Source ButtonAnimation(IBorderStyle, ITextConfig, Nullable<Color>) Initializes a new instance of the ButtonAnimation class. Declaration public ButtonAnimation(IBorderStyle border, ITextConfig textConfig, Color? tint) Parameters Type Name Description IBorderStyle border Border. ITextConfig textConfig Text config. System.Nullable < Color > tint Tint. | Improve this Doc View Source ButtonAnimation(IImage, Nullable<Color>) Initializes a new instance of the ButtonAnimation class. Declaration public ButtonAnimation(IImage image, Color? tint = default(Color? )) Parameters Type Name Description IImage image Image. System.Nullable < Color > tint Tint. Properties | Improve this Doc View Source Animation Gets or sets the animation. Declaration public IAnimation Animation { get; } Property Value Type Description IAnimation The animation. | Improve this Doc View Source Border Gets or sets the border. Declaration public IBorderStyle Border { get; } Property Value Type Description IBorderStyle The border. | Improve this Doc View Source Image Gets or sets the image. Declaration public IImage Image { get; } Property Value Type Description IImage | Improve this Doc View Source TextConfig Gets or sets the text rendering configuration. Declaration public ITextConfig TextConfig { get; } Property Value Type Description ITextConfig The text config. | Improve this Doc View Source Tint Gets or sets the tint (background color). Declaration public Color? Tint { get; } Property Value Type Description System.Nullable < Color > The tint. Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/AGS.API.BoundingBoxType.html": {
    "href": "api/AGS.API.BoundingBoxType.html",
    "title": "Enum BoundingBoxType | MonoAGS Documentation",
    "keywords": "Enum BoundingBoxType Bounding box type. Namespace : AGS.API Assembly : AGS.API.dll Syntax public enum BoundingBoxType Fields Name Description HitTest Bounding box which is used for collision tests. This will be in the game's resolution. Render Bounding box which is used for rendering an entity. This will be in the object's resolution."
  },
  "api/AGS.API.BeforeCropEventArgs.html": {
    "href": "api/AGS.API.BeforeCropEventArgs.html",
    "title": "Struct BeforeCropEventArgs | MonoAGS Documentation",
    "keywords": "Struct BeforeCropEventArgs Event arguments for the \"before crop\" event. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : AGS.API Assembly : AGS.API.dll Syntax public struct BeforeCropEventArgs Constructors | Improve this Doc View Source BeforeCropEventArgs(AGSBoundingBox, BoundingBoxType) Initializes a new instance of the BeforeCropEventArgs struct. Declaration public BeforeCropEventArgs(AGSBoundingBox boundingBox, BoundingBoxType boundingBoxType) Parameters Type Name Description AGSBoundingBox boundingBox Bounding box. BoundingBoxType boundingBoxType Bounding box type. Properties | Improve this Doc View Source BoundingBox Gets the bounding box to be cropped. Declaration public AGSBoundingBox BoundingBox { get; } Property Value Type Description AGSBoundingBox The bounding box. | Improve this Doc View Source BoundingBoxType Gets the type of the bounding box to be cropped. Declaration public BoundingBoxType BoundingBoxType { get; } Property Value Type Description BoundingBoxType The type of the bounding box."
  },
  "api/AGS.API.ArrowDirection.html": {
    "href": "api/AGS.API.ArrowDirection.html",
    "title": "Enum ArrowDirection | MonoAGS Documentation",
    "keywords": "Enum ArrowDirection Namespace : AGS.API Assembly : AGS.API.dll Syntax public enum ArrowDirection Fields Name Description Down Left Right Up"
  },
  "api/AGS.API.AnimationCompletedEventArgs.html": {
    "href": "api/AGS.API.AnimationCompletedEventArgs.html",
    "title": "Class AnimationCompletedEventArgs | MonoAGS Documentation",
    "keywords": "Class AnimationCompletedEventArgs Event arguments for when an animation completes. Inheritance System.Object System.EventArgs AnimationCompletedEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AGS.API Assembly : AGS.API.dll Syntax public class AnimationCompletedEventArgs : EventArgs Constructors | Improve this Doc View Source AnimationCompletedEventArgs(Boolean) Initializes a new instance of the AnimationCompletedEventArgs class. Declaration public AnimationCompletedEventArgs(bool completedSuccessfully) Parameters Type Name Description System.Boolean completedSuccessfully If set to true completed successfully. Properties | Improve this Doc View Source CompletedSuccessfully Gets a value indicating whether this animation completed successfully. Declaration public bool CompletedSuccessfully { get; } Property Value Type Description System.Boolean true if completed successfully; otherwise, false ."
  },
  "api/AGS.API.SliderDirection.html": {
    "href": "api/AGS.API.SliderDirection.html",
    "title": "Enum SliderDirection | MonoAGS Documentation",
    "keywords": "Enum SliderDirection The direction in which the slider moves from minimum to maximum. Namespace : AGS.API Assembly : AGS.API.dll Syntax public enum SliderDirection Fields Name Description BottomToTop The slider is vertical and moves from bottom (minimum value) to top (maximum value). LeftToRight The slider is horizontal and moves from left (minimum value) to right (maximum value). RightToLeft The slider is horizontal and moves from right (minimum value) to left (maximum value). TopToBottom The slider is vertical moves from top (minimum value) to bottom (maximum value)."
  },
  "api/AGS.API.SkipText.html": {
    "href": "api/AGS.API.SkipText.html",
    "title": "Enum SkipText | MonoAGS Documentation",
    "keywords": "Enum SkipText How to skip the text? Namespace : AGS.API Assembly : AGS.API.dll Syntax public enum SkipText Fields Name Description ByMouse Skip the text if user clicked the left mouse button. ByTime Skip the text if enough time has passed. ByTimeAndMouse Skip the text if enough time has passed or if the user clicked the left mouse button. External The engine will never skip the text itself, but will count on the developer to implement custom skipping (by subsribing to the OnBeforeSay event and calling the \"SkipText\" action when appropriate)."
  },
  "api/AGS.API.NumberEditorSliderAttribute.html": {
    "href": "api/AGS.API.NumberEditorSliderAttribute.html",
    "title": "Class NumberEditorSliderAttribute | MonoAGS Documentation",
    "keywords": "Class NumberEditorSliderAttribute Allows controlling the \"suggested\" minimum and maximum values that will be assigned to a slider of a number editor in the inspector. Inheritance System.Object System.Attribute NumberEditorSliderAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AGS.API Assembly : AGS.API.dll Syntax [AttributeUsage(AttributeTargets.Property)] public class NumberEditorSliderAttribute : Attribute Constructors | Improve this Doc View Source NumberEditorSliderAttribute(Single, Single, Single) Initializes a new instance of the NumberEditorSliderAttribute class. Declaration public NumberEditorSliderAttribute(float sliderMin, float sliderMax, float step = 1F) Parameters Type Name Description System.Single sliderMin Slider minimum. System.Single sliderMax Slider max. System.Single step The step when using the keyboard arrows to control the value. Properties | Improve this Doc View Source SliderMax Gets the slider max. Declaration public float SliderMax { get; } Property Value Type Description System.Single The slider max. | Improve this Doc View Source SliderMin Gets the slider minimum. Declaration public float SliderMin { get; } Property Value Type Description System.Single The slider minimum. | Improve this Doc View Source Step Gets the step when using the keyboard arrows to control the value. Declaration public float Step { get; } Property Value Type Description System.Single The step."
  },
  "api/AGS.API.NodeEventArgs.html": {
    "href": "api/AGS.API.NodeEventArgs.html",
    "title": "Class NodeEventArgs | MonoAGS Documentation",
    "keywords": "Class NodeEventArgs Event arguments which contain a tree node. Inheritance System.Object NodeEventArgs Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AGS.API Assembly : AGS.API.dll Syntax public class NodeEventArgs Constructors | Improve this Doc View Source NodeEventArgs(ITreeStringNode) Initializes a new instance of the NodeEventArgs class. Declaration public NodeEventArgs(ITreeStringNode node) Parameters Type Name Description ITreeStringNode node Node. Properties | Improve this Doc View Source Node Gets the node. Declaration public ITreeStringNode Node { get; } Property Value Type Description ITreeStringNode The node."
  },
  "api/AGS.API.NamedColorsMap.html": {
    "href": "api/AGS.API.NamedColorsMap.html",
    "title": "Class NamedColorsMap | MonoAGS Documentation",
    "keywords": "Class NamedColorsMap Inheritance System.Object NamedColorsMap Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AGS.API Assembly : AGS.API.dll Syntax public static class NamedColorsMap Fields | Improve this Doc View Source NamedColors Declaration public static Dictionary<string, uint> NamedColors Field Value Type Description System.Collections.Generic.Dictionary < System.String , System.UInt32 > | Improve this Doc View Source NamedColorsReversed Declaration public static Dictionary<uint, string> NamedColorsReversed Field Value Type Description System.Collections.Generic.Dictionary < System.UInt32 , System.String >"
  },
  "api/AGS.API.MousePositionEventArgs.html": {
    "href": "api/AGS.API.MousePositionEventArgs.html",
    "title": "Class MousePositionEventArgs | MonoAGS Documentation",
    "keywords": "Class MousePositionEventArgs Event arguments for mouse move to indicate the mouse's position. Inheritance System.Object MousePositionEventArgs Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AGS.API Assembly : AGS.API.dll Syntax public class MousePositionEventArgs Constructors | Improve this Doc View Source MousePositionEventArgs(MousePosition) Declaration public MousePositionEventArgs(MousePosition position) Parameters Type Name Description MousePosition position Properties | Improve this Doc View Source MousePosition The position of the mouse on the screen. Declaration public MousePosition MousePosition { get; } Property Value Type Description MousePosition The mouse position."
  },
  "api/AGS.API.MousePosition.html": {
    "href": "api/AGS.API.MousePosition.html",
    "title": "Struct MousePosition | MonoAGS Documentation",
    "keywords": "Struct MousePosition Represents a mouse position on the screen. Allows to get the position in either window coordinates or viewport coordinates. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : AGS.API Assembly : AGS.API.dll Syntax public struct MousePosition Constructors | Improve this Doc View Source MousePosition(Single, Single, ICoordinates) Initializes a new instance of the MousePosition struct. Declaration public MousePosition(float xWindow, float yWindow, ICoordinates coordinates) Parameters Type Name Description System.Single xWindow X position of the mouse in window coordinates. System.Single yWindow Y position of the mouse in window coordinates. ICoordinates coordinates Coordinate conversion utilities. Properties | Improve this Doc View Source InWindow Gets a value indicating whether this MousePosition is inside the window. Declaration public bool InWindow { get; } Property Value Type Description System.Boolean true if in window; otherwise, false . | Improve this Doc View Source XMainViewport X position of the mouse in the main viewport coordinates (i.e the world coordinates). Declaration public float XMainViewport { get; } Property Value Type Description System.Single | Improve this Doc View Source XWindow X position of the mouse in window coordinates. Usually this will be less helpful for interacting with the world, for that you'd want to use the viewport coordinates. Declaration public float XWindow { get; } Property Value Type Description System.Single | Improve this Doc View Source YMainViewport Y position of the mouse in the main viewport coordinates (i.e the world coordinates). Declaration public float YMainViewport { get; } Property Value Type Description System.Single | Improve this Doc View Source YWindow Y position of the mouse in window coordinates. Usually this will be less helpful for interacting with the world, for that you'd want to use the viewport coordinates. Declaration public float YWindow { get; } Property Value Type Description System.Single Methods | Improve this Doc View Source GetProjectedPoint(IViewport, IObject) Get the mouse position in a specific viewport coordinates, projected onto a specific object's world. Declaration public PointF GetProjectedPoint(IViewport viewport, IObject projectedInto) Parameters Type Name Description IViewport viewport Viewport. IObject projectedInto Projected into. Returns Type Description PointF The projected point. | Improve this Doc View Source GetViewportX(IViewport) Gets the x position of the mouse in a specific viewport coordinates. Declaration public float GetViewportX(IViewport viewport) Parameters Type Name Description IViewport viewport Viewport. Returns Type Description System.Single The x position. | Improve this Doc View Source GetViewportY(IViewport) Gets the y position of the mouse in a specific viewport coordinates. Declaration public float GetViewportY(IViewport viewport) Parameters Type Name Description IViewport viewport Viewport. Returns Type Description System.Single The y position."
  },
  "api/AGS.API.MouseClickEventArgs.html": {
    "href": "api/AGS.API.MouseClickEventArgs.html",
    "title": "Class MouseClickEventArgs | MonoAGS Documentation",
    "keywords": "Class MouseClickEventArgs Mouse click/double-click event arguments. Inheritance System.Object MouseButtonEventArgs MouseClickEventArgs Inherited Members MouseButtonEventArgs.ClickedEntity MouseButtonEventArgs.Button MouseButtonEventArgs.MousePosition System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AGS.API Assembly : AGS.API.dll Syntax public class MouseClickEventArgs : MouseButtonEventArgs Constructors | Improve this Doc View Source MouseClickEventArgs(IEntity, MouseButton, MousePosition, Int64) Initializes a new instance of the MouseClickEventArgs class. Declaration public MouseClickEventArgs(IEntity clickedEntity, MouseButton button, MousePosition mousePosition, long clickTimeInMilliseconds) Parameters Type Name Description IEntity clickedEntity Clicked entity. MouseButton button Button. MousePosition mousePosition Mouse position. System.Int64 clickTimeInMilliseconds Click time in milliseconds. Properties | Improve this Doc View Source ClickTimeInMilliseconds How much time has passed between the mouse button down and up states. Declaration public long ClickTimeInMilliseconds { get; } Property Value Type Description System.Int64 The click time in milliseconds."
  },
  "api/AGS.API.MouseButtonEventArgs.html": {
    "href": "api/AGS.API.MouseButtonEventArgs.html",
    "title": "Class MouseButtonEventArgs | MonoAGS Documentation",
    "keywords": "Class MouseButtonEventArgs Mouse button down/up event arguments. Inheritance System.Object MouseButtonEventArgs MouseClickEventArgs Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AGS.API Assembly : AGS.API.dll Syntax public class MouseButtonEventArgs Constructors | Improve this Doc View Source MouseButtonEventArgs(IEntity, MouseButton, MousePosition) Initializes a new instance of the MouseButtonEventArgs class. Declaration public MouseButtonEventArgs(IEntity clickedEntity, MouseButton button, MousePosition mousePosition) Parameters Type Name Description IEntity clickedEntity The entity which was clicked on. MouseButton button Button. MousePosition mousePosition The mouse position. Properties | Improve this Doc View Source Button Which mouse button is this event relates to. Declaration public MouseButton Button { get; } Property Value Type Description MouseButton The button. | Improve this Doc View Source ClickedEntity The entity which was clicked on. Declaration public IEntity ClickedEntity { get; } Property Value Type Description IEntity The clicked entity. | Improve this Doc View Source MousePosition The position of the mouse on the screen at the time the button was clicked. Declaration public MousePosition MousePosition { get; } Property Value Type Description MousePosition The mouse position."
  },
  "api/AGS.API.MouseButton.html": {
    "href": "api/AGS.API.MouseButton.html",
    "title": "Enum MouseButton | MonoAGS Documentation",
    "keywords": "Enum MouseButton Mouse buttons. Namespace : AGS.API Assembly : AGS.API.dll Syntax public enum MouseButton Fields Name Description Left Left mouse button Middle Middle mouse button Right Right mouse button"
  },
  "api/AGS.API.ModelMatrices.html": {
    "href": "api/AGS.API.ModelMatrices.html",
    "title": "Struct ModelMatrices | MonoAGS Documentation",
    "keywords": "Struct ModelMatrices The model matrix is used for rendering and hit-testing the object. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : AGS.API Assembly : AGS.API.dll Syntax public struct ModelMatrices Fields | Improve this Doc View Source InObjResolutionMatrix The object's matrix calculated in the object's resolution (used for rendering). Declaration public Matrix4 InObjResolutionMatrix Field Value Type Description Matrix4 | Improve this Doc View Source InVirtualResolutionMatrix The object's matrix calculated in the game's resoution (used for hit-testing). Declaration public Matrix4 InVirtualResolutionMatrix Field Value Type Description Matrix4 Methods | Improve this Doc View Source Equals(ref ModelMatrices) Declaration public bool Equals(ref ModelMatrices other) Parameters Type Name Description ModelMatrices other Returns Type Description System.Boolean"
  },
  "api/AGS.API.MethodWizardAttribute.html": {
    "href": "api/AGS.API.MethodWizardAttribute.html",
    "title": "Class MethodWizardAttribute | MonoAGS Documentation",
    "keywords": "Class MethodWizardAttribute An attribute to mark methods that can act as wizards in the editor (can show a window to let the user set the parameters for the method). Inheritance System.Object System.Attribute MethodWizardAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AGS.API Assembly : AGS.API.dll Syntax [AttributeUsage(AttributeTargets.Constructor | AttributeTargets.Method)] public class MethodWizardAttribute : Attribute Properties | Improve this Doc View Source EntitiesProvider For a method returning multiple entities to be added to the scene, this should be a name of a public static method in the class which transforms the result of the method to a list of entities. The method should get an object (result) and return a list of objects (the list of entities). Declaration public string EntitiesProvider { get; set; } Property Value Type Description System.String The entities provider."
  },
  "api/AGS.API.MethodParamAttribute.html": {
    "href": "api/AGS.API.MethodParamAttribute.html",
    "title": "Class MethodParamAttribute | MonoAGS Documentation",
    "keywords": "Class MethodParamAttribute An attribute to configure parameters for a method wizard ( MethodWizardAttribute ). Inheritance System.Object System.Attribute MethodParamAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AGS.API Assembly : AGS.API.dll Syntax [AttributeUsage(AttributeTargets.Parameter)] public class MethodParamAttribute : Attribute Constructors | Improve this Doc View Source MethodParamAttribute() Declaration public MethodParamAttribute() Properties | Improve this Doc View Source Browsable Gets or sets a value indicating whether this MethodParamAttribute is visible in the wizard. Declaration public bool Browsable { get; set; } Property Value Type Description System.Boolean true if browsable; otherwise, false . | Improve this Doc View Source Default Gets or sets the default value for the parameter in the wizard. This is ignored if DefaultProvider is assigned. If not set, and the method itself has a default value, then that value will be used as default. Declaration public object Default { get; set; } Property Value Type Description System.Object The default. | Improve this Doc View Source DefaultProvider Gets or sets the default provider: this should be the name of a static method in the same class, which should return the default value. The method should accept a \"Resolver\" as an input parameter. Declaration public string DefaultProvider { get; set; } Property Value Type Description System.String The default provider."
  },
  "api/AGS.API.Matrix4.html": {
    "href": "api/AGS.API.Matrix4.html",
    "title": "Struct Matrix4 | MonoAGS Documentation",
    "keywords": "Struct Matrix4 Represents a 4x4 matrix containing 3D rotation, scale, transform, and projection. Implements System.IEquatable < Matrix4 > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : AGS.API Assembly : AGS.API.dll Syntax public struct Matrix4 : IEquatable<Matrix4> Constructors | Improve this Doc View Source Matrix4(Matrix3) Constructs a new instance. Declaration public Matrix4(Matrix3 topLeft) Parameters Type Name Description Matrix3 topLeft The top left 3x3 of the matrix. | Improve this Doc View Source Matrix4(Vector4, Vector4, Vector4, Vector4) Constructs a new instance. Declaration public Matrix4(Vector4 row0, Vector4 row1, Vector4 row2, Vector4 row3) Parameters Type Name Description Vector4 row0 Top row of the matrix. Vector4 row1 Second row of the matrix. Vector4 row2 Third row of the matrix. Vector4 row3 Bottom row of the matrix. | Improve this Doc View Source Matrix4(Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single, Single) Constructs a new instance. Declaration public Matrix4(float m00, float m01, float m02, float m03, float m10, float m11, float m12, float m13, float m20, float m21, float m22, float m23, float m30, float m31, float m32, float m33) Parameters Type Name Description System.Single m00 First item of the first row of the matrix. System.Single m01 Second item of the first row of the matrix. System.Single m02 Third item of the first row of the matrix. System.Single m03 Fourth item of the first row of the matrix. System.Single m10 First item of the second row of the matrix. System.Single m11 Second item of the second row of the matrix. System.Single m12 Third item of the second row of the matrix. System.Single m13 Fourth item of the second row of the matrix. System.Single m20 First item of the third row of the matrix. System.Single m21 Second item of the third row of the matrix. System.Single m22 Third item of the third row of the matrix. System.Single m23 First item of the third row of the matrix. System.Single m30 Fourth item of the fourth row of the matrix. System.Single m31 Second item of the fourth row of the matrix. System.Single m32 Third item of the fourth row of the matrix. System.Single m33 Fourth item of the fourth row of the matrix. Fields | Improve this Doc View Source Identity The identity matrix. Declaration public static readonly Matrix4 Identity Field Value Type Description Matrix4 | Improve this Doc View Source Row0 Top row of the matrix. Declaration public Vector4 Row0 Field Value Type Description Vector4 | Improve this Doc View Source Row1 2nd row of the matrix. Declaration public Vector4 Row1 Field Value Type Description Vector4 | Improve this Doc View Source Row2 3rd row of the matrix. Declaration public Vector4 Row2 Field Value Type Description Vector4 | Improve this Doc View Source Row3 Bottom row of the matrix. Declaration public Vector4 Row3 Field Value Type Description Vector4 | Improve this Doc View Source Zero The zero matrix. Declaration public static readonly Matrix4 Zero Field Value Type Description Matrix4 Properties | Improve this Doc View Source Column0 Gets the first column of this matrix. Declaration public Vector4 Column0 { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Column1 Gets the second column of this matrix. Declaration public Vector4 Column1 { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Column2 Gets the third column of this matrix. Declaration public Vector4 Column2 { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Column3 Gets the fourth column of this matrix. Declaration public Vector4 Column3 { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Determinant Gets the determinant of this matrix. Declaration public float Determinant { get; } Property Value Type Description System.Single | Improve this Doc View Source Diagonal Gets or sets the values along the main diagonal of the matrix. Declaration public Vector4 Diagonal { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Item[Int32, Int32] Gets or sets the value at a specified row and column. Declaration public float this[int rowIndex, int columnIndex] { get; set; } Parameters Type Name Description System.Int32 rowIndex System.Int32 columnIndex Property Value Type Description System.Single | Improve this Doc View Source M11 Gets or sets the value at row 1, column 1 of this instance. Declaration public float M11 { get; set; } Property Value Type Description System.Single | Improve this Doc View Source M12 Gets or sets the value at row 1, column 2 of this instance. Declaration public float M12 { get; set; } Property Value Type Description System.Single | Improve this Doc View Source M13 Gets or sets the value at row 1, column 3 of this instance. Declaration public float M13 { get; set; } Property Value Type Description System.Single | Improve this Doc View Source M14 Gets or sets the value at row 1, column 4 of this instance. Declaration public float M14 { get; set; } Property Value Type Description System.Single | Improve this Doc View Source M21 Gets or sets the value at row 2, column 1 of this instance. Declaration public float M21 { get; set; } Property Value Type Description System.Single | Improve this Doc View Source M22 Gets or sets the value at row 2, column 2 of this instance. Declaration public float M22 { get; set; } Property Value Type Description System.Single | Improve this Doc View Source M23 Gets or sets the value at row 2, column 3 of this instance. Declaration public float M23 { get; set; } Property Value Type Description System.Single | Improve this Doc View Source M24 Gets or sets the value at row 2, column 4 of this instance. Declaration public float M24 { get; set; } Property Value Type Description System.Single | Improve this Doc View Source M31 Gets or sets the value at row 3, column 1 of this instance. Declaration public float M31 { get; set; } Property Value Type Description System.Single | Improve this Doc View Source M32 Gets or sets the value at row 3, column 2 of this instance. Declaration public float M32 { get; set; } Property Value Type Description System.Single | Improve this Doc View Source M33 Gets or sets the value at row 3, column 3 of this instance. Declaration public float M33 { get; set; } Property Value Type Description System.Single | Improve this Doc View Source M34 Gets or sets the value at row 3, column 4 of this instance. Declaration public float M34 { get; set; } Property Value Type Description System.Single | Improve this Doc View Source M41 Gets or sets the value at row 4, column 1 of this instance. Declaration public float M41 { get; set; } Property Value Type Description System.Single | Improve this Doc View Source M42 Gets or sets the value at row 4, column 2 of this instance. Declaration public float M42 { get; set; } Property Value Type Description System.Single | Improve this Doc View Source M43 Gets or sets the value at row 4, column 3 of this instance. Declaration public float M43 { get; set; } Property Value Type Description System.Single | Improve this Doc View Source M44 Gets or sets the value at row 4, column 4 of this instance. Declaration public float M44 { get; set; } Property Value Type Description System.Single | Improve this Doc View Source Trace Gets the trace of the matrix, the sum of the values along the diagonal. Declaration public float Trace { get; } Property Value Type Description System.Single Methods | Improve this Doc View Source Add(Matrix4, Matrix4) Adds two instances. Declaration public static Matrix4 Add(Matrix4 left, Matrix4 right) Parameters Type Name Description Matrix4 left The left operand of the addition. Matrix4 right The right operand of the addition. Returns Type Description Matrix4 A new instance that is the result of the addition. | Improve this Doc View Source Add(ref Matrix4, ref Matrix4, out Matrix4) Adds two instances. Declaration public static void Add(ref Matrix4 left, ref Matrix4 right, out Matrix4 result) Parameters Type Name Description Matrix4 left The left operand of the addition. Matrix4 right The right operand of the addition. Matrix4 result A new instance that is the result of the addition. | Improve this Doc View Source ClearProjection() Returns a copy of this Matrix4 without projection. Declaration public Matrix4 ClearProjection() Returns Type Description Matrix4 | Improve this Doc View Source ClearRotation() Returns a copy of this Matrix4 without rotation. Declaration public Matrix4 ClearRotation() Returns Type Description Matrix4 | Improve this Doc View Source ClearScale() Returns a copy of this Matrix4 without scale. Declaration public Matrix4 ClearScale() Returns Type Description Matrix4 | Improve this Doc View Source ClearTranslation() Returns a copy of this Matrix4 without translation. Declaration public Matrix4 ClearTranslation() Returns Type Description Matrix4 | Improve this Doc View Source CreateFromAxisAngle(Vector3, Single) Build a rotation matrix from the specified axis/angle rotation. Declaration public static Matrix4 CreateFromAxisAngle(Vector3 axis, float angle) Parameters Type Name Description Vector3 axis The axis to rotate about. System.Single angle Angle in radians to rotate counter-clockwise (looking in the direction of the given axis). Returns Type Description Matrix4 A matrix instance. | Improve this Doc View Source CreateFromAxisAngle(Vector3, Single, out Matrix4) Build a rotation matrix from the specified axis/angle rotation. Declaration public static void CreateFromAxisAngle(Vector3 axis, float angle, out Matrix4 result) Parameters Type Name Description Vector3 axis The axis to rotate about. System.Single angle Angle in radians to rotate counter-clockwise (looking in the direction of the given axis). Matrix4 result A matrix instance. | Improve this Doc View Source CreateFromQuaternion(Quaternion) Builds a rotation matrix from a quaternion. Declaration public static Matrix4 CreateFromQuaternion(Quaternion q) Parameters Type Name Description Quaternion q The quaternion to rotate by. Returns Type Description Matrix4 A matrix instance. | Improve this Doc View Source CreateFromQuaternion(ref Quaternion, out Matrix4) Builds a rotation matrix from a quaternion. Declaration public static void CreateFromQuaternion(ref Quaternion q, out Matrix4 result) Parameters Type Name Description Quaternion q The quaternion to rotate by. Matrix4 result A matrix instance. | Improve this Doc View Source CreateOrthographic(Single, Single, Single, Single) Creates an orthographic projection matrix. Declaration public static Matrix4 CreateOrthographic(float width, float height, float zNear, float zFar) Parameters Type Name Description System.Single width The width of the projection volume. System.Single height The height of the projection volume. System.Single zNear The near edge of the projection volume. System.Single zFar The far edge of the projection volume. Returns Type Description Matrix4 | Improve this Doc View Source CreateOrthographic(Single, Single, Single, Single, out Matrix4) Creates an orthographic projection matrix. Declaration public static void CreateOrthographic(float width, float height, float zNear, float zFar, out Matrix4 result) Parameters Type Name Description System.Single width The width of the projection volume. System.Single height The height of the projection volume. System.Single zNear The near edge of the projection volume. System.Single zFar The far edge of the projection volume. Matrix4 result The resulting Matrix4 instance. | Improve this Doc View Source CreateOrthographicOffCenter(Single, Single, Single, Single, Single, Single) Creates an orthographic projection matrix. Declaration public static Matrix4 CreateOrthographicOffCenter(float left, float right, float bottom, float top, float zNear, float zFar) Parameters Type Name Description System.Single left The left edge of the projection volume. System.Single right The right edge of the projection volume. System.Single bottom The bottom edge of the projection volume. System.Single top The top edge of the projection volume. System.Single zNear The near edge of the projection volume. System.Single zFar The far edge of the projection volume. Returns Type Description Matrix4 The resulting Matrix4 instance. | Improve this Doc View Source CreateOrthographicOffCenter(Single, Single, Single, Single, Single, Single, out Matrix4) Creates an orthographic projection matrix. Declaration public static void CreateOrthographicOffCenter(float left, float right, float bottom, float top, float zNear, float zFar, out Matrix4 result) Parameters Type Name Description System.Single left The left edge of the projection volume. System.Single right The right edge of the projection volume. System.Single bottom The bottom edge of the projection volume. System.Single top The top edge of the projection volume. System.Single zNear The near edge of the projection volume. System.Single zFar The far edge of the projection volume. Matrix4 result The resulting Matrix4 instance. | Improve this Doc View Source CreatePerspectiveFieldOfView(Single, Single, Single, Single) Creates a perspective projection matrix. Declaration public static Matrix4 CreatePerspectiveFieldOfView(float fovy, float aspect, float zNear, float zFar) Parameters Type Name Description System.Single fovy Angle of the field of view in the y direction (in radians) System.Single aspect Aspect ratio of the view (width / height) System.Single zNear Distance to the near clip plane System.Single zFar Distance to the far clip plane Returns Type Description Matrix4 A projection matrix that transforms camera space to raster space Exceptions Type Condition System.ArgumentOutOfRangeException Thrown under the following conditions: | Improve this Doc View Source CreatePerspectiveFieldOfView(Single, Single, Single, Single, out Matrix4) Creates a perspective projection matrix. Declaration public static void CreatePerspectiveFieldOfView(float fovy, float aspect, float zNear, float zFar, out Matrix4 result) Parameters Type Name Description System.Single fovy Angle of the field of view in the y direction (in radians) System.Single aspect Aspect ratio of the view (width / height) System.Single zNear Distance to the near clip plane System.Single zFar Distance to the far clip plane Matrix4 result A projection matrix that transforms camera space to raster space Exceptions Type Condition System.ArgumentOutOfRangeException Thrown under the following conditions: | Improve this Doc View Source CreatePerspectiveOffCenter(Single, Single, Single, Single, Single, Single) Creates an perspective projection matrix. Declaration public static Matrix4 CreatePerspectiveOffCenter(float left, float right, float bottom, float top, float zNear, float zFar) Parameters Type Name Description System.Single left Left edge of the view frustum System.Single right Right edge of the view frustum System.Single bottom Bottom edge of the view frustum System.Single top Top edge of the view frustum System.Single zNear Distance to the near clip plane System.Single zFar Distance to the far clip plane Returns Type Description Matrix4 A projection matrix that transforms camera space to raster space Exceptions Type Condition System.ArgumentOutOfRangeException Thrown under the following conditions: | Improve this Doc View Source CreatePerspectiveOffCenter(Single, Single, Single, Single, Single, Single, out Matrix4) Creates an perspective projection matrix. Declaration public static void CreatePerspectiveOffCenter(float left, float right, float bottom, float top, float zNear, float zFar, out Matrix4 result) Parameters Type Name Description System.Single left Left edge of the view frustum System.Single right Right edge of the view frustum System.Single bottom Bottom edge of the view frustum System.Single top Top edge of the view frustum System.Single zNear Distance to the near clip plane System.Single zFar Distance to the far clip plane Matrix4 result A projection matrix that transforms camera space to raster space Exceptions Type Condition System.ArgumentOutOfRangeException Thrown under the following conditions: | Improve this Doc View Source CreateRotationX(Single) Builds a rotation matrix for a rotation around the x-axis. Declaration public static Matrix4 CreateRotationX(float angle) Parameters Type Name Description System.Single angle The counter-clockwise angle in radians. Returns Type Description Matrix4 The resulting Matrix4 instance. | Improve this Doc View Source CreateRotationX(Single, out Matrix4) Builds a rotation matrix for a rotation around the x-axis. Declaration public static void CreateRotationX(float angle, out Matrix4 result) Parameters Type Name Description System.Single angle The counter-clockwise angle in radians. Matrix4 result The resulting Matrix4 instance. | Improve this Doc View Source CreateRotationY(Single) Builds a rotation matrix for a rotation around the y-axis. Declaration public static Matrix4 CreateRotationY(float angle) Parameters Type Name Description System.Single angle The counter-clockwise angle in radians. Returns Type Description Matrix4 The resulting Matrix4 instance. | Improve this Doc View Source CreateRotationY(Single, out Matrix4) Builds a rotation matrix for a rotation around the y-axis. Declaration public static void CreateRotationY(float angle, out Matrix4 result) Parameters Type Name Description System.Single angle The counter-clockwise angle in radians. Matrix4 result The resulting Matrix4 instance. | Improve this Doc View Source CreateRotationZ(Single) Builds a rotation matrix for a rotation around the z-axis. Declaration public static Matrix4 CreateRotationZ(float angle) Parameters Type Name Description System.Single angle The counter-clockwise angle in radians. Returns Type Description Matrix4 The resulting Matrix4 instance. | Improve this Doc View Source CreateRotationZ(Single, out Matrix4) Builds a rotation matrix for a rotation around the z-axis. Declaration public static void CreateRotationZ(float angle, out Matrix4 result) Parameters Type Name Description System.Single angle The counter-clockwise angle in radians. Matrix4 result The resulting Matrix4 instance. | Improve this Doc View Source CreateScale(Vector3) Creates a scale matrix. Declaration public static Matrix4 CreateScale(Vector3 scale) Parameters Type Name Description Vector3 scale Scale factors for the x, y, and z axes. Returns Type Description Matrix4 A scale matrix. | Improve this Doc View Source CreateScale(ref Vector3, out Matrix4) Creates a scale matrix. Declaration public static void CreateScale(ref Vector3 scale, out Matrix4 result) Parameters Type Name Description Vector3 scale Scale factors for the x, y, and z axes. Matrix4 result A scale matrix. | Improve this Doc View Source CreateScale(Single) Creates a scale matrix. Declaration public static Matrix4 CreateScale(float scale) Parameters Type Name Description System.Single scale Single scale factor for the x, y, and z axes. Returns Type Description Matrix4 A scale matrix. | Improve this Doc View Source CreateScale(Single, out Matrix4) Creates a scale matrix. Declaration public static void CreateScale(float scale, out Matrix4 result) Parameters Type Name Description System.Single scale Single scale factor for the x, y, and z axes. Matrix4 result A scale matrix. | Improve this Doc View Source CreateScale(Single, Single, Single) Creates a scale matrix. Declaration public static Matrix4 CreateScale(float x, float y, float z) Parameters Type Name Description System.Single x Scale factor for the x axis. System.Single y Scale factor for the y axis. System.Single z Scale factor for the z axis. Returns Type Description Matrix4 A scale matrix. | Improve this Doc View Source CreateScale(Single, Single, Single, out Matrix4) Creates a scale matrix. Declaration public static void CreateScale(float x, float y, float z, out Matrix4 result) Parameters Type Name Description System.Single x Scale factor for the x axis. System.Single y Scale factor for the y axis. System.Single z Scale factor for the z axis. Matrix4 result A scale matrix. | Improve this Doc View Source CreateTranslation(Vector3) Creates a translation matrix. Declaration public static Matrix4 CreateTranslation(Vector3 vector) Parameters Type Name Description Vector3 vector The translation vector. Returns Type Description Matrix4 The resulting Matrix4 instance. | Improve this Doc View Source CreateTranslation(ref Vector3, out Matrix4) Creates a translation matrix. Declaration public static void CreateTranslation(ref Vector3 vector, out Matrix4 result) Parameters Type Name Description Vector3 vector The translation vector. Matrix4 result The resulting Matrix4 instance. | Improve this Doc View Source CreateTranslation(Single, Single, Single) Creates a translation matrix. Declaration public static Matrix4 CreateTranslation(float x, float y, float z) Parameters Type Name Description System.Single x X translation. System.Single y Y translation. System.Single z Z translation. Returns Type Description Matrix4 The resulting Matrix4 instance. | Improve this Doc View Source CreateTranslation(Single, Single, Single, out Matrix4) Creates a translation matrix. Declaration public static void CreateTranslation(float x, float y, float z, out Matrix4 result) Parameters Type Name Description System.Single x X translation. System.Single y Y translation. System.Single z Z translation. Matrix4 result The resulting Matrix4 instance. | Improve this Doc View Source Equals(Matrix4) Indicates whether the current matrix is equal to another matrix. Declaration public bool Equals(Matrix4 other) Parameters Type Name Description Matrix4 other An matrix to compare with this matrix. Returns Type Description System.Boolean true if the current matrix is equal to the matrix parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare tresult. Returns Type Description System.Boolean True if the instances are equal; false otherwise. Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source ExtractProjection() Returns the projection component of this instance. Declaration public Vector4 ExtractProjection() Returns Type Description Vector4 | Improve this Doc View Source ExtractRotation(Boolean) Returns the rotation component of this instance. Quite slow. Declaration public Quaternion ExtractRotation(bool row_normalise = true) Parameters Type Name Description System.Boolean row_normalise Whether the method should row-normalise (i.e. remove scale from) the Matrix. Pass false if you know it's already normalised. Returns Type Description Quaternion | Improve this Doc View Source ExtractScale() Returns the scale component of this instance. Declaration public Vector3 ExtractScale() Returns Type Description Vector3 | Improve this Doc View Source ExtractTranslation() Returns the translation component of this instance. Declaration public Vector3 ExtractTranslation() Returns Type Description Vector3 | Improve this Doc View Source Frustum(Single, Single, Single, Single, Single, Single) Build a projection matrix Declaration [Obsolete(\"Use CreatePerspectiveOffCenter instead.\")] public static Matrix4 Frustum(float left, float right, float bottom, float top, float near, float far) Parameters Type Name Description System.Single left Left edge of the view frustum System.Single right Right edge of the view frustum System.Single bottom Bottom edge of the view frustum System.Single top Top edge of the view frustum System.Single near Distance to the near clip plane System.Single far Distance to the far clip plane Returns Type Description Matrix4 A projection matrix that transforms camera space to raster space | Improve this Doc View Source GetHashCode() Returns the hashcode for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A System.Int32 containing the unique hashcode for this instance. Overrides System.ValueType.GetHashCode() | Improve this Doc View Source Invert() Converts this instance into its inverse. Declaration public void Invert() | Improve this Doc View Source Invert(Matrix4) Calculate the inverse of the given matrix Declaration public static Matrix4 Invert(Matrix4 mat) Parameters Type Name Description Matrix4 mat The matrix to invert Returns Type Description Matrix4 The inverse of the given matrix if it has one, or the input if it is singular Exceptions Type Condition System.InvalidOperationException Thrown if the Matrix4 is singular. | Improve this Doc View Source Invert(ref Matrix4, out Matrix4) Calculate the inverse of the given matrix Declaration public static void Invert(ref Matrix4 mat, out Matrix4 result) Parameters Type Name Description Matrix4 mat The matrix to invert Matrix4 result The inverse of the given matrix if it has one, or the input if it is singular Exceptions Type Condition System.InvalidOperationException Thrown if the Matrix4 is singular. | Improve this Doc View Source Inverted() Returns an inverted copy of this instance. Declaration public Matrix4 Inverted() Returns Type Description Matrix4 | Improve this Doc View Source LookAt(Vector3, Vector3, Vector3) Build a world space to camera space matrix Declaration public static Matrix4 LookAt(Vector3 eye, Vector3 target, Vector3 up) Parameters Type Name Description Vector3 eye Eye (camera) position in world space Vector3 target Target position in world space Vector3 up Up vector in world space (should not be parallel to the camera direction, that is target - eye) Returns Type Description Matrix4 A Matrix4 that transforms world space to camera space | Improve this Doc View Source LookAt(Single, Single, Single, Single, Single, Single, Single, Single, Single) Build a world space to camera space matrix Declaration public static Matrix4 LookAt(float eyeX, float eyeY, float eyeZ, float targetX, float targetY, float targetZ, float upX, float upY, float upZ) Parameters Type Name Description System.Single eyeX Eye (camera) position in world space System.Single eyeY Eye (camera) position in world space System.Single eyeZ Eye (camera) position in world space System.Single targetX Target position in world space System.Single targetY Target position in world space System.Single targetZ Target position in world space System.Single upX Up vector in world space (should not be parallel to the camera direction, that is target - eye) System.Single upY Up vector in world space (should not be parallel to the camera direction, that is target - eye) System.Single upZ Up vector in world space (should not be parallel to the camera direction, that is target - eye) Returns Type Description Matrix4 A Matrix4 that transforms world space to camera space | Improve this Doc View Source Mult(Matrix4, Matrix4) Multiplies two instances. Declaration public static Matrix4 Mult(Matrix4 left, Matrix4 right) Parameters Type Name Description Matrix4 left The left operand of the multiplication. Matrix4 right The right operand of the multiplication. Returns Type Description Matrix4 A new instance that is the result of the multiplication. | Improve this Doc View Source Mult(Matrix4, Single) Multiplies an instance by a scalar. Declaration public static Matrix4 Mult(Matrix4 left, float right) Parameters Type Name Description Matrix4 left The left operand of the multiplication. System.Single right The right operand of the multiplication. Returns Type Description Matrix4 A new instance that is the result of the multiplication | Improve this Doc View Source Mult(ref Matrix4, ref Matrix4, out Matrix4) Multiplies two instances. Declaration public static void Mult(ref Matrix4 left, ref Matrix4 right, out Matrix4 result) Parameters Type Name Description Matrix4 left The left operand of the multiplication. Matrix4 right The right operand of the multiplication. Matrix4 result A new instance that is the result of the multiplication. | Improve this Doc View Source Mult(ref Matrix4, Single, out Matrix4) Multiplies an instance by a scalar. Declaration public static void Mult(ref Matrix4 left, float right, out Matrix4 result) Parameters Type Name Description Matrix4 left The left operand of the multiplication. System.Single right The right operand of the multiplication. Matrix4 result A new instance that is the result of the multiplication | Improve this Doc View Source Normalize() Divides each element in the Matrix by the Determinant . Declaration public void Normalize() | Improve this Doc View Source Normalized() Returns a normalised copy of this instance. Declaration public Matrix4 Normalized() Returns Type Description Matrix4 | Improve this Doc View Source Perspective(Single, Single, Single, Single) Build a projection matrix Declaration [Obsolete(\"Use CreatePerspectiveFieldOfView instead.\")] public static Matrix4 Perspective(float fovy, float aspect, float near, float far) Parameters Type Name Description System.Single fovy Angle of the field of view in the y direction (in radians) System.Single aspect Aspect ratio of the view (width / height) System.Single near Distance to the near clip plane System.Single far Distance to the far clip plane Returns Type Description Matrix4 A projection matrix that transforms camera space to raster space | Improve this Doc View Source Rotate(Quaternion) Build a rotation matrix from a quaternion Declaration [Obsolete(\"Use CreateFromQuaternion instead.\")] public static Matrix4 Rotate(Quaternion q) Parameters Type Name Description Quaternion q the quaternion Returns Type Description Matrix4 A rotation matrix | Improve this Doc View Source Rotate(Vector3, Single) Build a rotation matrix to rotate about the given axis Declaration [Obsolete(\"Use CreateFromAxisAngle instead.\")] public static Matrix4 Rotate(Vector3 axis, float angle) Parameters Type Name Description Vector3 axis the axis to rotate about System.Single angle angle in radians to rotate counter-clockwise (looking in the direction of the given axis) Returns Type Description Matrix4 A rotation matrix | Improve this Doc View Source RotateX(Single) Build a rotation matrix that rotates about the x-axis Declaration [Obsolete(\"Use CreateRotationX instead.\")] public static Matrix4 RotateX(float angle) Parameters Type Name Description System.Single angle angle in radians to rotate counter-clockwise around the x-axis Returns Type Description Matrix4 A rotation matrix | Improve this Doc View Source RotateY(Single) Build a rotation matrix that rotates about the y-axis Declaration [Obsolete(\"Use CreateRotationY instead.\")] public static Matrix4 RotateY(float angle) Parameters Type Name Description System.Single angle angle in radians to rotate counter-clockwise around the y-axis Returns Type Description Matrix4 A rotation matrix | Improve this Doc View Source RotateZ(Single) Build a rotation matrix that rotates about the z-axis Declaration [Obsolete(\"Use CreateRotationZ instead.\")] public static Matrix4 RotateZ(float angle) Parameters Type Name Description System.Single angle angle in radians to rotate counter-clockwise around the z-axis Returns Type Description Matrix4 A rotation matrix | Improve this Doc View Source Scale(Vector3) Build a scaling matrix Declaration [Obsolete(\"Use CreateScale instead.\")] public static Matrix4 Scale(Vector3 scale) Parameters Type Name Description Vector3 scale Scale factors for x,y and z axes Returns Type Description Matrix4 A scaling matrix | Improve this Doc View Source Scale(Single) Build a scaling matrix Declaration [Obsolete(\"Use CreateScale instead.\")] public static Matrix4 Scale(float scale) Parameters Type Name Description System.Single scale Single scale factor for x,y and z axes Returns Type Description Matrix4 A scaling matrix | Improve this Doc View Source Scale(Single, Single, Single) Build a scaling matrix Declaration [Obsolete(\"Use CreateScale instead.\")] public static Matrix4 Scale(float x, float y, float z) Parameters Type Name Description System.Single x Scale factor for x-axis System.Single y Scale factor for y-axis System.Single z Scale factor for z-axis Returns Type Description Matrix4 A scaling matrix | Improve this Doc View Source Subtract(Matrix4, Matrix4) Subtracts one instance from another. Declaration public static Matrix4 Subtract(Matrix4 left, Matrix4 right) Parameters Type Name Description Matrix4 left The left operand of the subraction. Matrix4 right The right operand of the subraction. Returns Type Description Matrix4 A new instance that is the result of the subraction. | Improve this Doc View Source Subtract(ref Matrix4, ref Matrix4, out Matrix4) Subtracts one instance from another. Declaration public static void Subtract(ref Matrix4 left, ref Matrix4 right, out Matrix4 result) Parameters Type Name Description Matrix4 left The left operand of the subraction. Matrix4 right The right operand of the subraction. Matrix4 result A new instance that is the result of the subraction. | Improve this Doc View Source ToString() Returns a System.String that represents the current Matrix4. Declaration public override string ToString() Returns Type Description System.String The string representation of the matrix. Overrides System.ValueType.ToString() | Improve this Doc View Source Translation(Vector3) Builds a translation matrix. Declaration [Obsolete(\"Use CreateTranslation instead.\")] public static Matrix4 Translation(Vector3 trans) Parameters Type Name Description Vector3 trans The translation vector. Returns Type Description Matrix4 A new Matrix4 instance. | Improve this Doc View Source Translation(Single, Single, Single) Build a translation matrix with the given translation Declaration [Obsolete(\"Use CreateTranslation instead.\")] public static Matrix4 Translation(float x, float y, float z) Parameters Type Name Description System.Single x X translation System.Single y Y translation System.Single z Z translation Returns Type Description Matrix4 A Translation matrix | Improve this Doc View Source Transpose() Converts this instance into its transpose. Declaration public void Transpose() | Improve this Doc View Source Transpose(Matrix4) Calculate the transpose of the given matrix Declaration public static Matrix4 Transpose(Matrix4 mat) Parameters Type Name Description Matrix4 mat The matrix to transpose Returns Type Description Matrix4 The transpose of the given matrix | Improve this Doc View Source Transpose(ref Matrix4, out Matrix4) Calculate the transpose of the given matrix Declaration public static void Transpose(ref Matrix4 mat, out Matrix4 result) Parameters Type Name Description Matrix4 mat The matrix to transpose Matrix4 result The result of the calculation Operators | Improve this Doc View Source Addition(Matrix4, Matrix4) Matrix addition Declaration public static Matrix4 operator +(Matrix4 left, Matrix4 right) Parameters Type Name Description Matrix4 left left-hand operand Matrix4 right right-hand operand Returns Type Description Matrix4 A new Matrix4 which holds the result of the addition | Improve this Doc View Source Equality(Matrix4, Matrix4) Compares two instances for equality. Declaration public static bool operator ==(Matrix4 left, Matrix4 right) Parameters Type Name Description Matrix4 left The first instance. Matrix4 right The second instance. Returns Type Description System.Boolean True, if left equals right; false otherwise. | Improve this Doc View Source Inequality(Matrix4, Matrix4) Compares two instances for inequality. Declaration public static bool operator !=(Matrix4 left, Matrix4 right) Parameters Type Name Description Matrix4 left The first instance. Matrix4 right The second instance. Returns Type Description System.Boolean True, if left does not equal right; false otherwise. | Improve this Doc View Source Multiply(Matrix4, Matrix4) Matrix multiplication Declaration public static Matrix4 operator *(Matrix4 left, Matrix4 right) Parameters Type Name Description Matrix4 left left-hand operand Matrix4 right right-hand operand Returns Type Description Matrix4 A new Matrix4 which holds the result of the multiplication | Improve this Doc View Source Multiply(Matrix4, Single) Matrix-scalar multiplication Declaration public static Matrix4 operator *(Matrix4 left, float right) Parameters Type Name Description Matrix4 left left-hand operand System.Single right right-hand operand Returns Type Description Matrix4 A new Matrix4 which holds the result of the multiplication | Improve this Doc View Source Subtraction(Matrix4, Matrix4) Matrix subtraction Declaration public static Matrix4 operator -(Matrix4 left, Matrix4 right) Parameters Type Name Description Matrix4 left left-hand operand Matrix4 right right-hand operand Returns Type Description Matrix4 A new Matrix4 which holds the result of the subtraction Implements System.IEquatable<T>"
  },
  "api/AGS.API.Matrix3.html": {
    "href": "api/AGS.API.Matrix3.html",
    "title": "Struct Matrix3 | MonoAGS Documentation",
    "keywords": "Struct Matrix3 Represents a 3x3 matrix containing 3D rotation and scale. Implements System.IEquatable < Matrix3 > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : AGS.API Assembly : AGS.API.dll Syntax public struct Matrix3 : IEquatable<Matrix3> Constructors | Improve this Doc View Source Matrix3(Matrix4) Constructs a new instance. Declaration public Matrix3(Matrix4 matrix) Parameters Type Name Description Matrix4 matrix A Matrix4 to take the upper-left 3x3 from. | Improve this Doc View Source Matrix3(Vector3, Vector3, Vector3) Constructs a new instance. Declaration public Matrix3(Vector3 row0, Vector3 row1, Vector3 row2) Parameters Type Name Description Vector3 row0 Top row of the matrix Vector3 row1 Second row of the matrix Vector3 row2 Bottom row of the matrix | Improve this Doc View Source Matrix3(Single, Single, Single, Single, Single, Single, Single, Single, Single) Constructs a new instance. Declaration public Matrix3(float m00, float m01, float m02, float m10, float m11, float m12, float m20, float m21, float m22) Parameters Type Name Description System.Single m00 First item of the first row of the matrix. System.Single m01 Second item of the first row of the matrix. System.Single m02 Third item of the first row of the matrix. System.Single m10 First item of the second row of the matrix. System.Single m11 Second item of the second row of the matrix. System.Single m12 Third item of the second row of the matrix. System.Single m20 First item of the third row of the matrix. System.Single m21 Second item of the third row of the matrix. System.Single m22 Third item of the third row of the matrix. Fields | Improve this Doc View Source Identity The identity matrix. Declaration public static readonly Matrix3 Identity Field Value Type Description Matrix3 | Improve this Doc View Source Row0 First row of the matrix. Declaration public Vector3 Row0 Field Value Type Description Vector3 | Improve this Doc View Source Row1 Second row of the matrix. Declaration public Vector3 Row1 Field Value Type Description Vector3 | Improve this Doc View Source Row2 Third row of the matrix. Declaration public Vector3 Row2 Field Value Type Description Vector3 | Improve this Doc View Source Zero The zero matrix. Declaration public static readonly Matrix3 Zero Field Value Type Description Matrix3 Properties | Improve this Doc View Source Column0 Gets the first column of this matrix. Declaration public Vector3 Column0 { get; } Property Value Type Description Vector3 | Improve this Doc View Source Column1 Gets the second column of this matrix. Declaration public Vector3 Column1 { get; } Property Value Type Description Vector3 | Improve this Doc View Source Column2 Gets the third column of this matrix. Declaration public Vector3 Column2 { get; } Property Value Type Description Vector3 | Improve this Doc View Source Determinant Gets the determinant of this matrix. Declaration public float Determinant { get; } Property Value Type Description System.Single | Improve this Doc View Source Diagonal Gets or sets the values along the main diagonal of the matrix. Declaration public Vector3 Diagonal { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Item[Int32, Int32] Gets or sets the value at a specified row and column. Declaration public float this[int rowIndex, int columnIndex] { get; set; } Parameters Type Name Description System.Int32 rowIndex System.Int32 columnIndex Property Value Type Description System.Single | Improve this Doc View Source M11 Gets or sets the value at row 1, column 1 of this instance. Declaration public float M11 { get; set; } Property Value Type Description System.Single | Improve this Doc View Source M12 Gets or sets the value at row 1, column 2 of this instance. Declaration public float M12 { get; set; } Property Value Type Description System.Single | Improve this Doc View Source M13 Gets or sets the value at row 1, column 3 of this instance. Declaration public float M13 { get; set; } Property Value Type Description System.Single | Improve this Doc View Source M21 Gets or sets the value at row 2, column 1 of this instance. Declaration public float M21 { get; set; } Property Value Type Description System.Single | Improve this Doc View Source M22 Gets or sets the value at row 2, column 2 of this instance. Declaration public float M22 { get; set; } Property Value Type Description System.Single | Improve this Doc View Source M23 Gets or sets the value at row 2, column 3 of this instance. Declaration public float M23 { get; set; } Property Value Type Description System.Single | Improve this Doc View Source M31 Gets or sets the value at row 3, column 1 of this instance. Declaration public float M31 { get; set; } Property Value Type Description System.Single | Improve this Doc View Source M32 Gets or sets the value at row 3, column 2 of this instance. Declaration public float M32 { get; set; } Property Value Type Description System.Single | Improve this Doc View Source M33 Gets or sets the value at row 3, column 3 of this instance. Declaration public float M33 { get; set; } Property Value Type Description System.Single | Improve this Doc View Source Trace Gets the trace of the matrix, the sum of the values along the diagonal. Declaration public float Trace { get; } Property Value Type Description System.Single Methods | Improve this Doc View Source Add(Matrix3, Matrix3) Adds two instances. Declaration public static Matrix3 Add(Matrix3 left, Matrix3 right) Parameters Type Name Description Matrix3 left The left operand of the addition. Matrix3 right The right operand of the addition. Returns Type Description Matrix3 A new instance that is the result of the addition. | Improve this Doc View Source Add(ref Matrix3, ref Matrix3, out Matrix3) Adds two instances. Declaration public static void Add(ref Matrix3 left, ref Matrix3 right, out Matrix3 result) Parameters Type Name Description Matrix3 left The left operand of the addition. Matrix3 right The right operand of the addition. Matrix3 result A new instance that is the result of the addition. | Improve this Doc View Source ClearRotation() Returns a copy of this Matrix3 without rotation. Declaration public Matrix3 ClearRotation() Returns Type Description Matrix3 | Improve this Doc View Source ClearScale() Returns a copy of this Matrix3 without scale. Declaration public Matrix3 ClearScale() Returns Type Description Matrix3 | Improve this Doc View Source CreateFromAxisAngle(Vector3, Single) Build a rotation matrix from the specified axis/angle rotation. Declaration public static Matrix3 CreateFromAxisAngle(Vector3 axis, float angle) Parameters Type Name Description Vector3 axis The axis to rotate about. System.Single angle Angle in radians to rotate counter-clockwise (looking in the direction of the given axis). Returns Type Description Matrix3 A matrix instance. | Improve this Doc View Source CreateFromAxisAngle(Vector3, Single, out Matrix3) Build a rotation matrix from the specified axis/angle rotation. Declaration public static void CreateFromAxisAngle(Vector3 axis, float angle, out Matrix3 result) Parameters Type Name Description Vector3 axis The axis to rotate about. System.Single angle Angle in radians to rotate counter-clockwise (looking in the direction of the given axis). Matrix3 result A matrix instance. | Improve this Doc View Source CreateFromQuaternion(Quaternion) Build a rotation matrix from the specified quaternion. Declaration public static Matrix3 CreateFromQuaternion(Quaternion q) Parameters Type Name Description Quaternion q Quaternion to translate. Returns Type Description Matrix3 A matrix instance. | Improve this Doc View Source CreateFromQuaternion(ref Quaternion, out Matrix3) Build a rotation matrix from the specified quaternion. Declaration public static void CreateFromQuaternion(ref Quaternion q, out Matrix3 result) Parameters Type Name Description Quaternion q Quaternion to translate. Matrix3 result Matrix result. | Improve this Doc View Source CreateRotationX(Single) Builds a rotation matrix for a rotation around the x-axis. Declaration public static Matrix3 CreateRotationX(float angle) Parameters Type Name Description System.Single angle The counter-clockwise angle in radians. Returns Type Description Matrix3 The resulting Matrix3 instance. | Improve this Doc View Source CreateRotationX(Single, out Matrix3) Builds a rotation matrix for a rotation around the x-axis. Declaration public static void CreateRotationX(float angle, out Matrix3 result) Parameters Type Name Description System.Single angle The counter-clockwise angle in radians. Matrix3 result The resulting Matrix3 instance. | Improve this Doc View Source CreateRotationY(Single) Builds a rotation matrix for a rotation around the y-axis. Declaration public static Matrix3 CreateRotationY(float angle) Parameters Type Name Description System.Single angle The counter-clockwise angle in radians. Returns Type Description Matrix3 The resulting Matrix3 instance. | Improve this Doc View Source CreateRotationY(Single, out Matrix3) Builds a rotation matrix for a rotation around the y-axis. Declaration public static void CreateRotationY(float angle, out Matrix3 result) Parameters Type Name Description System.Single angle The counter-clockwise angle in radians. Matrix3 result The resulting Matrix3 instance. | Improve this Doc View Source CreateRotationZ(Single) Builds a rotation matrix for a rotation around the z-axis. Declaration public static Matrix3 CreateRotationZ(float angle) Parameters Type Name Description System.Single angle The counter-clockwise angle in radians. Returns Type Description Matrix3 The resulting Matrix3 instance. | Improve this Doc View Source CreateRotationZ(Single, out Matrix3) Builds a rotation matrix for a rotation around the z-axis. Declaration public static void CreateRotationZ(float angle, out Matrix3 result) Parameters Type Name Description System.Single angle The counter-clockwise angle in radians. Matrix3 result The resulting Matrix3 instance. | Improve this Doc View Source CreateScale(Vector3) Creates a scale matrix. Declaration public static Matrix3 CreateScale(Vector3 scale) Parameters Type Name Description Vector3 scale Scale factors for the x, y, and z axes. Returns Type Description Matrix3 A scale matrix. | Improve this Doc View Source CreateScale(ref Vector3, out Matrix3) Creates a scale matrix. Declaration public static void CreateScale(ref Vector3 scale, out Matrix3 result) Parameters Type Name Description Vector3 scale Scale factors for the x, y, and z axes. Matrix3 result A scale matrix. | Improve this Doc View Source CreateScale(Single) Creates a scale matrix. Declaration public static Matrix3 CreateScale(float scale) Parameters Type Name Description System.Single scale Single scale factor for the x, y, and z axes. Returns Type Description Matrix3 A scale matrix. | Improve this Doc View Source CreateScale(Single, out Matrix3) Creates a scale matrix. Declaration public static void CreateScale(float scale, out Matrix3 result) Parameters Type Name Description System.Single scale Single scale factor for the x, y, and z axes. Matrix3 result A scale matrix. | Improve this Doc View Source CreateScale(Single, Single, Single) Creates a scale matrix. Declaration public static Matrix3 CreateScale(float x, float y, float z) Parameters Type Name Description System.Single x Scale factor for the x axis. System.Single y Scale factor for the y axis. System.Single z Scale factor for the z axis. Returns Type Description Matrix3 A scale matrix. | Improve this Doc View Source CreateScale(Single, Single, Single, out Matrix3) Creates a scale matrix. Declaration public static void CreateScale(float x, float y, float z, out Matrix3 result) Parameters Type Name Description System.Single x Scale factor for the x axis. System.Single y Scale factor for the y axis. System.Single z Scale factor for the z axis. Matrix3 result A scale matrix. | Improve this Doc View Source Equals(Matrix3) Indicates whether the current matrix is equal to another matrix. Declaration public bool Equals(Matrix3 other) Parameters Type Name Description Matrix3 other A matrix to compare with this matrix. Returns Type Description System.Boolean true if the current matrix is equal to the matrix parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare to. Returns Type Description System.Boolean True if the instances are equal; false otherwise. Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source ExtractRotation(Boolean) Returns the rotation component of this instance. Quite slow. Declaration public Quaternion ExtractRotation(bool row_normalise = true) Parameters Type Name Description System.Boolean row_normalise Whether the method should row-normalise (i.e. remove scale from) the Matrix. Pass false if you know it's already normalised. Returns Type Description Quaternion | Improve this Doc View Source ExtractScale() Returns the scale component of this instance. Declaration public Vector3 ExtractScale() Returns Type Description Vector3 | Improve this Doc View Source GetHashCode() Returns the hashcode for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A System.Int32 containing the unique hashcode for this instance. Overrides System.ValueType.GetHashCode() | Improve this Doc View Source Invert() Converts this instance into its inverse. Declaration public void Invert() | Improve this Doc View Source Invert(Matrix3) Calculate the inverse of the given matrix Declaration public static Matrix3 Invert(Matrix3 mat) Parameters Type Name Description Matrix3 mat The matrix to invert Returns Type Description Matrix3 The inverse of the given matrix if it has one, or the input if it is singular Exceptions Type Condition System.InvalidOperationException Thrown if the Matrix4 is singular. | Improve this Doc View Source Invert(ref Matrix3, out Matrix3) Calculate the inverse of the given matrix Declaration public static void Invert(ref Matrix3 mat, out Matrix3 result) Parameters Type Name Description Matrix3 mat The matrix to invert Matrix3 result The inverse of the given matrix if it has one, or the input if it is singular Exceptions Type Condition System.InvalidOperationException Thrown if the Matrix3 is singular. | Improve this Doc View Source Inverted() Returns an inverted copy of this instance. Declaration public Matrix3 Inverted() Returns Type Description Matrix3 | Improve this Doc View Source Mult(Matrix3, Matrix3) Multiplies two instances. Declaration public static Matrix3 Mult(Matrix3 left, Matrix3 right) Parameters Type Name Description Matrix3 left The left operand of the multiplication. Matrix3 right The right operand of the multiplication. Returns Type Description Matrix3 A new instance that is the result of the multiplication | Improve this Doc View Source Mult(ref Matrix3, ref Matrix3, out Matrix3) Multiplies two instances. Declaration public static void Mult(ref Matrix3 left, ref Matrix3 right, out Matrix3 result) Parameters Type Name Description Matrix3 left The left operand of the multiplication. Matrix3 right The right operand of the multiplication. Matrix3 result A new instance that is the result of the multiplication | Improve this Doc View Source Normalize() Divides each element in the Matrix by the Determinant . Declaration public void Normalize() | Improve this Doc View Source Normalized() Returns a normalised copy of this instance. Declaration public Matrix3 Normalized() Returns Type Description Matrix3 | Improve this Doc View Source ToString() Returns a System.String that represents the current Matrix3d. Declaration public override string ToString() Returns Type Description System.String The string representation of the matrix. Overrides System.ValueType.ToString() | Improve this Doc View Source Transpose() Converts this instance into its transpose. Declaration public void Transpose() | Improve this Doc View Source Transpose(Matrix3) Calculate the transpose of the given matrix Declaration public static Matrix3 Transpose(Matrix3 mat) Parameters Type Name Description Matrix3 mat The matrix to transpose Returns Type Description Matrix3 The transpose of the given matrix | Improve this Doc View Source Transpose(ref Matrix3, out Matrix3) Calculate the transpose of the given matrix Declaration public static void Transpose(ref Matrix3 mat, out Matrix3 result) Parameters Type Name Description Matrix3 mat The matrix to transpose Matrix3 result The result of the calculation Operators | Improve this Doc View Source Equality(Matrix3, Matrix3) Compares two instances for equality. Declaration public static bool operator ==(Matrix3 left, Matrix3 right) Parameters Type Name Description Matrix3 left The first instance. Matrix3 right The second instance. Returns Type Description System.Boolean True, if left equals right; false otherwise. | Improve this Doc View Source Inequality(Matrix3, Matrix3) Compares two instances for inequality. Declaration public static bool operator !=(Matrix3 left, Matrix3 right) Parameters Type Name Description Matrix3 left The first instance. Matrix3 right The second instance. Returns Type Description System.Boolean True, if left does not equal right; false otherwise. | Improve this Doc View Source Multiply(Matrix3, Matrix3) Matrix multiplication Declaration public static Matrix3 operator *(Matrix3 left, Matrix3 right) Parameters Type Name Description Matrix3 left left-hand operand Matrix3 right right-hand operand Returns Type Description Matrix3 A new Matrix3d which holds the result of the multiplication Implements System.IEquatable<T>"
  },
  "api/AGS.API.MathUtils.html": {
    "href": "api/AGS.API.MathUtils.html",
    "title": "Class MathUtils | MonoAGS Documentation",
    "keywords": "Class MathUtils Inheritance System.Object MathUtils Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AGS.API Assembly : AGS.API.dll Syntax public static class MathUtils Methods | Improve this Doc View Source Clamp(Single, Single, Single) Clamps \"x\" to be between min and max. Declaration public static float Clamp(float x, float min, float max) Parameters Type Name Description System.Single x The x coordinate. System.Single min Minimum. System.Single max Maximum. Returns Type Description System.Single The clamp. | Improve this Doc View Source DegreesToRadians(Single) Converts degrees to radians. Declaration public static float DegreesToRadians(float degrees) Parameters Type Name Description System.Single degrees Degrees. Returns Type Description System.Single The radians. | Improve this Doc View Source Distance(PointF, PointF) Returns the distance between 2 points. Declaration public static float Distance(PointF p1, PointF p2) Parameters Type Name Description PointF p1 First point PointF p2 Second point Returns Type Description System.Single The distance between the points | Improve this Doc View Source FloatEquals(Single, Single) Compare two floating numbers (with tolerance, as this is the only sensible way to compare floats: http://floating-point-gui.de/ ). Declaration public static bool FloatEquals(float x, float y) Parameters Type Name Description System.Single x The x coordinate. System.Single y The y coordinate. Returns Type Description System.Boolean true , if equals was floated, false otherwise. | Improve this Doc View Source GetNextPowerOf2(Int32) Gets the next number after \"v\" which is a power of 2. Declaration public static int GetNextPowerOf2(int v) Parameters Type Name Description System.Int32 v The value. Returns Type Description System.Int32 The next power of 2. | Improve this Doc View Source IsPowerOf2(UInt32) Is \"x\" the power of 2? Declaration public static bool IsPowerOf2(uint x) Parameters Type Name Description System.UInt32 x The x coordinate. Returns Type Description System.Boolean true , if x is the power of 2, false otherwise. | Improve this Doc View Source Lerp(Single, Single, Single, Single, Single) Performs a linear interpolation between values ( https://en.wikipedia.org/wiki/Linear_interpolation ). Declaration public static float Lerp(float x1, float y1, float x2, float y2, float targetX) Parameters Type Name Description System.Single x1 The first x value. System.Single y1 The first y value. System.Single x2 The second x value. System.Single y2 The second y value. System.Single targetX Target x. Returns Type Description System.Single The interpolated value. | Improve this Doc View Source Max(Single[]) Returns the maximum between multiple values. Declaration public static float Max(params float[] values) Parameters Type Name Description System.Single [] values Values. Returns Type Description System.Single The max. | Improve this Doc View Source Min(Single[]) Returns a minimum between multiple values. Declaration public static float Min(params float[] values) Parameters Type Name Description System.Single [] values Values. Returns Type Description System.Single The minimum. | Improve this Doc View Source Random() Returns a thread local random number generator. Declaration public static Random Random() Returns Type Description System.Random The random number generator."
  },
  "api/AGS.API.ITextureCache.html": {
    "href": "api/AGS.API.ITextureCache.html",
    "title": "Interface ITextureCache | MonoAGS Documentation",
    "keywords": "Interface ITextureCache A single cache which stores all of the textures in a single place. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ITextureCache Methods | Improve this Doc View Source GetTexture(String, Func<String, ITexture>) Gets a texture (or creates a texture using the factory function if the texture doesn't exist). Declaration ITexture GetTexture(string id, Func<string, ITexture> factory) Parameters Type Name Description System.String id The texture id (path on the file system, for example). System.Func < System.String , ITexture > factory A function to create the texture if the texture does not exist already. Returns Type Description ITexture The texture. | Improve this Doc View Source RemoveTexture(String) Removes the texture from the cache. Declaration void RemoveTexture(string id) Parameters Type Name Description System.String id The texture id (path on the file system, for example). | Improve this Doc View Source TryGetTexture(String, out ITexture) Tries to get the texture. Declaration bool TryGetTexture(string id, out ITexture texture) Parameters Type Name Description System.String id The texture id (path on the file system, for example). ITexture texture The returned texture (or null if it doesn't exist). Returns Type Description System.Boolean true , if the texture exists, false otherwise."
  },
  "api/AGS.API.ITexture.html": {
    "href": "api/AGS.API.ITexture.html",
    "title": "Interface ITexture | MonoAGS Documentation",
    "keywords": "Interface ITexture Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ITexture Properties | Improve this Doc View Source Config Gets the configuration of the texture (scaling filter, should the texture be tiled or not). Declaration ITextureConfig Config { get; set; } Property Value Type Description ITextureConfig | Improve this Doc View Source ID Gets the texture identifier. Declaration int ID { get; } Property Value Type Description System.Int32"
  },
  "api/AGS.API.ISliderComponent.html": {
    "href": "api/AGS.API.ISliderComponent.html",
    "title": "Interface ISliderComponent | MonoAGS Documentation",
    "keywords": "Interface ISliderComponent A slider component allows selecting a numeric value between an allowed range, by dragging a handle across a line (usually). Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax [RequiredComponent(typeof(IBoundingBoxComponent), true)] [RequiredComponent(typeof(IDrawableInfoComponent), true)] [RequiredComponent(typeof(IInObjectTreeComponent), true)] [RequiredComponent(typeof(IVisibleComponent), true)] [RequiredComponent(typeof(IEnabledComponent), true)] [RequiredComponent(typeof(IUIEvents), true)] public interface ISliderComponent : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source AllowKeyboardControl Gets or sets a value indicating whether this ISliderComponent allows keyboard control for moving the slider when it is in focus (i.e after the user clicked on the slider). Default is true. Declaration bool AllowKeyboardControl { get; set; } Property Value Type Description System.Boolean true if allow keyboard control; otherwise, false . | Improve this Doc View Source Direction Gets or sets the direction of the slider. If, for example, the slider's direction is bottom-to-top then the minimum value will correspond with the bottom most location on the slider and the maximum value will correspond with the top most location on the slider. Declaration SliderDirection Direction { get; set; } Property Value Type Description SliderDirection true if is horizontal; otherwise, false . | Improve this Doc View Source Graphics Gets or sets the graphics of the slider (on which the handle will be dragged). Declaration IObject Graphics { get; set; } Property Value Type Description IObject The graphics. | Improve this Doc View Source HandleGraphics Gets or sets the handle graphics (the handle is the object the user drags to change the value). Declaration IObject HandleGraphics { get; set; } Property Value Type Description IObject The handle graphics. | Improve this Doc View Source Label Gets or sets an optional label which shows the value as text. Declaration ILabel Label { get; set; } Property Value Type Description ILabel The label. | Improve this Doc View Source MaxHandleOffset Gets or sets an offset for the handle to be placed from the maximum X/Y of the background image. This can be useful for properly aligning the handle to the background graphics. Declaration float MaxHandleOffset { get; set; } Property Value Type Description System.Single The minimum handle offset. | Improve this Doc View Source MaxValue Gets or sets the allowed maximum value. Declaration float MaxValue { get; set; } Property Value Type Description System.Single The max value. | Improve this Doc View Source MinHandleOffset Gets or sets an offset for the handle to be placed from the minimum X/Y of the background image. This can be useful for properly aligning the handle to the background graphics. Declaration float MinHandleOffset { get; set; } Property Value Type Description System.Single The minimum handle offset. | Improve this Doc View Source MinValue Gets or sets the allowed minimum value. Declaration float MinValue { get; set; } Property Value Type Description System.Single The minimum value. | Improve this Doc View Source OnValueChanged An event which is triggered when the slider value has changed. This only gets called after user finishes dragging the handle on the slider. For continous refreshes as the user drags the handle, OnValueChanging . Declaration IBlockingEvent<SliderValueEventArgs> OnValueChanged { get; } Property Value Type Description IBlockingEvent < SliderValueEventArgs > The on value changed. | Improve this Doc View Source OnValueChanging An event which is triggered when the slider value is changing. This will be fired continously as the user drags the handle on the slider. If you need an event which fires only when the user finishes dragging, OnValueChanged . Declaration IBlockingEvent<SliderValueEventArgs> OnValueChanging { get; } Property Value Type Description IBlockingEvent < SliderValueEventArgs > The on value changed. | Improve this Doc View Source ShouldClampValuesWhenChangingMinMax Gets or sets a value indicating whether this ISliderComponent should clamp the slider value to the minimum and/or maximum when those change. This is enabled by default. For example, if the slider value is 100 and I updated the maximum from 200 to 50, if this property is enabled, the value will automatically change to 50. If the property is disabled, the value will stay at 100. Declaration bool ShouldClampValuesWhenChangingMinMax { get; set; } Property Value Type Description System.Boolean true if should clamp values when changing minimum max; otherwise, false . | Improve this Doc View Source Value Gets or sets the slider's value. Note that the value will be clamped to MinValue and MaxValue (in other words, if you try to set a value above the maximum it will set it to the maximum, and the same for the minimum value). Declaration float Value { get; set; } Property Value Type Description System.Single The value. Methods | Improve this Doc View Source Decrease(Single) Decrease the the slider by the specified amount. This checks for a case where the value is above the maximum (could happen when ShouldClampValuesWhenChangingMinMax is false), and if true it decreases the value from the maximum and not from the current value. Declaration void Decrease(float step) Parameters Type Name Description System.Single step Step. | Improve this Doc View Source Increase(Single) Increase the the slider by the specified amount. This checks for a case where the value is below the minimum (could happen when ShouldClampValuesWhenChangingMinMax is false), and if true it increases the value from the minimum and not from the current value. Declaration void Increase(float step) Parameters Type Name Description System.Single step Step. | Improve this Doc View Source IsHorizontal() Is the slider horizontal ( RightToLeft or LeftToRight ) or vertical ( TopToBottom or BottomToTop )? Declaration bool IsHorizontal() Returns Type Description System.Boolean true , if the slider is horizontal, false otherwise."
  },
  "api/AGS.API.ISlider.html": {
    "href": "api/AGS.API.ISlider.html",
    "title": "Interface ISlider | MonoAGS Documentation",
    "keywords": "Interface ISlider A pre-set entity with all of the UI control components, plus a slider component, for selecting a numeric value within an allowed range. Inherited Members ISliderComponent.Graphics ISliderComponent.HandleGraphics ISliderComponent.Label ISliderComponent.MinValue ISliderComponent.MaxValue ISliderComponent.Value ISliderComponent.MinHandleOffset ISliderComponent.MaxHandleOffset ISliderComponent.AllowKeyboardControl ISliderComponent.ShouldClampValuesWhenChangingMinMax ISliderComponent.Direction ISliderComponent.OnValueChanged ISliderComponent.OnValueChanging ISliderComponent.Increase(Single) ISliderComponent.Decrease(Single) ISliderComponent.IsHorizontal() IUIEvents.MouseEnter IUIEvents.MouseLeave IUIEvents.MouseMove IUIEvents.MouseClicked IUIEvents.MouseDoubleClicked IUIEvents.MouseDown IUIEvents.MouseUp IUIEvents.LostFocus IUIEvents.IsMouseIn ISkinComponent.Skin ISkinComponent.SkinTags IEntity.ID IEntity.DisplayName IEntity.GetFriendlyName() IComponentsCollection.AddComponent<TComponent>() IComponentsCollection.AddComponent(Type) IComponentsCollection.AddComponent<TComponent>(IComponent) IComponentsCollection.RemoveComponent<TComponent>() IComponentsCollection.RemoveComponent(Type) IComponentsCollection.RemoveComponent(IComponent) IComponentsCollection.PopComponent<TComponent>() IComponentsCollection.HasComponent<TComponent>() IComponentsCollection.HasComponent(Type) IComponentsCollection.HasComponent(IComponent) IComponentsCollection.GetComponent<TComponent>() IComponentsCollection.GetComponent(Type) IComponentsCollection.Bind<TComponent>(Action<TComponent>, Action<TComponent>) IComponentsCollection.Count IComponentsCollection.ComponentsInitialized IComponentsCollection.OnComponentsInitialized IComponentsCollection.OnComponentsChanged IComponentsCollection.OnDisposed(Action) System.Collections.Generic.IEnumerable<AGS.API.IComponent>.GetEnumerator() IHasRoomComponent.Room IHasRoomComponent.PreviousRoom IHasRoomComponent.OnRoomChanged IHasRoomComponent.ChangeRoomAsync(IRoom, Nullable<Single>, Nullable<Single>) IAnimationComponent.Animation IAnimationComponent.OnAnimationStarted IAnimationComponent.StartAnimation(IAnimation) IAnimationComponent.Animate(IAnimation) IAnimationComponent.AnimateAsync(IAnimation) IInTree<IObject>.TreeNode IColliderComponent.CenterPoint IColliderComponent.CollidesWith(Single, Single, IViewport) IVisibleComponent.Visible IVisibleComponent.UnderlyingVisible IEnabledComponent.Enabled IEnabledComponent.UnderlyingEnabled IEnabledComponent.ClickThrough ICustomPropertiesComponent.Properties IDrawableInfoComponent.RenderLayer IDrawableInfoComponent.IgnoreViewport IDrawableInfoComponent.IgnoreScalingArea IShaderComponent.Shader IImageComponent.IsImageVisible IImageComponent.CurrentSprite IImageComponent.SpriteProvider IBorderComponent.Border IPixelPerfectComponent.IsPixelPerfect IPixelPerfectCollidable.PixelPerfectHitTestArea IScale.Height IScale.Width IScale.ScaleX IScale.ScaleY IScale.Scale IScale.BaseSize IScale.ResetScale() IScale.ResetScale(Single, Single) IScale.ScaleTo(Single, Single) IScale.FlipHorizontally() IScale.FlipVertically() IRotate.Angle ITranslate.Position ITranslate.X ITranslate.Y ITranslate.Z IHasImage.Opacity IHasImage.Tint IHasImage.Brightness IHasImage.Pivot IHasImage.Image IModelMatrixComponent.GetModelMatrices() IModelMatrixComponent.OnMatrixChanged IModelMatrixComponent.ModelMatrixLockStep IBoundingBoxComponent.GetBoundingBoxes(IViewport) IBoundingBoxComponent.WorldBoundingBox IBoundingBoxComponent.OnBoundingBoxesChanged IBoundingBoxComponent.BoundingBoxLockStep IWorldPositionComponent.WorldX IWorldPositionComponent.WorldY IWorldPositionComponent.WorldXY IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ISlider : ISliderComponent, IUIControl, IUIEvents, ISkinComponent, IObject, IEntity, IComponentsCollection, IEnumerable<IComponent>, IEnumerable, IHasRoomComponent, IAnimationComponent, IInObjectTreeComponent, IInTree<IObject>, IColliderComponent, IVisibleComponent, IEnabledComponent, ICustomPropertiesComponent, IDrawableInfoComponent, IShaderComponent, ITranslateComponent, IImageComponent, IBorderComponent, IScaleComponent, IRotateComponent, IPixelPerfectComponent, IPixelPerfectCollidable, IHasModelMatrix, IScale, IRotate, ITranslate, IHasImage, IModelMatrixComponent, IBoundingBoxComponent, IWorldPositionComponent, IComponent, IDisposable, INotifyPropertyChanged"
  },
  "api/AGS.API.ISkinComponent.html": {
    "href": "api/AGS.API.ISkinComponent.html",
    "title": "Interface ISkinComponent | MonoAGS Documentation",
    "keywords": "Interface ISkinComponent Allows skinning (providing a common custom theme to) an entity. It's usually used for GUIs. For example, you might have a blue themed skin which gives all controls a common blue-ish look. Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ISkinComponent : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source Skin Gets or sets the skin used by the entity. Declaration ISkin Skin { get; set; } Property Value Type Description ISkin The skin. | Improve this Doc View Source SkinTags A collection of tags that can be used by the skin to distinguish between different entities. Declaration IConcurrentHashSet<string> SkinTags { get; } Property Value Type Description IConcurrentHashSet < System.String > The skin tags."
  },
  "api/AGS.API.ISkin.html": {
    "href": "api/AGS.API.ISkin.html",
    "title": "Interface ISkin | MonoAGS Documentation",
    "keywords": "Interface ISkin Allows skinning (providing a common custom theme to) an entity. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ISkin Methods | Improve this Doc View Source Apply(IEntity) Apply the skin to the specified entity. Declaration void Apply(IEntity entity) Parameters Type Name Description IEntity entity Entity."
  },
  "api/AGS.API.IShouldBlockInput.html": {
    "href": "api/AGS.API.IShouldBlockInput.html",
    "title": "Interface IShouldBlockInput | MonoAGS Documentation",
    "keywords": "Interface IShouldBlockInput This interface is used when processing input to determine whether input should be allowed and processed. For example, when the room is in transition, input is not allowed. You can change the behavior of when input is allowed or not by overriding this interface and hooking it up with the Resolver. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IShouldBlockInput Methods | Improve this Doc View Source ShouldBlockInput() Whenever there's an input event (user presses a key, clicks a mouse button, touches the screen, etc) this method will be queried to see if input is allowed to be processed currently. Declaration bool ShouldBlockInput() Returns Type Description System.Boolean true , if block input was shoulded, false otherwise."
  },
  "api/AGS.API.IShaderFactory.html": {
    "href": "api/AGS.API.IShaderFactory.html",
    "title": "Interface IShaderFactory | MonoAGS Documentation",
    "keywords": "Interface IShaderFactory Factory for creating shaders ( IShader ). Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IShaderFactory Methods | Improve this Doc View Source FromResource(String, String) Creates a shader asynchronously from the source code of the vertex and fragment shaders, which should be passed as the paths for the shader files (either an embedded resource path or a file system path). Declaration Task<IShader> FromResource(string vertexResource, string fragmentResource) Parameters Type Name Description System.String vertexResource Vertex resource path (pass null for using the standard vertex shader). System.String fragmentResource Fragment resource path (pass null for using the standard fragment shader). Returns Type Description System.Threading.Tasks.Task < IShader > The shader. | Improve this Doc View Source FromText(String, String) Creates a shader from the source code of the vertex and fragment shaders, which should be passed as regular text. Declaration IShader FromText(string vertexSource, string fragmentSource) Parameters Type Name Description System.String vertexSource Vertex source (pass null for using the standard vertex shader). System.String fragmentSource Fragment source (pass null for using the standard fragment shader). Returns Type Description IShader The shader."
  },
  "api/AGS.API.IShaderComponent.html": {
    "href": "api/AGS.API.IShaderComponent.html",
    "title": "Interface IShaderComponent | MonoAGS Documentation",
    "keywords": "Interface IShaderComponent This component provides a way to attach a shader to your entities Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IShaderComponent : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source Shader Gets or sets the shader that is attached to the entity. Declaration IShader Shader { get; set; } Property Value Type Description IShader The shader. See Also IComponent"
  },
  "api/AGS.API.IShader.html": {
    "href": "api/AGS.API.IShader.html",
    "title": "Interface IShader | MonoAGS Documentation",
    "keywords": "Interface IShader Represents a shader which is a user defined program that can be written to directly affect what's rendered on the screen. See here: https://www.opengl.org/wiki/Shader We're currently supporting vertex & fragment shaders. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IShader Properties | Improve this Doc View Source ProgramId Gets the program identifier for the shader (used by GLSL). Declaration int ProgramId { get; } Property Value Type Description System.Int32 The program identifier. Methods | Improve this Doc View Source Bind() Binds the shader. This must be performed from the rendering thread. Once the shader is bound, all rendering activities will run through the shader until it is unbound (or when another shader is bound). Setting variables for the shader must also be performed when the shader is bound. Declaration void Bind() Examples //assuming shader was already successfully compiled... shader.Bind(); //shader is now in control! | Improve this Doc View Source Compile(ShaderVarsBuffer[]) Compiles this shader. Declaration IShader Compile(params ShaderVarsBuffer[] shaderVars) Parameters Type Name Description ShaderVarsBuffer [] shaderVars The variables that the shader accepts (in the order they are written in the shader). Returns Type Description IShader Will return itself if compiled successfully or null if there are compilation errors (those will be logged to the screen). Examples A common pattern will look like this: const string VERTEX_SHADER = \"GLSL vertex shader code goes here\"; const string FRAGMENT_SHADER = \"GLSL fragment shader code goes here\"; IShader shader = GLShader.FromText(VERTEX_SHADER, FRAGMENT_SHADER).Compile(); if (shader == null) { //oh oh, it did not compile! } There's also a possibility of loading the shader from a resource/file: IShader shader = await GLShader.FromResource(\"vertexShader.glsl\", \"fragmentShader.glsl\"); | Improve this Doc View Source SetTextureVariable(String, Int32) Sets a texture variable in the shader program. Declaration bool SetTextureVariable(string name, int texture) Parameters Type Name Description System.String name The name. System.Int32 texture The texture. Returns Type Description System.Boolean True if the variable was found and set | Improve this Doc View Source SetVariable(String, Color) Sets a color variable in the shader program (GLSL sees it as a 4d vector). This is just a convenience method that can be used instead of the 4d version for colors. Declaration bool SetVariable(string name, Color c) Parameters Type Name Description System.String name The name of the variable. Color c The color. Returns Type Description System.Boolean True if the variable was found and set Examples //In GLSL shader: uniform vec4 myColor; //Do stuff with myColor... ... ... //In AGS code: shader.Bind(); shader.SetVariable(\"myColor\", Colors.White); | Improve this Doc View Source SetVariable(String, Single) Sets a float variable in the shader program. Declaration bool SetVariable(string name, float x) Parameters Type Name Description System.String name The name of the variable. System.Single x The value. Returns Type Description System.Boolean True if the variable was found and set Examples //In GLSL shader: uniform float myVariable; //Do stuff with myVariable... ... ... //In AGS code: shader.Bind(); shader.SetVariable(\"myVariable\", 5.5f); | Improve this Doc View Source SetVariable(String, Single, Single) Sets a 2d vector variable in the shader program. Declaration bool SetVariable(string name, float x, float y) Parameters Type Name Description System.String name The name of the variable. System.Single x The x value. System.Single y The y value. Returns Type Description System.Boolean True if the variable was found and set Examples //In GLSL shader: uniform vec2 myVariable; //Do stuff with myVariable... ... ... //In AGS code: shader.Bind(); shader.SetVariable(\"myVariable\", 5.5f, 3f); | Improve this Doc View Source SetVariable(String, Single, Single, Single) Sets a 3d vector variable in the shader program. Declaration bool SetVariable(string name, float x, float y, float z) Parameters Type Name Description System.String name The name of the variable. System.Single x The x value. System.Single y The y value. System.Single z The z value. Returns Type Description System.Boolean True if the variable was found and set Examples //In GLSL shader: uniform vec3 myVariable; //Do stuff with myVariable... ... ... //In AGS code: shader.Bind(); shader.SetVariable(\"myVariable\", 5.5f, 3f, 0.1f); | Improve this Doc View Source SetVariable(String, Single, Single, Single, Single) Sets a 4d vector variable in the shader program. Declaration bool SetVariable(string name, float x, float y, float z, float w) Parameters Type Name Description System.String name The name of the variable. System.Single x The x value. System.Single y The y value. System.Single z The z value. System.Single w The w value. Returns Type Description System.Boolean True if the variable was found and set Examples //In GLSL shader: uniform vec4 myVariable; //Do stuff with myVariable... ... ... //In AGS code: shader.Bind(); shader.SetVariable(\"myVariable\", 5.5f, 3f, 0.1f, 2.5f); | Improve this Doc View Source Unbind() Unbinds this shader, leaving control to the normal renderer. This must be performed from the rendering thread. Declaration void Unbind() Examples shader.Bind(); //shader is now in control! await Task.Delay(2000); shader.Unbind(); //shader is done, back to normal rendering."
  },
  "api/AGS.API.ISelectableIcon.html": {
    "href": "api/AGS.API.ISelectableIcon.html",
    "title": "Interface ISelectableIcon | MonoAGS Documentation",
    "keywords": "Interface ISelectableIcon An icon which has two modes: selected and not selected. Inherited Members IBorderStyle.RenderBorderBack(AGSBoundingBox) IBorderStyle.RenderBorderFront(AGSBoundingBox) IBorderStyle.WidthLeft IBorderStyle.WidthRight IBorderStyle.WidthTop IBorderStyle.WidthBottom Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ISelectableIcon : IBorderStyle Properties | Improve this Doc View Source IsSelected Gets or sets a value indicating whether this ISelectableIcon is selected. Declaration bool IsSelected { get; set; } Property Value Type Description System.Boolean true if is selected; otherwise, false ."
  },
  "api/AGS.API.IScrollingComponent.html": {
    "href": "api/AGS.API.IScrollingComponent.html",
    "title": "Interface IScrollingComponent | MonoAGS Documentation",
    "keywords": "Interface IScrollingComponent This component gives the ability to attach scrollbars to an entity, which will then scroll the content (i.e the children) of the entity. Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax [RequiredComponent(typeof(ICropChildrenComponent), true)] [RequiredComponent(typeof(IBoundingBoxWithChildrenComponent), false)] [RequiredComponent(typeof(IBoundingBoxComponent), false)] public interface IScrollingComponent : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source ContentsHeight Gets or sets the height of the contents (or leave as null to auto-detect). Declaration float? ContentsHeight { get; set; } Property Value Type Description System.Nullable < System.Single > The height of the contents. | Improve this Doc View Source ContentsWidth Gets or sets the width of the contents (or leave as null to auto-detect). Declaration float? ContentsWidth { get; set; } Property Value Type Description System.Nullable < System.Single > The width of the contents. | Improve this Doc View Source HorizontalScrollBar Gets or sets the horizontal scroll bar. Declaration IScrollbar HorizontalScrollBar { get; set; } Property Value Type Description IScrollbar The horizontal scroll bar. | Improve this Doc View Source VerticalScrollBar Gets or sets the vertical scroll bar. Declaration IScrollbar VerticalScrollBar { get; set; } Property Value Type Description IScrollbar The vertical scroll bar."
  },
  "api/AGS.API.IScrollbar.html": {
    "href": "api/AGS.API.IScrollbar.html",
    "title": "Interface IScrollbar | MonoAGS Documentation",
    "keywords": "Interface IScrollbar A scrollbar is a ISlider with 2 buttons (left + right or up + down depending on which SliderDirection is used) that can be clicked to modify the slider. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IScrollbar Properties | Improve this Doc View Source DownButton The down button (if the slider is vertical), or right button (if the slider is horizontal). Declaration IButton DownButton { get; } Property Value Type Description IButton Down button. | Improve this Doc View Source Slider Gets the slider. Declaration ISlider Slider { get; } Property Value Type Description ISlider The slider. | Improve this Doc View Source Step Gets or sets the step- the amount to move the slider when clicking the buttons. Declaration float Step { get; set; } Property Value Type Description System.Single The step. | Improve this Doc View Source UpButton The up button (if the slider is vertical), or left button (if the slider is horizontal). Declaration IButton UpButton { get; } Property Value Type Description IButton Up button."
  },
  "api/AGS.API.IScalingArea.html": {
    "href": "api/AGS.API.IScalingArea.html",
    "title": "Interface IScalingArea | MonoAGS Documentation",
    "keywords": "Interface IScalingArea This component adds the ability for an area to automatically scale each object/character within it (and also 'scale' the volume of sounds coming from that object). The most common use is for faking perspective, so that when a character walks to the top of the screen (closer to the horizon), he will appear smaller and make quieter sounds. For that common use case, you'll want to scale on the Y axis (which is why Y axis is the default), and scale both the object x && y (to keep the aspect ration in tact). Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax [RequiredComponent(typeof(IArea), true)] public interface IScalingArea : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source Axis Gets or sets the axis for the scaling. If the axis is y (the default), the scaling will be adjusted based on where the object is located on the area's vertical axis (so most common use is for fake perspective). If the axis is x, the scaling will be adjusted based on where the object is located on the area's horizontal axis. Declaration ScalingAxis Axis { get; set; } Property Value Type Description ScalingAxis The axis. | Improve this Doc View Source MaxScaling Gets or sets the maximum scaling for this area. if the scaling axis is Y (the default), this is the scaling that will be performed at the very bottom of the area. if the scaling axis is X, this is the scaling that will be performed at the very right of the area. Note that if for some reason you want the opposite behavior for either of the axis, you can make MaxScaling smaller than MinScaling. Declaration float MaxScaling { get; set; } Property Value Type Description System.Single The max scaling. | Improve this Doc View Source MinScaling Gets or sets the minimum scaling for this area. if the scaling axis is Y (the default), this is the scaling that will be performed at the very top of the area. if the scaling axis is X, this is the scaling that will be performed at the very left of the area. Note that if for some reason you want the opposite behavior for either of the axis, you can make MaxScaling smaller than MinScaling. Declaration float MinScaling { get; set; } Property Value Type Description System.Single The minimum scaling. | Improve this Doc View Source ScaleObjectsX Gets or sets a value indicating whether this IScalingArea should scale objects x. Usually you'll want both ScaleObjectsX and ScaleObjectsY to be on, but you can turn on only one of them to achieve a stretching effect. Declaration bool ScaleObjectsX { get; set; } Property Value Type Description System.Boolean true if scale objects x; otherwise, false . | Improve this Doc View Source ScaleObjectsY Gets or sets a value indicating whether this IScalingArea should scale objects y. Usually you'll want both ScaleObjectsX and ScaleObjectsY to be on, but you can turn on only one of them to achieve a stretching effect. Declaration bool ScaleObjectsY { get; set; } Property Value Type Description System.Boolean true if scale objects x; otherwise, false . | Improve this Doc View Source ScaleVolume Gets or sets a value indicating whether this IScalingArea should scale the volume. Declaration bool ScaleVolume { get; set; } Property Value Type Description System.Boolean true if scale volume; otherwise, false . Methods | Improve this Doc View Source GetScaling(Single) Gets the scaling based on a linear interpolation of the value into the vertical area (if the axis is y) or the horizontal area (if the axis is x). When calling this method, you should pass an x value if the axis is x and a y value if the axis is y. Declaration float GetScaling(float value) Parameters Type Name Description System.Single value Value. Returns Type Description System.Single The scaling."
  },
  "api/AGS.API.IScaleComponent.html": {
    "href": "api/AGS.API.IScaleComponent.html",
    "title": "Interface IScaleComponent | MonoAGS Documentation",
    "keywords": "Interface IScaleComponent Allows scaling (changing the size of) an entity. Inherited Members IScale.Height IScale.Width IScale.ScaleX IScale.ScaleY IScale.Scale IScale.BaseSize IScale.ResetScale() IScale.ResetScale(Single, Single) IScale.ScaleTo(Single, Single) IScale.FlipHorizontally() IScale.FlipVertically() IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax [RequiredComponent(typeof(IImageComponent), true)] public interface IScaleComponent : IScale, IComponent, IDisposable, INotifyPropertyChanged"
  },
  "api/AGS.API.IScale.html": {
    "href": "api/AGS.API.IScale.html",
    "title": "Interface IScale | MonoAGS Documentation",
    "keywords": "Interface IScale Allows scaling (changing the size of) entities/sprites. Inherited Members System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IScale : INotifyPropertyChanged Properties | Improve this Doc View Source BaseSize Gets or sets the base size (the \"original\" size), on top of which the scale is calculated. Declaration SizeF BaseSize { get; set; } Property Value Type Description SizeF The size of the base. | Improve this Doc View Source Height Gets the height (in pixels). Declaration float Height { get; } Property Value Type Description System.Single The height. | Improve this Doc View Source Scale Scales the size by a factor. The factor is calculated on top of the original size, not the current size. (1,1) is the default, meaning no scale. Declaration PointF Scale { get; set; } Property Value Type Description PointF Examples sprite.ResetScale(10f,10f); sprite.Scale = new PointF(2f, 1f); Debug.WriteLine(\"Size of sprite is ({0},{1})\", sprite.Width, sprite.Height); //prints \"Size of sprite is (20,10)\" sprite.Scale = new PointF(3f, 4f); Debug.WriteLine(\"Size of sprite is ({0},{1})\", sprite.Width, sprite.Height); //prints \"Size of sprite is (30,40)\" | Improve this Doc View Source ScaleX Gets or sets the current horizontal scale (1 by default- meaning no scale). The scaling is calculated based on the original size, meaning that ScaleX * BaseSize .Width = Width . Declaration float ScaleX { get; set; } Property Value Type Description System.Single The scale x. | Improve this Doc View Source ScaleY Gets or sets the current vertical scale (1 by default- meaning no scale). The scaling is calculated based on the original size, meaning that ScaleY * BaseSize .Height = Height . Declaration float ScaleY { get; set; } Property Value Type Description System.Single The scale y. | Improve this Doc View Source Width Gets the width (in pixels). Declaration float Width { get; } Property Value Type Description System.Single The width. Methods | Improve this Doc View Source FlipHorizontally() Flips the scale horizontally (this is done by negating ScaleX and Pivot 's X). Declaration void FlipHorizontally() | Improve this Doc View Source FlipVertically() Flips the scale vertucally (this is done by negating ScaleY and Pivot 's Y). Declaration void FlipVertically() | Improve this Doc View Source ResetScale() Resets the scale to (1,1), i.e no scaling. Declaration void ResetScale() | Improve this Doc View Source ResetScale(Single, Single) Resets the base size (the \"original\" size, BaseSize ) to the specified scale, and then resets the scale to (1,1), i.e no scaling. Declaration void ResetScale(float initialWidth, float initialHeight) Parameters Type Name Description System.Single initialWidth Initial width. System.Single initialHeight Initial height. | Improve this Doc View Source ScaleTo(Single, Single) Scales the size to a specific size. This will change ScaleX and ScaleY to fit. Declaration void ScaleTo(float width, float height) Parameters Type Name Description System.Single width Width. System.Single height Height. Examples sprite.ResetScale(10f,10f); sprite.ScaleTo(20f,30f); Debug.WriteLine(\"Sprite is scaled by ({0},{1})\", sprite.ScaleX, sprite.ScaleY); //prints \"Sprite is scaled by (2,3)\""
  },
  "api/AGS.API.ISayLocationProvider.html": {
    "href": "api/AGS.API.ISayLocationProvider.html",
    "title": "Interface ISayLocationProvider | MonoAGS Documentation",
    "keywords": "Interface ISayLocationProvider This is called every time a character speaks to determine the location on the screen on which the text (and the portrait, if portrait rendering is desired) will be rendered. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ISayLocationProvider Methods | Improve this Doc View Source GetLocation(String, ISayConfig) Gets the location to render the text and possibly portrait. Declaration ISayLocation GetLocation(string text, ISayConfig config) Parameters Type Name Description System.String text Text. ISayConfig config Speech configuration, some of it might affect the returned location (like text alignment and padding). Returns Type Description ISayLocation The location."
  },
  "api/AGS.API.ISayLocation.html": {
    "href": "api/AGS.API.ISayLocation.html",
    "title": "Interface ISayLocation | MonoAGS Documentation",
    "keywords": "Interface ISayLocation Represents a location of where to render said text, and where to render a portrait (if a portrait should be rendered). Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ISayLocation Properties | Improve this Doc View Source PortraitLocation Gets the location of where the portrait is to be rendered (or null for no portrait rendering). Declaration PointF? PortraitLocation { get; } Property Value Type Description System.Nullable < PointF > The portrait location. | Improve this Doc View Source TextLocation Gets the location of where the text is to be rendered. Declaration PointF TextLocation { get; } Property Value Type Description PointF The text location."
  },
  "api/AGS.API.IRoomTransition.html": {
    "href": "api/AGS.API.IRoomTransition.html",
    "title": "Interface IRoomTransition | MonoAGS Documentation",
    "keywords": "Interface IRoomTransition This interface allows you to create custom room transitions, to build all kinds of special effects when transitioning from room to room. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IRoomTransition Methods | Improve this Doc View Source RenderAfterEnteringRoom(List<IObject>) Will be called repeatedly after entering the new room, up until this function will return false. Once this function returns false, room rendering returns to AGS for a normal rendering loop (the transition is completed). Declaration bool RenderAfterEnteringRoom(List<IObject> displayList) Parameters Type Name Description System.Collections.Generic.List < IObject > displayList The display list of the room we are leaving. The display list contains all objects that are rendered in the scene, sorted by their order. Returns Type Description System.Boolean true , if we still want control, false otherwise. | Improve this Doc View Source RenderBeforeLeavingRoom(List<IObject>) Will be called repeatedly before leaving the first room, up until this function will return false. Declaration bool RenderBeforeLeavingRoom(List<IObject> displayList) Parameters Type Name Description System.Collections.Generic.List < IObject > displayList The display list of the room we are leaving. The display list contains all objects that are rendered in the scene, sorted by their order. Returns Type Description System.Boolean true , if we still want control, false otherwise. | Improve this Doc View Source RenderTransition(IFrameBuffer, IFrameBuffer) Will be called repeatedly during the rooms transition, up until this function will return false. Declaration bool RenderTransition(IFrameBuffer from, IFrameBuffer to) Parameters Type Name Description IFrameBuffer from A screenshot of the room that we are leaving. IFrameBuffer to A screenshot of the room that we entering into. Returns Type Description System.Boolean true , if we still want control, false otherwise. Examples Let's render the \"old\" screenshot with half opacity over the \"new\" screenshot: QuadVectors _screenVectors = new QuadVectors(AGSGame.Game); //will create a quad covering the entire screen public bool RenderTransition(IFrameBuffer from, IFrameBuffer to) { _screenVectors.Render(to.Texture); _screenVectors.Render(from.Texture, a: 0.5f); return true; //Note that this room transition will never end if we always return true, at some point we need to return false... }"
  },
  "api/AGS.API.IRoomProvider.html": {
    "href": "api/AGS.API.IRoomProvider.html",
    "title": "Interface IRoomProvider | MonoAGS Documentation",
    "keywords": "Interface IRoomProvider Provides a room. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IRoomProvider Properties | Improve this Doc View Source Room The current room. Declaration IRoom Room { get; } Property Value Type Description IRoom The room."
  },
  "api/AGS.API.IRoomLimitsProvider.html": {
    "href": "api/AGS.API.IRoomLimitsProvider.html",
    "title": "Interface IRoomLimitsProvider | MonoAGS Documentation",
    "keywords": "Interface IRoomLimitsProvider Allow providing custom room limits. The room limits are used to limit the camera from moving too much to the left or to the right. By default the room limits are bound to the room background size and start from (0,0), however this can be changed by setting a custom room limits provider to a room. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IRoomLimitsProvider Methods | Improve this Doc View Source ProvideRoomLimits(IRoom) Provides the room limits (a rectangle that defines the room area). Declaration RectangleF ProvideRoomLimits(IRoom room) Parameters Type Name Description IRoom room The room for which limits should be provided. Returns Type Description RectangleF The room limits. See Also RoomLimitsProvider"
  },
  "api/AGS.API.IRoomFactory.html": {
    "href": "api/AGS.API.IRoomFactory.html",
    "title": "Interface IRoomFactory | MonoAGS Documentation",
    "keywords": "Interface IRoomFactory Factory for creating rooms and room specifics. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IRoomFactory Methods | Improve this Doc View Source CreateScaleArea(IArea, Single, Single, Boolean, Boolean, Boolean) Creates a scaling area( IScalingArea ). Declaration void CreateScaleArea(IArea area, float minScaling, float maxScaling, bool scaleObjectsX = true, bool scaleObjectsY = true, bool scaleVolume = true) Parameters Type Name Description IArea area The area that will be \"transormed\" into a scaling area. System.Single minScaling Minimum scaling (will be applied at the top of the area). System.Single maxScaling Maximum scaling (will be applied at the bottom of the area). System.Boolean scaleObjectsX If set to true scale objects on the horizontal axis while in this area. System.Boolean scaleObjectsY If set to true scale objects on the vertical axis while in this area. System.Boolean scaleVolume If set to true scale volume emitted from objects when in this area. | Improve this Doc View Source CreateZoomArea(IArea, Single, Single) Creates a camera zoom area( IZoomArea ). Declaration void CreateZoomArea(IArea area, float minZoom, float maxZoom) Parameters Type Name Description IArea area The area that will be \"transformed\" into a zoom area. System.Single minZoom Minimum zoom factor (will be applied at the bottom of the area). System.Single maxZoom Maximum zoom factor (will be applied at the top of the area). | Improve this Doc View Source GetArea(String, IMask, IRoom, Boolean, Boolean) Creates an area from a mask, which can be made walkable and/or walk-behind (or none of the above). A walkable area is an area in which characters can walk. A walk-behind area is an area which puts the characters behind the room's background, if their Y property is under the walk-behind area's baseline (usually the bottom of the mask). This is useful if part of your background image contains spots which should actually be in the front. Declaration IArea GetArea(string id, IMask mask, IRoom room = null, bool isWalkable = false, bool isWalkBehind = false) Parameters Type Name Description System.String id Unique identifier for the area. IMask mask Mask. IRoom room The room to place the area in. System.Boolean isWalkable If set to true is walkable. System.Boolean isWalkBehind If set to true is walk behind. Returns Type Description IArea The area. | Improve this Doc View Source GetArea(String, IMask, Boolean, Boolean, Boolean, Single, Single, Boolean, Single, Single, IRoom) Creates an area from a mask, which can be made walkable, walk-behind, scaling or zoom area (and any combination of the above). A walkable area is an area in which characters can walk. A walk-behind area is an area which puts the characters behind the room's background, if their Y property is under the walk-behind area's baseline (usually the bottom of the mask). This is useful if part of your background image contains spots which should actually be in the front. A scaling area is an area which scales the entities that are in it based on where they are in that area. A zoom area is an area that zooms the camera if the camera's target is in that area, based on where the target is exactly inside the area. Declaration IArea GetArea(string id, IMask mask, bool isWalkable, bool isWalkbehind, bool isScaling, float minScaling, float maxScaling, bool isZoom, float minZoom, float maxZoom, IRoom room = null) Parameters Type Name Description System.String id Identifier. IMask mask Mask. System.Boolean isWalkable If set to true is walkable. System.Boolean isWalkbehind If set to true is walkbehind. System.Boolean isScaling If set to true is scaling. System.Single minScaling Minimum scaling. System.Single maxScaling Max scaling. System.Boolean isZoom If set to true is zoom. System.Single minZoom Minimum zoom. System.Single maxZoom Max zoom. IRoom room Room. Returns Type Description IArea The area. | Improve this Doc View Source GetArea(String, IRoom, Boolean, Boolean) Creates an area, which can be made walkable and/or walk-behind (or none of the above). A walkable area is an area in which characters can walk. A walk-behind area is an area which puts the characters behind the room's background, if their Y property is under the walk-behind area's baseline (usually the bottom of the mask). This is useful if part of your background image contains spots which should actually be in the front. Declaration IArea GetArea(string maskPath, IRoom room = null, bool isWalkable = false, bool isWalkBehind = false) Parameters Type Name Description System.String maskPath The resource path which contains the bitmap mask for the area. IRoom room The room to place the area in. System.Boolean isWalkable If set to true the area should be made walkable. System.Boolean isWalkBehind If set to true the should be made a walk-behind area. Returns Type Description IArea The area. | Improve this Doc View Source GetAreaAsync(String, IRoom, Boolean, Boolean) Creates an area asynchronously, which can be made walkable and/or walk-behind (or none of the above). A walkable area is an area in which characters can walk. A walk-behind area is an area which puts the characters behind the room's background, if their Y property is under the walk-behind area's baseline (usually the bottom of the mask). This is useful if part of your background image contains spots which should actually be in the front. Declaration Task<IArea> GetAreaAsync(string maskPath, IRoom room = null, bool isWalkable = false, bool isWalkBehind = false) Parameters Type Name Description System.String maskPath The resource path which contains the bitmap mask for the area. IRoom room The room to place the area in. System.Boolean isWalkable If set to true the area should be made walkable. System.Boolean isWalkBehind If set to true the should be made a walk-behind area. Returns Type Description System.Threading.Tasks.Task < IArea > The area. | Improve this Doc View Source GetEdge(Single) Creates a new room edge. Declaration IEdge GetEdge(float value = 0F) Parameters Type Name Description System.Single value The value for the edge (if this is a left edge, the the left value, for a top edge, the top value, etc). Returns Type Description IEdge The edge. | Improve this Doc View Source GetRoom(String, Single, Single, Single, Single) Creates a new room. Declaration IRoom GetRoom(string id, float leftEdge = 0F, float rightEdge = 0F, float bottomEdge = 0F, float topEdge = 0F) Parameters Type Name Description System.String id A unique identifier for the room. System.Single leftEdge Left edge. System.Single rightEdge Right edge. System.Single bottomEdge Bottom edge. System.Single topEdge Top edge. Returns Type Description IRoom The room."
  },
  "api/AGS.API.IRoomEvents.html": {
    "href": "api/AGS.API.IRoomEvents.html",
    "title": "Interface IRoomEvents | MonoAGS Documentation",
    "keywords": "Interface IRoomEvents Each room has specific events which you can subscribe to and code stuff to happen on those events. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IRoomEvents Properties | Improve this Doc View Source OnAfterFadeIn This event is triggered after leaving the previous room, after the current room is visible. Declaration IEvent OnAfterFadeIn { get; } Property Value Type Description IEvent The event. | Improve this Doc View Source OnAfterFadeOut This event is triggered before leaving the current room when it is no longer visible. Declaration IBlockingEvent OnAfterFadeOut { get; } Property Value Type Description IBlockingEvent The event. | Improve this Doc View Source OnBeforeFadeIn This event is triggered after leaving the previous room, before the current room is visible. Declaration IBlockingEvent OnBeforeFadeIn { get; } Property Value Type Description IBlockingEvent The event. | Improve this Doc View Source OnBeforeFadeOut This event is triggered before leaving the current room when it is still visible. Declaration IBlockingEvent OnBeforeFadeOut { get; } Property Value Type Description IBlockingEvent The event. See Also IRoom"
  },
  "api/AGS.API.IRoom.html": {
    "href": "api/AGS.API.IRoom.html",
    "title": "Interface IRoom | MonoAGS Documentation",
    "keywords": "Interface IRoom The rooms are where the game takes place. A room can be a room in a house, or an outdoor location, or anything in between. The game can show only one room at a time.This would usually be the room where the player is, though you can change to a different room than the one the player is in if you want. Note: this is different than \"Classic\" AGS in which the room is explicitly tied to where the player is. Inherited Members System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IRoom : IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source Areas A list of areas (or regions) that exist in the room (like areas in the room that the characters can walk in). There are several types of areas and things you can do with them. Declaration IAGSBindingList<IArea> Areas { get; } Property Value Type Description IAGSBindingList < IArea > The areas. See Also IArea IWalkableArea IWalkBehindArea IScalingArea IZoomArea IAreaRestriction | Improve this Doc View Source Background A background graphic for the room. The background is actually just a regular object so it can be animated or use any of the properties available on regular objects. Declaration IObject Background { get; set; } Property Value Type Description IObject The background. See Also IObject | Improve this Doc View Source BackgroundColor Gets or sets the background color of the room. If null (the default), then the screen will not be cleared with any color before rendering: this is assuming that you'll cover the screen anyway with images. Declaration Color? BackgroundColor { get; set; } Property Value Type Description System.Nullable < Color > The color of the background. | Improve this Doc View Source Edges Room edges are a convenient way for scripting a room change once a player walks beyond an edge. You can set the 'X' for the left and right edge, and the 'Y' for the top and bottom edge and subscribe to events when the player crosses the edge to change the room. Declaration IEdges Edges { get; } Property Value Type Description IEdges The edges. | Improve this Doc View Source Events Each room has specific events which you can subscribe to and code stuff to happen on those events. Declaration IRoomEvents Events { get; } Property Value Type Description IRoomEvents The events. | Improve this Doc View Source ID Each rooms should have a unique id (string) which identifies it to the engine. Declaration string ID { get; } Property Value Type Description System.String The identifier. | Improve this Doc View Source Limits Gets the room limits (a rectangle defining the room area) The room limits are used to limit the camera from moving too much to the left or to the right. By default the room limits are bound to the room background size and start from (0,0). This can be changed, however, by setting a custom RoomLimitsProvider . Declaration RectangleF Limits { get; } Property Value Type Description RectangleF The limits. | Improve this Doc View Source MusicOnLoad An optional music clip you can play when switching to the room. If moved from another room with a music clip, there clips will be cross-faded, and you can configure the cross-fading duration and easing functions from RoomMusicCrossFading . Declaration IAudioClip MusicOnLoad { get; set; } Property Value Type Description IAudioClip The audio clip. | Improve this Doc View Source Objects A list of objects that are placed in the room (note that unlike \"Classic\" AGS, objects can be moved between rooms). Declaration IConcurrentHashSet<IObject> Objects { get; } Property Value Type Description IConcurrentHashSet < IObject > The objects. | Improve this Doc View Source Properties Special properties which you can attach to a room which might be useful for special coding tasks. Declaration ICustomProperties Properties { get; } Property Value Type Description ICustomProperties The properties. | Improve this Doc View Source RoomLimitsProvider Allows changing the default behavior which defines how the room limits are provided. The room Limits are used to limit the camera from moving too much to the left or to the right. By default the room limits are bound to the room background size and start from (0,0). This can be changed, however, by setting this property to a different room limits provider. Declaration IRoomLimitsProvider RoomLimitsProvider { get; set; } Property Value Type Description IRoomLimitsProvider The room limits provider. Examples You can use the AGSRoomLimits class, which provides some built in options for room limits: room.RoomLimitsProvider = AGSRoomLimits.FromBackground; //This is the default option room.RoomLimitsProvider = AGSRoomLimits.Infinite; //A room \"without\" limits. The only limits enforced are due to the coordinates supplied in floating points, so the actual limits for the room will be -3.402823e38 - 3.402823e38 (i.e 3402823 + 38 zeroes). room.RoomLimitsProvider = AGSRoomLimits.Custom(new RectangleF(-50f, 0f, 100f, 200f)); //The room starts at (-50,0) and has a size of (100,200). | Improve this Doc View Source ShowPlayer A flag indicating whether the player is to be shown in the room, for hiding the player from a map, for example. This is a convenience flag as this can be achieved by simply switching the room without moving the player to another room. Declaration bool ShowPlayer { get; set; } Property Value Type Description System.Boolean true if show player; otherwise, false . Methods | Improve this Doc View Source Find<TObject>(String) Fins a room object with the specified id. Declaration TObject Find<TObject>(string id) where TObject : class, IObject Parameters Type Name Description System.String id Identifier. Returns Type Description TObject The object if found, null otherwise. Type Parameters Name Description TObject The object's type. | Improve this Doc View Source GetMatchingAreas(PointF, String) Get all room areas that contain the specified point (and apply to the optional specified entity). Declaration IEnumerable<IArea> GetMatchingAreas(PointF point, string entityId) Parameters Type Name Description PointF point Point. System.String entityId Entity identifier. Returns Type Description System.Collections.Generic.IEnumerable < IArea > The matching areas."
  },
  "api/AGS.API.IRestrictionList.html": {
    "href": "api/AGS.API.IRestrictionList.html",
    "title": "Interface IRestrictionList | MonoAGS Documentation",
    "keywords": "Interface IRestrictionList Adds the ability to restrict certain entities from being affected by \"something\". That \"something\" can be an area, for example, or a display list for a viewport. Inherited Members System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IRestrictionList : INotifyPropertyChanged Properties | Improve this Doc View Source RestrictionList Gets list of restricted entities (if it's a black list), or permitted entities (if it's a white list). If the list is empty then the component is effectively ignored (everybody is permitted). Declaration IConcurrentHashSet<string> RestrictionList { get; } Property Value Type Description IConcurrentHashSet < System.String > The restriction list. | Improve this Doc View Source RestrictionType Gets or sets the type of the restriction, black list (everybody in the list is restricted) or white list (everybody not in the list is restricted). Declaration RestrictionListType RestrictionType { get; set; } Property Value Type Description RestrictionListType The type of the restriction. Methods | Improve this Doc View Source IsRestricted(String) Checks if an entity is restricted to this area (based on the restriction type and list). Declaration bool IsRestricted(string entityId) Parameters Type Name Description System.String entityId Entity identifier. Returns Type Description System.Boolean true , if entity is restricted, false otherwise."
  },
  "api/AGS.API.IResourcePack.html": {
    "href": "api/AGS.API.IResourcePack.html",
    "title": "Interface IResourcePack | MonoAGS Documentation",
    "keywords": "Interface IResourcePack A resource pack is an abstract representation of a storage space for retrieving resources. There can be a resource pack that's based on the file system, a resource pack which retrieves embedded resource in the game file itself, a resource pack that downloads resources from the web, a resource pack based on a zip file, etc. IResourceLoader Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IResourcePack Methods | Improve this Doc View Source LoadResource(String) Loads a resource from a embedded/file path. Declaration IResource LoadResource(string path) Parameters Type Name Description System.String path Path. Returns Type Description IResource The resource. | Improve this Doc View Source LoadResources(String) Loads all the the resource available in the specified embedded/file system folder. Declaration List<IResource> LoadResources(string folder) Parameters Type Name Description System.String folder Folder. Returns Type Description System.Collections.Generic.List < IResource > The resources. | Improve this Doc View Source ResolvePath(String) Finds a matching resource pack specific path for the specified global resource path. Declaration string ResolvePath(string path) Parameters Type Name Description System.String path Path. Returns Type Description System.String The resource pack path if found a matching resource, otherwise null."
  },
  "api/AGS.API.IRenderer.html": {
    "href": "api/AGS.API.IRenderer.html",
    "title": "Interface IRenderer | MonoAGS Documentation",
    "keywords": "Interface IRenderer A renderer is an object which passes on drawing instructions on demand. All renderers which are subcribed to the rendering pipeline (for entities which are to be displayed), are requested to pass on the drawing instructions on each game tick. The rendering loop then uses those instructions to draw on the screen. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IRenderer Methods | Improve this Doc View Source GetNextInstruction(IViewport) Gets the next drawing instruction for the specified viewport Declaration IRenderInstruction GetNextInstruction(IViewport viewport) Parameters Type Name Description IViewport viewport Viewport. Returns Type Description IRenderInstruction The next instruction. See Also IRenderPipeline IRenderInstruction IRendererLoop"
  },
  "api/AGS.API.IRadioGroup.html": {
    "href": "api/AGS.API.IRadioGroup.html",
    "title": "Interface IRadioGroup | MonoAGS Documentation",
    "keywords": "Interface IRadioGroup Used to group multiple checkboxes together to guarantee that only one will be checked at any given time. Inherited Members System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IRadioGroup : INotifyPropertyChanged Properties | Improve this Doc View Source SelectedButton Gets or sets the selected button. Once a new button is selected, any existing checked button in the group will be unchecked. Declaration ICheckboxComponent SelectedButton { get; set; } Property Value Type Description ICheckboxComponent The selected button. See Also RadioGroup"
  },
  "api/AGS.API.IPortraitConfig.html": {
    "href": "api/AGS.API.IPortraitConfig.html",
    "title": "Interface IPortraitConfig | MonoAGS Documentation",
    "keywords": "Interface IPortraitConfig Configuration for how the speech portrait is rendered. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IPortraitConfig Properties | Improve this Doc View Source Portrait Gets or sets the portrait. Declaration IObject Portrait { get; set; } Property Value Type Description IObject The portrait. | Improve this Doc View Source PortraitOffset Gets or sets the portrait offset from the screen borders. Declaration PointF PortraitOffset { get; set; } Property Value Type Description PointF The portrait offset. | Improve this Doc View Source Positioning Gets or sets how the portrait will be positioned. Declaration PortraitPositioning Positioning { get; set; } Property Value Type Description PortraitPositioning The positioning. | Improve this Doc View Source TextOffset Gets or sets the text offset from the portrait (on the x side) and from the screen top border (on the y side). Declaration PointF TextOffset { get; set; } Property Value Type Description PointF The text offset."
  },
  "api/AGS.API.IPixelPerfectComponent.html": {
    "href": "api/AGS.API.IPixelPerfectComponent.html",
    "title": "Interface IPixelPerfectComponent | MonoAGS Documentation",
    "keywords": "Interface IPixelPerfectComponent Adds the ability for an entity to have pixel perfect collision checks (as opposed to bounding box collision checks). See: https://wiki.allegro.cc/index.php?title=Pixel_Perfect_Collision Inherited Members IPixelPerfectCollidable.PixelPerfectHitTestArea IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax [RequiredComponent(typeof(IAnimationComponent), true)] public interface IPixelPerfectComponent : IPixelPerfectCollidable, IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source IsPixelPerfect Declaration bool IsPixelPerfect { get; set; } Property Value Type Description System.Boolean"
  },
  "api/AGS.API.IPixelPerfectCollidable.html": {
    "href": "api/AGS.API.IPixelPerfectCollidable.html",
    "title": "Interface IPixelPerfectCollidable | MonoAGS Documentation",
    "keywords": "Interface IPixelPerfectCollidable Adds the ability for pixel perfect collision checks ( https://wiki.allegro.cc/index.php?title=Pixel_Perfect_Collision ) Inherited Members System.IDisposable.Dispose() Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IPixelPerfectCollidable : IDisposable Properties | Improve this Doc View Source PixelPerfectHitTestArea Gets the pixel perfect hit test area. This is the area not projected on the screen(i.e not rotated and will start from 0,0) Declaration IArea PixelPerfectHitTestArea { get; } Property Value Type Description IArea The pixel perfect hit test area."
  },
  "api/AGS.API.IPathFinder.html": {
    "href": "api/AGS.API.IPathFinder.html",
    "title": "Interface IPathFinder | MonoAGS Documentation",
    "keywords": "Interface IPathFinder This implements a path finder, to find a walking path from a position in 2D space to another position, while a mask implies where the character is allowed to walk on the 2D space. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IPathFinder Methods | Improve this Doc View Source GetWalkPoints(Position, Position) Gets the walk points that the character need to travel in straight line to, until eventuall reaching the destination (an empty list if the travel is not possible). Declaration IEnumerable<Position> GetWalkPoints(Position from, Position to) Parameters Type Name Description Position from From. Position to To. Returns Type Description System.Collections.Generic.IEnumerable < Position > The walk points. | Improve this Doc View Source Init(Boolean[][]) This gives the path finder the mask which tells where the character is allowed to walk. Declaration void Init(bool[][] mask) Parameters Type Name Description System.Boolean [][] mask Mask."
  },
  "api/AGS.API.IHasRoomComponent.html": {
    "href": "api/AGS.API.IHasRoomComponent.html",
    "title": "Interface IHasRoomComponent | MonoAGS Documentation",
    "keywords": "Interface IHasRoomComponent This component associates an entity with the game's room system. It means that the entity can be belong to a room and moved between rooms. Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IHasRoomComponent : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source OnRoomChanged An event which fires whenever the room is changed. Declaration IBlockingEvent OnRoomChanged { get; } Property Value Type Description IBlockingEvent The on room changed event. | Improve this Doc View Source PreviousRoom The previous room that the entity used to reside in until it moved to the current room. This will be null if the entity has never moved rooms. Declaration IRoom PreviousRoom { get; } Property Value Type Description IRoom | Improve this Doc View Source Room The current room that the entity resides in. If this is entity is to be rendered to the screen it will only be rendered if it's in the same room as the player (or if it's in the UI). Declaration IRoom Room { get; } Property Value Type Description IRoom Methods | Improve this Doc View Source ChangeRoomAsync(IRoom, Nullable<Single>, Nullable<Single>) Move the entity to a new room. If the entity that's moved to a new room is the player, the new room will be the one shown on the screen. Declaration Task ChangeRoomAsync(IRoom room, float? x = default(float? ), float? y = default(float? )) Parameters Type Name Description IRoom room The room to move to. System.Nullable < System.Single > x An optional x co-ordinate for the entity to move inside the new room. System.Nullable < System.Single > y An optional y co-ordinate for the entity to move inside the new room. Returns Type Description System.Threading.Tasks.Task Examples private async Task onDoorHotspotClicked() { await cPlayer.SayAsync(\"Ok, time to get inside the house.\"); await cPlayer.ChangeRoomAsync(rHouse, 120, 100); //Will move the player to the house (to co-ordinates: 120,100). }"
  },
  "api/AGS.API.IHasModelMatrix.html": {
    "href": "api/AGS.API.IHasModelMatrix.html",
    "title": "Interface IHasModelMatrix | MonoAGS Documentation",
    "keywords": "Interface IHasModelMatrix An interface representing an entity which has a model matrix and can be rendered on screen. Inherited Members IScale.Height IScale.Width IScale.ScaleX IScale.ScaleY IScale.Scale IScale.BaseSize IScale.ResetScale() IScale.ResetScale(Single, Single) IScale.ScaleTo(Single, Single) IScale.FlipHorizontally() IScale.FlipVertically() IRotate.Angle ITranslate.Position ITranslate.X ITranslate.Y ITranslate.Z System.IDisposable.Dispose() IHasImage.Opacity IHasImage.Tint IHasImage.Brightness IHasImage.Pivot IHasImage.Image System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IHasModelMatrix : IScale, IRotate, ITranslate, IDisposable, IHasImage, INotifyPropertyChanged"
  },
  "api/AGS.API.IGameEvents.html": {
    "href": "api/AGS.API.IGameEvents.html",
    "title": "Interface IGameEvents | MonoAGS Documentation",
    "keywords": "Interface IGameEvents The game events, allows you to subscribe to important events that happen in the game. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IGameEvents Properties | Improve this Doc View Source DefaultInteractions Defines the default interactions for objects on the screen that can be interacted in some way, but for which we haven't defined specific interactions. Declaration IDefaultInteractions DefaultInteractions { get; } Property Value Type Description IDefaultInteractions The default interactions. | Improve this Doc View Source OnBeforeRender This event is called on every render cycle before rendering starts. It can be used for native background drawings, or for native OpenGL calls for setting things up (like setting shader variables). Declaration IBlockingEvent OnBeforeRender { get; } Property Value Type Description IBlockingEvent The on before render event. | Improve this Doc View Source OnLoad The on load event happens once in the game, it its startup, when it is loading. This is where all the rooms, objects and events are setup. Declaration IBlockingEvent OnLoad { get; } Property Value Type Description IBlockingEvent The on load event. | Improve this Doc View Source OnRepeatedlyExecute The on repeatedly execute event happens every tick and allows you to check for conditions and do specific actions when the conditions fulfill. The frequency of this events depends on the FPS (frames per second). By default, if the hardware (and software) can handle it, we run at 60 FPS, meaning this event will be called 60 times per second. Note that this event is not fired when the game is paused (which is usually what you'd want), if you want an event that's always being called, take a look at OnRepeatedlyExecuteAlways . IMPORTANT: As this event runs 60 times per second (by default), it can be abused and deteriorate the performance of the game. So it's important to keep two rules: Don't perform long actions on each tick. Don't allocate memory on each tick. Declaration IBlockingEvent<IRepeatedlyExecuteEventArgs> OnRepeatedlyExecute { get; } Property Value Type Description IBlockingEvent < IRepeatedlyExecuteEventArgs > The on repeatedly execute event. Examples Let's look at some bad and good examples on how to use the event: private void onRepeatedlyExecute() { //BAD!! running the dance animation on every tick will make the game run incredibly slow! performDanceAnimation(); //BAD!! It's better than the previous line, but still, if the IsDancing will return true, we will be running the dance animation on every tick! if (cEgo.IsDancing()) performDanceAnimation(); //GOOD! We only running the dance animation once, not every tick, so we should be ok. if (cEgo.IsDancing() && Repeat.OnceOnly(\"DanceAnimation!!\")) performDanceAnimation(); //BAD!! We're allocating memory on every tick (the memory that we're allocating is the class we created called CheckShouldRunDance). CheckShouldRunDance shouldRunDance = new CheckShouldRunDance(); if (shouldRunDance.ShouldDance() && Repeat.OnceOnly(\"DanecAnimation!!\")) performDanceAnimation(); //GOOD!! We allocated this class outside the method once, and now we can use it (note the underscore prefix is just a convention used for class variables)... if (_shouldRunDance.ShouldDance() && Repeat.OnceOnly(\"DanceAnimation!!\")) performDanceAnimation(); } | Improve this Doc View Source OnRepeatedlyExecuteAlways This event is similar to the OnRepeatedlyExecute with the exception that it's always fired, even when the game is paused. Declaration IBlockingEvent<IRepeatedlyExecuteEventArgs> OnRepeatedlyExecuteAlways { get; } Property Value Type Description IBlockingEvent < IRepeatedlyExecuteEventArgs > The on repeatedly execute always. | Improve this Doc View Source OnRoomChanging This event is fired whenever the visible room of the game is changing. The event is fired after the current room's fade-out event, and before the new room's fade-in event (and after the viewport for the new room was updated). Declaration IBlockingEvent OnRoomChanging { get; } Property Value Type Description IBlockingEvent The on room changing. | Improve this Doc View Source OnSavedGameLoad The on saved game load is called whenever a saved game was loaded. This event can be used to rewire external code back to the game, and to make changes if needed when loading saves from previous versions of the game. Declaration IBlockingEvent<IGame> OnSavedGameLoad { get; } Property Value Type Description IBlockingEvent < IGame > The on saved game load event. Examples This examples show how we rewire external code back to the saved game. Let's say we saved the player to an external variable which is used outside the game state: IPlayer _player; public void LoadModule(IGame game) { _player = game.State.Player; } All is nice and well, but if we load a saved game, _player will point to the player from before the save. We want to \"rewire\" it back to hold the correct player after the save, so we can rewrite the code like this: private IPlayer _player; private IGame _game; public void LoadModule(IGame game) { _game = game; _player = game.State.Player; game.Events.OnSavedGameLoad.Subscribe(onSavedGameLoad); } public void DisposeModule() { //Whenever we subscribe to an event we need to remember to unsubscribe when we don't need it anymore, to avoid memory leaks. game.Events.OnSavedGameLoad.Unsubscribe(onSavedGameLoad); } private void onSavedGameLoad() { _player = game.State.Player; //We rewire the _player variable to refer to the correct player! } Let's look at an example of loading an incompatible save (a save from a previous version of the game). Let's say that we added a new version of our game with a new inventory item: a bowling ball. That bowling ball did not exist in the previous version of the game, but since we added a new puzzle it is now needed. But the player might saved a game after the last point he/she could have acquired the bowling ball. We, as game designers, might decide, that if we have the candle, then it's not possible for us not to have the bowling ball. So we can code it like this: private IGame _game; public void LoadModule(IGame game) { _game = game; game.Events.OnSavedGameLoad.Subscribe(onSavedGameLoad); } public void DisposeModule() { //Whenever we subscribe to an event we need to remember to unsubscribe when we don't need it anymore, to avoid memory leaks. _game.Events.OnSavedGameLoad.Unsubscribe(onSavedGameLoad); } private void onSavedGameLoad() { var inventory = _game.State.Player.Character.Inventory; if (inventory.Contains(iCandle) && !inventory.Contains(iBowlingBall)) { inventory.Add(iBowlingBall); } } | Improve this Doc View Source OnScreenResize This event is called whenever the screen is resized. Declaration IBlockingEvent OnScreenResize { get; } Property Value Type Description IBlockingEvent The on screen resize."
  },
  "api/AGS.API.IGame.html": {
    "href": "api/AGS.API.IGame.html",
    "title": "Interface IGame | MonoAGS Documentation",
    "keywords": "Interface IGame A top-level interface to interact with the game. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IGame Properties | Improve this Doc View Source Audio Game's audio system (the entry point for interacting with everything sound related). Declaration IAudioSystem Audio { get; } Property Value Type Description IAudioSystem The audio. | Improve this Doc View Source Coordinates Utility methods to help convert between different coordinate systems. Declaration ICoordinates Coordinates { get; } Property Value Type Description ICoordinates The coordinates. | Improve this Doc View Source Events Gets the top-level game events (game loaded, on repeatedly execute, etc). Declaration IGameEvents Events { get; } Property Value Type Description IGameEvents The events. | Improve this Doc View Source Factory Gets the factory for loading/creating all of the game objects. Declaration IGameFactory Factory { get; } Property Value Type Description IGameFactory The factory. | Improve this Doc View Source GameLoop Gets the game loop. This is used by the engine for updating the state every tick, and should not be used by the player. Declaration IGameLoop GameLoop { get; } Property Value Type Description IGameLoop The game loop. | Improve this Doc View Source HitTest Gets the object under the mouse's position. Declaration IHitTest HitTest { get; } Property Value Type Description IHitTest The hit test. | Improve this Doc View Source Input Game's input (mouse, keyboard, etc). Declaration IInput Input { get; } Property Value Type Description IInput The input. | Improve this Doc View Source RenderLoop Gets the render loop. This is used by the engine for rendering to the screen on each tick, and should not be used by the player. Declaration IRendererLoop RenderLoop { get; } Property Value Type Description IRendererLoop The renderer loop. | Improve this Doc View Source RenderPipeline Gets the render pipeline, which is responsible of collecting drawing instructions from all of the renderers and passing it on to the render loop. Declaration IRenderPipeline RenderPipeline { get; } Property Value Type Description IRenderPipeline The render pipeline. | Improve this Doc View Source Resolver Allows retrieving various systems from the engine. Declaration IResolver Resolver { get; } Property Value Type Description IResolver The resolver. | Improve this Doc View Source SaveLoad Interface for saving/loading the game. Declaration ISaveLoad SaveLoad { get; } Property Value Type Description ISaveLoad The save load. | Improve this Doc View Source Settings Gets the game's settings. Declaration IRuntimeSettings Settings { get; } Property Value Type Description IRuntimeSettings The settings. | Improve this Doc View Source State Gets the game's state (rooms, objects, etc). Declaration IGameState State { get; } Property Value Type Description IGameState The state. Methods | Improve this Doc View Source Find<TEntity>(String) Find the entity with the specified id and type. Declaration TEntity Find<TEntity>(string id) where TEntity : class, IEntity Parameters Type Name Description System.String id The entity's unique identifier. Returns Type Description TEntity The entity if found, null if no entity exists with that id. Type Parameters Name Description TEntity The entity's type. | Improve this Doc View Source Quit() Quits the game. Note that this should not be used on IOS as IOS guidelines do not allow a button for quitting the game. Declaration void Quit() | Improve this Doc View Source Start() Starts the game. Declaration void Start()"
  },
  "api/AGS.API.IFrameBuffer.html": {
    "href": "api/AGS.API.IFrameBuffer.html",
    "title": "Interface IFrameBuffer | MonoAGS Documentation",
    "keywords": "Interface IFrameBuffer Allows rendering into a texture instead of rendering to screen Inherited Members System.IDisposable.Dispose() Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IFrameBuffer : IDisposable Properties | Improve this Doc View Source Texture Gets the texture that was rendered (will be valid after End() was called). Declaration ITexture Texture { get; } Property Value Type Description ITexture The texture. Methods | Improve this Doc View Source Begin() Signals that all following renders will be performed into the buffer instead of into the screen. 'Begin' must be called from the rendering thread. Note: for room transition implementations, the frame buffer is already rendered with the room data, prepared to be used, so calling Begin + End is not needed. Returns true if the frame buffer was correctly initialized, false if some error has occured. Declaration bool Begin() Returns Type Description System.Boolean | Improve this Doc View Source End() Signals that all following renders will no longer be performed into the buffer, they will return to render into the screen (as usual). 'End' must be called from the rendering thread (and after 'Begin' or it has no value). Note: for room transition implementations, the frame buffer is already rendered with the room data, prepared to be used, so calling Begin + End is not needed. Declaration void End()"
  },
  "api/AGS.API.IForm.html": {
    "href": "api/AGS.API.IForm.html",
    "title": "Interface IForm | MonoAGS Documentation",
    "keywords": "Interface IForm A form (a panel with a header). Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IForm Properties | Improve this Doc View Source Contents Gets the contents panel. Declaration IPanel Contents { get; } Property Value Type Description IPanel The contents. | Improve this Doc View Source Header Gets the header. Declaration ILabel Header { get; } Property Value Type Description ILabel The header. | Improve this Doc View Source Height Gets the height. Declaration float Height { get; } Property Value Type Description System.Single The height. | Improve this Doc View Source Visible Gets or sets a value indicating whether this IForm is visible. Declaration bool Visible { get; set; } Property Value Type Description System.Boolean true if visible; otherwise, false . | Improve this Doc View Source Width Gets or sets the width. Declaration float Width { get; set; } Property Value Type Description System.Single The width. | Improve this Doc View Source X Gets or sets the x. Declaration float X { get; set; } Property Value Type Description System.Single The x. | Improve this Doc View Source Y Gets or sets the y. Declaration float Y { get; set; } Property Value Type Description System.Single The y."
  },
  "api/AGS.API.IFontLoader.html": {
    "href": "api/AGS.API.IFontLoader.html",
    "title": "Interface IFontLoader | MonoAGS Documentation",
    "keywords": "Interface IFontLoader Allows loading fonts. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IFontLoader Methods | Improve this Doc View Source InstallFonts(String[]) Installs the specified fonts on the computer. This is required on the Mac, as there is no way to load a font without it being installed. If the font is not installed on a Mac it will be installed and the game will restart (otherwise the font will not render), therefore all fonts are recommended to be installed at the start of the game to make the experience seamless for the user. Declaration void InstallFonts(params string[] paths) Parameters Type Name Description System.String [] paths Paths. | Improve this Doc View Source LoadFont(String, Single, FontStyle) Loads a font (which should be already installed). Declaration IFont LoadFont(string fontFamily, float sizeInPoints, FontStyle style = FontStyle.Regular) Parameters Type Name Description System.String fontFamily Font family. System.Single sizeInPoints Size in points ( http://www.computerhope.com/jargon/f/font-size.htm ). FontStyle style Style. Returns Type Description IFont The font. | Improve this Doc View Source LoadFontFromPath(String, Single, FontStyle) Loads the font from resource/file path ( IResourceLoader . If the font is not installed on a Mac it will be installed and the game will be restarted, therefore it is recommended to use InstallFonts(String[]) at the start of the game). Declaration IFont LoadFontFromPath(string path, float sizeInPoints, FontStyle style = FontStyle.Regular) Parameters Type Name Description System.String path Resource/file Path. System.Single sizeInPoints Size in points ( http://www.computerhope.com/jargon/f/font-size.htm ). FontStyle style Style. Returns Type Description IFont The font."
  },
  "api/AGS.API.IFontFactory.html": {
    "href": "api/AGS.API.IFontFactory.html",
    "title": "Interface IFontFactory | MonoAGS Documentation",
    "keywords": "Interface IFontFactory Inherited Members IFontLoader.InstallFonts(String[]) IFontLoader.LoadFont(String, Single, FontStyle) IFontLoader.LoadFontFromPath(String, Single, FontStyle) Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IFontFactory : IFontLoader Methods | Improve this Doc View Source GetTextConfig(IBrush, IFont, IBrush, Single, IBrush, Single, Single, Alignment, AutoFit, Single, Single, Single, Single, Nullable<SizeF>) Gets configuration for displaying text on screen. Declaration ITextConfig GetTextConfig(IBrush brush = null, IFont font = null, IBrush outlineBrush = null, float outlineWidth = 0F, IBrush shadowBrush = null, float shadowOffsetX = 0F, float shadowOffsetY = 0F, Alignment alignment = Alignment.TopLeft, AutoFit autoFit = AutoFit.NoFitting, float paddingLeft = 2F, float paddingRight = 2F, float paddingTop = 2F, float paddingBottom = 2F, SizeF? labelMinSize = default(SizeF? )) Parameters Type Name Description IBrush brush Brush. IFont font Font. IBrush outlineBrush Outline brush. System.Single outlineWidth Outline width. IBrush shadowBrush Shadow brush. System.Single shadowOffsetX Shadow offset x. System.Single shadowOffsetY Shadow offset y. Alignment alignment Alignment. AutoFit autoFit Auto fit. System.Single paddingLeft Padding left. System.Single paddingRight Padding right. System.Single paddingTop Padding top. System.Single paddingBottom Padding bottom. System.Nullable < SizeF > labelMinSize Label minimum size. Returns Type Description ITextConfig The text config."
  },
  "api/AGS.API.IDialogSettings.html": {
    "href": "api/AGS.API.IDialogSettings.html",
    "title": "Interface IDialogSettings | MonoAGS Documentation",
    "keywords": "Interface IDialogSettings Allows to set default settings to control how dialogs look and behave. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IDialogSettings Properties | Improve this Doc View Source Chosen The default text configurations for showing dialog options after they have already been used before. Declaration ITextConfig Chosen { get; set; } Property Value Type Description ITextConfig | Improve this Doc View Source Hovered The default text configurations for showing dialog options when they're hovered on via the mouse. Declaration ITextConfig Hovered { get; set; } Property Value Type Description ITextConfig | Improve this Doc View Source Idle The default text configurations for showing dialog options when they're in their \"normal\" state. Declaration ITextConfig Idle { get; set; } Property Value Type Description ITextConfig | Improve this Doc View Source RenderLayer The default IRenderLayer used to display the dialogs (by default, this will be AGSLayers.Dialog). Declaration IRenderLayer RenderLayer { get; set; } Property Value Type Description IRenderLayer"
  },
  "api/AGS.API.IDialogOption.html": {
    "href": "api/AGS.API.IDialogOption.html",
    "title": "Interface IDialogOption | MonoAGS Documentation",
    "keywords": "Interface IDialogOption Represents a dialog option that is shown on the screen as part of a list of options, where the user needs to choose one of the options. Inherited Members IDialogActions.Actions IDialogActions.AddText(ICharacter, String[]) IDialogActions.AddPlayerText(String[]) IDialogActions.AddActions(Action[]) IDialogActions.AddConditionalActions(Func<Boolean>[]) IDialogActions.AddAsyncActions(Func<Task>[]) IDialogActions.AddAsyncConditionalActions(Func<Task<Boolean>>[]) IDialogActions.AddActions(IDialogAction[]) IDialogActions.RunAsync() System.IDisposable.Dispose() Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IDialogOption : IDialogActions, IDisposable Properties | Improve this Doc View Source ChangeDialogWhenFinished Gets or sets another dialog that will be changed to after this dialog option's actions are executed. Declaration IDialog ChangeDialogWhenFinished { get; set; } Property Value Type Description IDialog The change dialog when finished. | Improve this Doc View Source ExitDialogWhenFinished Gets or sets a value indicating whether the dialog should close after this dialog option's actions are executed. Declaration bool ExitDialogWhenFinished { get; set; } Property Value Type Description System.Boolean true if exit dialog when finished; otherwise, false . | Improve this Doc View Source HasBeenChosenConfig Gets the text configuration (font, color, outline, etc) for when the option was already previously selected by the player. By default it will color the text gray. Note: if ShowOnce is false, then the option will be hidden and this configuration will be irrelevant. Declaration ITextConfig HasBeenChosenConfig { get; } Property Value Type Description ITextConfig The \"has been chosen\" config. | Improve this Doc View Source HasOptionBeenChosen Gets or sets a value indicating whether this IDialogOption has already been chosen by the user before. Declaration bool HasOptionBeenChosen { get; set; } Property Value Type Description System.Boolean true if has option been chosen; otherwise, false . | Improve this Doc View Source HoverConfig Gets the text configuration (font, color, outline, etc) for when the mouse hovers over the option. By default it will color the text yellow. Declaration ITextConfig HoverConfig { get; } Property Value Type Description ITextConfig The hover config. | Improve this Doc View Source Label Gets the label which will host the text for the dialog option. Declaration ILabel Label { get; } Property Value Type Description ILabel The label. | Improve this Doc View Source ShowOnce Gets a value indicating whether this IDialogOption should be shown after it was already selected once. Note: an alternative to this would be using HasBeenChosenConfig , which by default colors an already selected text gray. Declaration bool ShowOnce { get; } Property Value Type Description System.Boolean true if show once; otherwise, false . | Improve this Doc View Source SpeakOption Gets a value indicating whether this IDialogOption should be spoken by the player before moving on to the list of actions. Declaration bool SpeakOption { get; } Property Value Type Description System.Boolean true if speak option; otherwise, false ."
  },
  "api/AGS.API.IDefaultsSettings.html": {
    "href": "api/AGS.API.IDefaultsSettings.html",
    "title": "Interface IDefaultsSettings | MonoAGS Documentation",
    "keywords": "Interface IDefaultsSettings Gets or sets settings for various defaults. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IDefaultsSettings Properties | Improve this Doc View Source Dialog Gets or sets default settings to control how dialogs look and behave. Declaration IDialogSettings Dialog { get; set; } Property Value Type Description IDialogSettings | Improve this Doc View Source Fonts Gets or sets the default fonts to be used in the game. Declaration IDefaultFonts Fonts { get; set; } Property Value Type Description IDefaultFonts | Improve this Doc View Source MessageBox Gets or sets the default settings for showing message boxes (like Display, Yes/No prompts, etc). Declaration IMessageBoxSettings MessageBox { get; set; } Property Value Type Description IMessageBoxSettings The message box. | Improve this Doc View Source Skin Gets or sets the default skin (which applies a consistent look to GUIs). Declaration ISkin Skin { get; set; } Property Value Type Description ISkin The skin."
  },
  "api/AGS.API.IDefaultInteractions.html": {
    "href": "api/AGS.API.IDefaultInteractions.html",
    "title": "Interface IDefaultInteractions | MonoAGS Documentation",
    "keywords": "Interface IDefaultInteractions Default interactions (when no specific interaction callback is subscribed) are defined here. This is where you define generic responses (like the famous \"this doesn't work\") that cover all of the interactions for which you didn't code a specific response. Inherited Members IInteractions.OnInteract(String) IInteractions.OnInventoryInteract(String) Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IDefaultInteractions : IInteractions Properties | Improve this Doc View Source OnInventoryCombination Called when two inventory items are combined and there is no combination event subscribed specifically for them. OnCombination(IInventoryItem) Declaration IEvent<InventoryCombinationEventArgs> OnInventoryCombination { get; } Property Value Type Description IEvent < InventoryCombinationEventArgs > The default combination event. Examples First, we subscribe to the event: cEgo.Inventory.OnDefaultCombination.Subscribe(onDefaultCombination); Then, we define the event (what do we do when the user tried to combine two random items?): private async Task onDefaultCombination(object sender, InventoryCombinationEventArgs args) { await cEgo.SayAsync($\"I can't use {args.ActiveItem.Graphics.DisplayName} on {args.PassiveItem.Graphics.DisplayName}. It doesn't make sense!\"); }"
  },
  "api/AGS.API.IDefaultFonts.html": {
    "href": "api/AGS.API.IDefaultFonts.html",
    "title": "Interface IDefaultFonts | MonoAGS Documentation",
    "keywords": "Interface IDefaultFonts Allows to set the default fonts to be used in the game. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IDefaultFonts Properties | Improve this Doc View Source Dialogs Gets or sets the default dialog font (for rendering the dialog options). Leave as null to use the default text font as the default dialog font. Declaration IFont Dialogs { get; set; } Property Value Type Description IFont | Improve this Doc View Source Speech Gets or sets the default speech font (for text displayed when characters are speaking if no other font was given). Declaration IFont Speech { get; set; } Property Value Type Description IFont The speech font. | Improve this Doc View Source Text Gets or sets the default text font (for any non-speech related text shown on screen if no other font was given). Declaration IFont Text { get; set; } Property Value Type Description IFont The text font."
  },
  "api/AGS.API.ICutscene.html": {
    "href": "api/AGS.API.ICutscene.html",
    "title": "Interface ICutscene | MonoAGS Documentation",
    "keywords": "Interface ICutscene A cutscene is used to wrap a portion of the game together. This portion can then be skipped by the user. This is useful for things like introduction sequences, where you want the player to be able to skip over an intro that they've seen before. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ICutscene Properties | Improve this Doc View Source IsRunning When the player chooses to skip a cutscene all of the script code is run as usual, but any blocking commands are run through without the usual game cycle delays. Therefore, you should never normally need to use this property since cutscenes should all be handled automatically, but it could be useful for script modules. if (cutscene.IsRunning) { //Do Something } Declaration bool IsRunning { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsSkipping Returns whether the player has elected to skip the current cutscene. This will return true if the game is between a Start and End command, and the player has chosen to skip it. Although cutscene skipping is handled automatically by AGS, you can use this property to optimise the process by bypassing any lengthy blocks of code that don't need to be run if the cutscene is being skipped over. Declaration bool IsSkipping { get; } Property Value Type Description System.Boolean Examples if (!cutscene.IsSkipping) { aScaryMusic.Play(); Thread.Sleep(100); aScaryMusic.Stop(); } | Improve this Doc View Source SkipTrigger Gets or sets what triggers skipping a cutscene (by default, pressing escape only to skip a scene, but this could be changed to be any key on the keyboard, any key or mouse click, or a custom skip trigger that you program yourself). Declaration SkipCutsceneTrigger SkipTrigger { get; set; } Property Value Type Description SkipCutsceneTrigger The skip trigger. Methods | Improve this Doc View Source BeginSkip() Programmatically instructs the cutscene to start skipping (if a cutscene is running). Declaration void BeginSkip() | Improve this Doc View Source CopyFrom(ICutscene) Copies data from a different cutscene object. Declaration void CopyFrom(ICutscene cutscene) Parameters Type Name Description ICutscene cutscene The cutscene object to copy data from. | Improve this Doc View Source End() Marks the end of a cutscene. If the player skips the cutscene, the game will fast-forward to this point. Be very careful with where you place the corresponding End command. The script must pass through it in its normal run in order for the skipping to work - otherwise, when the player presses ESC the game could appear to hang. This function returns false if the player watched the cutscene, or true if they skipped it. Declaration bool End() Returns Type Description System.Boolean | Improve this Doc View Source Start() Marks the start of a cutscene. Once your script passes this point, the player can choose to skip a portion by pressing a pre-configured button. This is useful for things like introduction sequences, where you want the player to be able to skip over an intro that they've seen before. You need to mark the end of the cutscene with the End command. Be very careful with where you place the corresponding End command. The script must pass through it in its normal run in order for the skipping to work - otherwise, when the player presses ESC the game could appear to hang. Declaration void Start()"
  },
  "api/AGS.API.ICustomSerializableData.html": {
    "href": "api/AGS.API.ICustomSerializableData.html",
    "title": "Interface ICustomSerializableData | MonoAGS Documentation",
    "keywords": "Interface ICustomSerializableData Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ICustomSerializableData Properties | Improve this Doc View Source Content Declaration string Content { get; } Property Value Type Description System.String | Improve this Doc View Source Type Type must implement ICustomSerializable Declaration Type Type { get; } Property Value Type Description System.Type The type."
  },
  "api/AGS.API.ICustomSerializable.html": {
    "href": "api/AGS.API.ICustomSerializable.html",
    "title": "Interface ICustomSerializable | MonoAGS Documentation",
    "keywords": "Interface ICustomSerializable Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ICustomSerializable Methods | Improve this Doc View Source Load(String) Declaration void Load(string contents) Parameters Type Name Description System.String contents | Improve this Doc View Source Save() Declaration ICustomSerializableData Save() Returns Type Description ICustomSerializableData"
  },
  "api/AGS.API.IConcurrentHashSet-1.html": {
    "href": "api/AGS.API.IConcurrentHashSet-1.html",
    "title": "Interface IConcurrentHashSet<TItem> | MonoAGS Documentation",
    "keywords": "Interface IConcurrentHashSet<TItem> A hashed set which can be write/read concurrently. Inherited Members System.Collections.Generic.IEnumerable<TItem>.GetEnumerator() Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IConcurrentHashSet<TItem> : IEnumerable<TItem>, IEnumerable Type Parameters Name Description TItem Properties | Improve this Doc View Source Count Gets the number of items in the set. Declaration int Count { get; } Property Value Type Description System.Int32 The count. | Improve this Doc View Source OnListChanged An event which is triggered whenever the set is changed (an item is added or removed). Declaration IBlockingEvent<AGSHashSetChangedEventArgs<TItem>> OnListChanged { get; } Property Value Type Description IBlockingEvent < AGSHashSetChangedEventArgs <TItem>> The event. Methods | Improve this Doc View Source Add(TItem) Add the specified item. Declaration bool Add(TItem item) Parameters Type Name Description TItem item Item. Returns Type Description System.Boolean True if item was added, false if it was already in the set. | Improve this Doc View Source AddRange(List<TItem>) Adds the specified items. Declaration int AddRange(List<TItem> items) Parameters Type Name Description System.Collections.Generic.List <TItem> items Items. Returns Type Description System.Int32 The number of items that was actually added (were not already in the set). | Improve this Doc View Source Clear() Clears the set. Declaration void Clear() | Improve this Doc View Source Contains(TItem) Is the specified item in the set? Declaration bool Contains(TItem item) Parameters Type Name Description TItem item Item. Returns Type Description System.Boolean True if the item is in the set, false if it isn't. | Improve this Doc View Source Remove(TItem) Remove the specified item. Declaration bool Remove(TItem item) Parameters Type Name Description TItem item Item. Returns Type Description System.Boolean True if item was removed, false if it was not in the set. | Improve this Doc View Source RemoveAll(Predicate<TItem>) Removes all items that match the predicate from the set. Declaration void RemoveAll(Predicate<TItem> shouldRemove) Parameters Type Name Description System.Predicate <TItem> shouldRemove The predicate to decide which item should be removed."
  },
  "api/AGS.API.IComponentsCollection.html": {
    "href": "api/AGS.API.IComponentsCollection.html",
    "title": "Interface IComponentsCollection | MonoAGS Documentation",
    "keywords": "Interface IComponentsCollection A collection of componenets: allows you to add, remove, get and iterate components. Inherited Members System.Collections.Generic.IEnumerable<AGS.API.IComponent>.GetEnumerator() System.IDisposable.Dispose() Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IComponentsCollection : IEnumerable<IComponent>, IEnumerable, IDisposable Properties | Improve this Doc View Source ComponentsInitialized Gets a value indicating whether the components were already initialized. Declaration bool ComponentsInitialized { get; } Property Value Type Description System.Boolean true if components initialized; otherwise, false . | Improve this Doc View Source Count Gets the number of components. Declaration int Count { get; } Property Value Type Description System.Int32 The count. | Improve this Doc View Source OnComponentsChanged An event which is triggered whenever a component is added/removed. Declaration IBlockingEvent<AGSListChangedEventArgs<IComponent>> OnComponentsChanged { get; } Property Value Type Description IBlockingEvent < AGSListChangedEventArgs < IComponent >> The event. | Improve this Doc View Source OnComponentsInitialized An event that fires after all components were initialized. Declaration IBlockingEvent OnComponentsInitialized { get; } Property Value Type Description IBlockingEvent The event. Methods | Improve this Doc View Source AddComponent(Type) Adds a new component with the specified type. Declaration IComponent AddComponent(Type componentType) Parameters Type Name Description System.Type componentType The component type. Returns Type Description IComponent The component, if added successfully, null otherwise (if a component with this type already exists). | Improve this Doc View Source AddComponent<TComponent>() Adds a new component with the specified type. Declaration TComponent AddComponent<TComponent>() where TComponent : IComponent Returns Type Description TComponent The component, if added successfully, null otherwise (if a component with this type already exists). Type Parameters Name Description TComponent The component type. | Improve this Doc View Source AddComponent<TComponent>(IComponent) Adds the specified component. Declaration bool AddComponent<TComponent>(IComponent component) where TComponent : IComponent Parameters Type Name Description IComponent component Component. Returns Type Description System.Boolean true , if component was added, false otherwise (if a component with this type already exists). Type Parameters Name Description TComponent The component type (with which it will be registered and can be queried by other components). Examples The type parameter is used to specify under which type the component will be registed in the entity. Suppose you want to replace an existing component in the entity, for example the rotation component. By using IRotateComponent as your type parameter, other components will get your component back when querying for IRotateComponent . Your component should implement IRotateComponent . public class MyRotateComponent : AGSComponent, IRotateComponent { ... } var myRotate = new MyRotateComponent(); var existingRotate = obj.GetComponent<IRotateComponent>(); Console.WriteLine(myRotate == existingRotate); //Writes \"false\" obj.RemoveComponent<IRotateComponent>(); obj.AddComponent<IRotateComponent>(myRotate); existingRotate = obj.GetComponent<IRotateComponent>(); Console.WriteLine(myRotate == existingRotate); //Writes \"true\" | Improve this Doc View Source Bind<TComponent>(Action<TComponent>, Action<TComponent>) Bind actions to when a component is added/removed. Declaration IComponentBinding Bind<TComponent>(Action<TComponent> onAdded, Action<TComponent> onRemoved) where TComponent : IComponent Parameters Type Name Description System.Action <TComponent> onAdded Callback to be called when component is added. System.Action <TComponent> onRemoved Callback to be called when component is removed. Returns Type Description IComponentBinding The binding. Type Parameters Name Description TComponent The 1st type parameter. | Improve this Doc View Source GetComponent(Type) Gets the component of the specified type. Declaration IComponent GetComponent(Type componentType) Parameters Type Name Description System.Type componentType Returns Type Description IComponent The component if found, null if no components of this type in the collection. | Improve this Doc View Source GetComponent<TComponent>() Gets the component of the specified type. Declaration TComponent GetComponent<TComponent>() where TComponent : IComponent Returns Type Description TComponent The component if found, null if no components of this type in the collection. Type Parameters Name Description TComponent The component type. | Improve this Doc View Source HasComponent(IComponent) Is the specified component in the collection? Declaration bool HasComponent(IComponent component) Parameters Type Name Description IComponent component Returns Type Description System.Boolean true , if component exists, false otherwise. | Improve this Doc View Source HasComponent(Type) Is there a component of the specified type in the collection? Declaration bool HasComponent(Type componentType) Parameters Type Name Description System.Type componentType Returns Type Description System.Boolean true , if component exists, false otherwise. | Improve this Doc View Source HasComponent<TComponent>() Is there a component of the specified type in the collection? Declaration bool HasComponent<TComponent>() where TComponent : IComponent Returns Type Description System.Boolean true , if component exists, false otherwise. Type Parameters Name Description TComponent The component type. | Improve this Doc View Source OnDisposed(Action) Subscribe to actions that will happen once the entity is disposed. If then entity was already disposed when calling this, the action will be executed immediately. Declaration void OnDisposed(Action onDisposed) Parameters Type Name Description System.Action onDisposed The action to perform on entity disposal. | Improve this Doc View Source PopComponent<TComponent>() Removes the component with the specified type and returns it (if it exists). Declaration TComponent PopComponent<TComponent>() where TComponent : IComponent Returns Type Description TComponent The component if it was found and removed, null otherwise. Type Parameters Name Description TComponent The component type. | Improve this Doc View Source RemoveComponent(IComponent) Removes the specified component. Declaration bool RemoveComponent(IComponent component) Parameters Type Name Description IComponent component Component. Returns Type Description System.Boolean true , if component was removed, false otherwise. | Improve this Doc View Source RemoveComponent(Type) Removes the component with the specified type (if it exists). Declaration bool RemoveComponent(Type componentType) Parameters Type Name Description System.Type componentType The component type. Returns Type Description System.Boolean true , if component was removed, false otherwise. | Improve this Doc View Source RemoveComponent<TComponent>() Removes the component with the specified type (if it exists). Declaration bool RemoveComponent<TComponent>() where TComponent : IComponent Returns Type Description System.Boolean true , if component was removed, false otherwise. Type Parameters Name Description TComponent The component type."
  },
  "api/AGS.API.IComponentBinding.html": {
    "href": "api/AGS.API.IComponentBinding.html",
    "title": "Interface IComponentBinding | MonoAGS Documentation",
    "keywords": "Interface IComponentBinding Represents binding of actions to be performed when a component is added/removed. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IComponentBinding Methods | Improve this Doc View Source Unbind() Unbind the trigger actions. Declaration void Unbind()"
  },
  "api/AGS.API.IComponent.html": {
    "href": "api/AGS.API.IComponent.html",
    "title": "Interface IComponent | MonoAGS Documentation",
    "keywords": "Interface IComponent A component can be added to an entity (object/character/button/etc), and add additional behavior to it. Inherited Members System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IComponent : IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source Entity The entity which holds this component. Declaration IEntity Entity { get; } Property Value Type Description IEntity | Improve this Doc View Source Name The name of the component. Declaration string Name { get; } Property Value Type Description System.String | Improve this Doc View Source RegistrationType The type under which the component was registered with the entity. Declaration Type RegistrationType { get; } Property Value Type Description System.Type Methods | Improve this Doc View Source AfterInit() This called after all the components have been initialized. If the component requires data from another component AFTER it has been initialized, this is the place to do it. Declaration void AfterInit() | Improve this Doc View Source Init(IEntity, Type) Initializes the component. If the component is dependant on other components, they should be retrieved here using entity.GetComponent. Declaration void Init(IEntity entity, Type registrationType) Parameters Type Name Description IEntity entity The entity which holds this component. System.Type registrationType The type under which the component was registered with the entity."
  },
  "api/AGS.API.IComboBoxComponent.html": {
    "href": "api/AGS.API.IComboBoxComponent.html",
    "title": "Interface IComboBoxComponent | MonoAGS Documentation",
    "keywords": "Interface IComboBoxComponent The combo box component allows having the entity behave like a drop-down for selecting an item from a list. Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IComboBoxComponent : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source DropDownButton Gets or sets the drop down button, which shows the drop down list when clicked. Declaration IButton DropDownButton { get; set; } Property Value Type Description IButton The drop down button. | Improve this Doc View Source DropDownPanel Sets the drop down panel which hosts the selection item. Declaration IListbox DropDownPanel { get; set; } Property Value Type Description IListbox | Improve this Doc View Source DropDownPanelList Gets the drop down panel list of items. Declaration IListboxComponent DropDownPanelList { get; } Property Value Type Description IListboxComponent The drop down panel. | Improve this Doc View Source MarkComboboxSuggestion Allows to override the behavior when marking suggestions on the dropdown as the user types text in the textbox. By default, the suggestion is given an orange color, but if you want a different behavior, set this callback which gets 2 parameters: the old button which is no longer the current marked suggestion (passed to clear the current mark) and the new button which is the new suggestion in the dropdown (passed to \"draw\" the mark on the button). Declaration Action<IButton, IButton> MarkComboboxSuggestion { get; set; } Property Value Type Description System.Action < IButton , IButton > The mark suggestion. | Improve this Doc View Source SuggestMode Gets or sets the suggestion mode (how does the combobox behave when the user types text directly in the textbox instead of using the dropdown button). Declaration ComboSuggest SuggestMode { get; set; } Property Value Type Description ComboSuggest The suggestion mode. | Improve this Doc View Source TextBox Gets or sets the text box which shows the display text of the selected item. Declaration ITextBox TextBox { get; set; } Property Value Type Description ITextBox The text box."
  },
  "api/AGS.API.IComboBox.html": {
    "href": "api/AGS.API.IComboBox.html",
    "title": "Interface IComboBox | MonoAGS Documentation",
    "keywords": "Interface IComboBox A pre-set entity with all of the UI control components, plus a combo box component (a drop-down). Inherited Members IComboBoxComponent.TextBox IComboBoxComponent.DropDownButton IComboBoxComponent.DropDownPanel IComboBoxComponent.DropDownPanelList IComboBoxComponent.SuggestMode IComboBoxComponent.MarkComboboxSuggestion IUIEvents.MouseEnter IUIEvents.MouseLeave IUIEvents.MouseMove IUIEvents.MouseClicked IUIEvents.MouseDoubleClicked IUIEvents.MouseDown IUIEvents.MouseUp IUIEvents.LostFocus IUIEvents.IsMouseIn ISkinComponent.Skin ISkinComponent.SkinTags IEntity.ID IEntity.DisplayName IEntity.GetFriendlyName() IComponentsCollection.AddComponent<TComponent>() IComponentsCollection.AddComponent(Type) IComponentsCollection.AddComponent<TComponent>(IComponent) IComponentsCollection.RemoveComponent<TComponent>() IComponentsCollection.RemoveComponent(Type) IComponentsCollection.RemoveComponent(IComponent) IComponentsCollection.PopComponent<TComponent>() IComponentsCollection.HasComponent<TComponent>() IComponentsCollection.HasComponent(Type) IComponentsCollection.HasComponent(IComponent) IComponentsCollection.GetComponent<TComponent>() IComponentsCollection.GetComponent(Type) IComponentsCollection.Bind<TComponent>(Action<TComponent>, Action<TComponent>) IComponentsCollection.Count IComponentsCollection.ComponentsInitialized IComponentsCollection.OnComponentsInitialized IComponentsCollection.OnComponentsChanged IComponentsCollection.OnDisposed(Action) System.Collections.Generic.IEnumerable<AGS.API.IComponent>.GetEnumerator() IHasRoomComponent.Room IHasRoomComponent.PreviousRoom IHasRoomComponent.OnRoomChanged IHasRoomComponent.ChangeRoomAsync(IRoom, Nullable<Single>, Nullable<Single>) IAnimationComponent.Animation IAnimationComponent.OnAnimationStarted IAnimationComponent.StartAnimation(IAnimation) IAnimationComponent.Animate(IAnimation) IAnimationComponent.AnimateAsync(IAnimation) IInTree<IObject>.TreeNode IColliderComponent.CenterPoint IColliderComponent.CollidesWith(Single, Single, IViewport) IVisibleComponent.Visible IVisibleComponent.UnderlyingVisible IEnabledComponent.Enabled IEnabledComponent.UnderlyingEnabled IEnabledComponent.ClickThrough ICustomPropertiesComponent.Properties IDrawableInfoComponent.RenderLayer IDrawableInfoComponent.IgnoreViewport IDrawableInfoComponent.IgnoreScalingArea IShaderComponent.Shader IImageComponent.IsImageVisible IImageComponent.CurrentSprite IImageComponent.SpriteProvider IBorderComponent.Border IPixelPerfectComponent.IsPixelPerfect IPixelPerfectCollidable.PixelPerfectHitTestArea IScale.Height IScale.Width IScale.ScaleX IScale.ScaleY IScale.Scale IScale.BaseSize IScale.ResetScale() IScale.ResetScale(Single, Single) IScale.ScaleTo(Single, Single) IScale.FlipHorizontally() IScale.FlipVertically() IRotate.Angle ITranslate.Position ITranslate.X ITranslate.Y ITranslate.Z IHasImage.Opacity IHasImage.Tint IHasImage.Brightness IHasImage.Pivot IHasImage.Image IModelMatrixComponent.GetModelMatrices() IModelMatrixComponent.OnMatrixChanged IModelMatrixComponent.ModelMatrixLockStep IBoundingBoxComponent.GetBoundingBoxes(IViewport) IBoundingBoxComponent.WorldBoundingBox IBoundingBoxComponent.OnBoundingBoxesChanged IBoundingBoxComponent.BoundingBoxLockStep IWorldPositionComponent.WorldX IWorldPositionComponent.WorldY IWorldPositionComponent.WorldXY IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IComboBox : IComboBoxComponent, IUIControl, IUIEvents, ISkinComponent, IObject, IEntity, IComponentsCollection, IEnumerable<IComponent>, IEnumerable, IHasRoomComponent, IAnimationComponent, IInObjectTreeComponent, IInTree<IObject>, IColliderComponent, IVisibleComponent, IEnabledComponent, ICustomPropertiesComponent, IDrawableInfoComponent, IShaderComponent, ITranslateComponent, IImageComponent, IBorderComponent, IScaleComponent, IRotateComponent, IPixelPerfectComponent, IPixelPerfectCollidable, IHasModelMatrix, IScale, IRotate, ITranslate, IHasImage, IModelMatrixComponent, IBoundingBoxComponent, IWorldPositionComponent, IComponent, IDisposable, INotifyPropertyChanged"
  },
  "api/AGS.API.IColorBlend.html": {
    "href": "api/AGS.API.IColorBlend.html",
    "title": "Interface IColorBlend | MonoAGS Documentation",
    "keywords": "Interface IColorBlend Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IColorBlend Properties | Improve this Doc View Source Colors Declaration Color[] Colors { get; } Property Value Type Description Color [] | Improve this Doc View Source Positions Declaration float[] Positions { get; } Property Value Type Description System.Single []"
  },
  "api/AGS.API.IColliderComponent.html": {
    "href": "api/AGS.API.IColliderComponent.html",
    "title": "Interface IColliderComponent | MonoAGS Documentation",
    "keywords": "Interface IColliderComponent Adds the ability for an entity to check collisions (i.e check whether it collides with a point in the room). The collision is checked via either the entity's bounding box, or via a pixel perfect collision if the IPixelPerfectComponent exists and enabled. Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax [RequiredComponent(typeof(IDrawableInfoComponent), true)] [RequiredComponent(typeof(IScaleComponent), true)] [RequiredComponent(typeof(IPixelPerfectComponent), true)] public interface IColliderComponent : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source CenterPoint Gets the center point of the entity. Declaration PointF? CenterPoint { get; } Property Value Type Description System.Nullable < PointF > The center point. Methods | Improve this Doc View Source CollidesWith(Single, Single, IViewport) Does the entity collide with point (x,y)? The (x,y) is expected in room-coordinates after adjusting for the viewport. The collision is checked via either the entity's bounding box, or via a pixel perfect collision if the IPixelPerfectComponent exists and enabled. Declaration bool CollidesWith(float x, float y, IViewport viewport) Parameters Type Name Description System.Single x The x coordinate. System.Single y The y coordinate. IViewport viewport The viewport to check the collisions against Returns Type Description System.Boolean true , if it collides with the point, false otherwise."
  },
  "api/AGS.API.IClippingPlane.html": {
    "href": "api/AGS.API.IClippingPlane.html",
    "title": "Interface IClippingPlane | MonoAGS Documentation",
    "keywords": "Interface IClippingPlane A clipping plane allows clipping objects (i.e hiding objects) if they're on the wrong side of the plane. A near clipping plane is for clipping objects which are too close to the camera, and a far clipping plane is for clipping objects which are too far from the camera. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IClippingPlane Properties | Improve this Doc View Source IsPlaneObjectClipped Gets a value indicating whether the PlaneObject (i.e the object representing the plane) should be clipped or not. Declaration bool IsPlaneObjectClipped { get; } Property Value Type Description System.Boolean true if is plane object clipped; otherwise, false . | Improve this Doc View Source LayersToClip Gets a list of layers on which to check clipping against this plane. If this is null, all layers will be checked. Declaration IReadOnlyList<IRenderLayer> LayersToClip { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < IRenderLayer > The layers to clip. | Improve this Doc View Source PlaneObject Gets an object to which the plane will be bound. All objects that are to be rendered behind the object will not be shown if the clipping plane in question is a far clipping plane, and all objects that are to be rendered in front of the object will not be shown if the clipping plane in question is a near clipping plane. Declaration IObject PlaneObject { get; } Property Value Type Description IObject The plane object."
  },
  "api/AGS.API.IChildrenCollection.html": {
    "href": "api/AGS.API.IChildrenCollection.html",
    "title": "Interface IChildrenCollection | MonoAGS Documentation",
    "keywords": "Interface IChildrenCollection A collection of children (to be used in a tree like structure). Inherited Members System.Collections.Generic.IEnumerable<AGS.API.IObject>.GetEnumerator() Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IChildrenCollection : IEnumerable<IObject>, IEnumerable Properties | Improve this Doc View Source Count The number of children. Declaration int Count { get; } Property Value Type Description System.Int32 The count. Methods | Improve this Doc View Source AddChild(IObject) Adds a child. Declaration void AddChild(IObject child) Parameters Type Name Description IObject child Child. | Improve this Doc View Source HasChild(IObject) Checks whether the specified object is a child in this collection. Declaration bool HasChild(IObject child) Parameters Type Name Description IObject child Child. Returns Type Description System.Boolean true , if this is one of the existing children, false otherwise. | Improve this Doc View Source RemoveChild(IObject) Removes the child. Declaration void RemoveChild(IObject child) Parameters Type Name Description IObject child Child."
  },
  "api/AGS.API.ICheckboxComponent.html": {
    "href": "api/AGS.API.ICheckboxComponent.html",
    "title": "Interface ICheckboxComponent | MonoAGS Documentation",
    "keywords": "Interface ICheckboxComponent The checkbox component allows having an entity behave like a checkbox (can be checked an unchecked). Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax [RequiredComponent(typeof(IUIEvents), true)] [RequiredComponent(typeof(IAnimationComponent), true)] [RequiredComponent(typeof(ITextComponent), false)] [RequiredComponent(typeof(IImageComponent), false)] [RequiredComponent(typeof(IBorderComponent), false)] public interface ICheckboxComponent : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source Checked Gets or sets a value indicating whether this ICheckboxComponent is checked. Declaration bool Checked { get; set; } Property Value Type Description System.Boolean true if checked; otherwise, false . | Improve this Doc View Source CheckedAnimation Gets or sets the animation when the checkbox is checked. Declaration ButtonAnimation CheckedAnimation { get; set; } Property Value Type Description ButtonAnimation The checked animation. | Improve this Doc View Source HoverCheckedAnimation Gets or sets the animation when the checkbox is checked and the mouse is hovering over it. Declaration ButtonAnimation HoverCheckedAnimation { get; set; } Property Value Type Description ButtonAnimation The hover checked animation. | Improve this Doc View Source HoverNotCheckedAnimation Gets or sets the animation when the checkbox is not checked and the mouse is hovering over it. Declaration ButtonAnimation HoverNotCheckedAnimation { get; set; } Property Value Type Description ButtonAnimation The hover not checked animation. | Improve this Doc View Source NotCheckedAnimation Gets or sets the animation when the checkbox is not checked. Declaration ButtonAnimation NotCheckedAnimation { get; set; } Property Value Type Description ButtonAnimation The not checked animation. | Improve this Doc View Source OnCheckChanged An event which is triggered whenever the check state changes. Declaration IBlockingEvent<CheckBoxEventArgs> OnCheckChanged { get; } Property Value Type Description IBlockingEvent < CheckBoxEventArgs > The event. | Improve this Doc View Source RadioGroup Allows setting a radio group, which can be used to group multiple checkboxes together to guarantee that only a single checkbox is checked at any given time. Declaration IRadioGroup RadioGroup { get; set; } Property Value Type Description IRadioGroup The radio group. | Improve this Doc View Source TextLabel An optional text label to accompany the checkbox. Declaration ILabel TextLabel { get; set; } Property Value Type Description ILabel The text label."
  },
  "api/AGS.API.ICheckBox.html": {
    "href": "api/AGS.API.ICheckBox.html",
    "title": "Interface ICheckBox | MonoAGS Documentation",
    "keywords": "Interface ICheckBox A pre-set entity with all of the UI control components, plus a checkbox component. Inherited Members IUIEvents.MouseEnter IUIEvents.MouseLeave IUIEvents.MouseMove IUIEvents.MouseClicked IUIEvents.MouseDoubleClicked IUIEvents.MouseDown IUIEvents.MouseUp IUIEvents.LostFocus IUIEvents.IsMouseIn ISkinComponent.Skin ISkinComponent.SkinTags IEntity.ID IEntity.DisplayName IEntity.GetFriendlyName() IComponentsCollection.AddComponent<TComponent>() IComponentsCollection.AddComponent(Type) IComponentsCollection.AddComponent<TComponent>(IComponent) IComponentsCollection.RemoveComponent<TComponent>() IComponentsCollection.RemoveComponent(Type) IComponentsCollection.RemoveComponent(IComponent) IComponentsCollection.PopComponent<TComponent>() IComponentsCollection.HasComponent<TComponent>() IComponentsCollection.HasComponent(Type) IComponentsCollection.HasComponent(IComponent) IComponentsCollection.GetComponent<TComponent>() IComponentsCollection.GetComponent(Type) IComponentsCollection.Bind<TComponent>(Action<TComponent>, Action<TComponent>) IComponentsCollection.Count IComponentsCollection.ComponentsInitialized IComponentsCollection.OnComponentsInitialized IComponentsCollection.OnComponentsChanged IComponentsCollection.OnDisposed(Action) System.Collections.Generic.IEnumerable<AGS.API.IComponent>.GetEnumerator() IHasRoomComponent.Room IHasRoomComponent.PreviousRoom IHasRoomComponent.OnRoomChanged IHasRoomComponent.ChangeRoomAsync(IRoom, Nullable<Single>, Nullable<Single>) IAnimationComponent.Animation IAnimationComponent.OnAnimationStarted IAnimationComponent.StartAnimation(IAnimation) IAnimationComponent.Animate(IAnimation) IAnimationComponent.AnimateAsync(IAnimation) IInTree<IObject>.TreeNode IColliderComponent.CenterPoint IColliderComponent.CollidesWith(Single, Single, IViewport) IVisibleComponent.Visible IVisibleComponent.UnderlyingVisible IEnabledComponent.Enabled IEnabledComponent.UnderlyingEnabled IEnabledComponent.ClickThrough ICustomPropertiesComponent.Properties IDrawableInfoComponent.RenderLayer IDrawableInfoComponent.IgnoreViewport IDrawableInfoComponent.IgnoreScalingArea IShaderComponent.Shader IImageComponent.IsImageVisible IImageComponent.CurrentSprite IImageComponent.SpriteProvider IBorderComponent.Border IPixelPerfectComponent.IsPixelPerfect IPixelPerfectCollidable.PixelPerfectHitTestArea IScale.Height IScale.Width IScale.ScaleX IScale.ScaleY IScale.Scale IScale.BaseSize IScale.ResetScale() IScale.ResetScale(Single, Single) IScale.ScaleTo(Single, Single) IScale.FlipHorizontally() IScale.FlipVertically() IRotate.Angle ITranslate.Position ITranslate.X ITranslate.Y ITranslate.Z IHasImage.Opacity IHasImage.Tint IHasImage.Brightness IHasImage.Pivot IHasImage.Image IModelMatrixComponent.GetModelMatrices() IModelMatrixComponent.OnMatrixChanged IModelMatrixComponent.ModelMatrixLockStep IBoundingBoxComponent.GetBoundingBoxes(IViewport) IBoundingBoxComponent.WorldBoundingBox IBoundingBoxComponent.OnBoundingBoxesChanged IBoundingBoxComponent.BoundingBoxLockStep IWorldPositionComponent.WorldX IWorldPositionComponent.WorldY IWorldPositionComponent.WorldXY ICheckboxComponent.Checked ICheckboxComponent.OnCheckChanged ICheckboxComponent.NotCheckedAnimation ICheckboxComponent.HoverNotCheckedAnimation ICheckboxComponent.CheckedAnimation ICheckboxComponent.HoverCheckedAnimation ICheckboxComponent.TextLabel ICheckboxComponent.RadioGroup IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ICheckBox : IUIControl, IUIEvents, ISkinComponent, IObject, IEntity, IComponentsCollection, IEnumerable<IComponent>, IEnumerable, IHasRoomComponent, IAnimationComponent, IInObjectTreeComponent, IInTree<IObject>, IColliderComponent, IVisibleComponent, IEnabledComponent, ICustomPropertiesComponent, IDrawableInfoComponent, IShaderComponent, ITranslateComponent, IImageComponent, IBorderComponent, IScaleComponent, IRotateComponent, IPixelPerfectComponent, IPixelPerfectCollidable, IHasModelMatrix, IScale, IRotate, ITranslate, IHasImage, IModelMatrixComponent, IBoundingBoxComponent, IWorldPositionComponent, ICheckboxComponent, IComponent, IDisposable, INotifyPropertyChanged"
  },
  "api/AGS.API.IHotspotComponent.html": {
    "href": "api/AGS.API.IHotspotComponent.html",
    "title": "Interface IHotspotComponent | MonoAGS Documentation",
    "keywords": "Interface IHotspotComponent Allows an entity to act as a hotspot (i.e can be interacted with). Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IHotspotComponent : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source DisplayHotspot Gets or sets whether the hotspot name should be shown by a hotspot label when hovering over the entity. DisplayName Declaration bool DisplayHotspot { get; set; } Property Value Type Description System.Boolean true if display hotspot's name; otherwise, false . | Improve this Doc View Source Interactions Allows subscribing to interaction events for this entity. Declaration IInteractions Interactions { get; } Property Value Type Description IInteractions The interactions. See Also IInteractions | Improve this Doc View Source WalkPoint Gets or sets an optional walk point for the entity which might be used before interacting with the entity, depending on how the IApproachComponent is configured. Declaration PointF? WalkPoint { get; set; } Property Value Type Description System.Nullable < PointF > The walk point. See Also IApproachStyle"
  },
  "api/AGS.API.IHitTest.html": {
    "href": "api/AGS.API.IHitTest.html",
    "title": "Interface IHitTest | MonoAGS Documentation",
    "keywords": "Interface IHitTest Responsible for returning the current object that is located under the mouse position. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IHitTest Properties | Improve this Doc View Source ObjectAtMousePosition Gets the object at the mouse position (this ignores objects that are not visible or enabled). If there is more than one object in that position it returns the one in front. Declaration IObject ObjectAtMousePosition { get; } Property Value Type Description IObject The object at mouse position. Methods | Improve this Doc View Source GetObjectAt(Single, Single, Predicate<IObject>) Gets the object at the (x,y) world position. If there is more than one object in that position it returns the one in front. You can also optionally pass a filter which allows to ignore specific objects from the hit tests. Note that if you just need the object at the mouse position, you should use ObjectAtMousePosition , this is cached every tick and will be faster. Declaration IObject GetObjectAt(float x, float y, Predicate<IObject> filter = null) Parameters Type Name Description System.Single x The x coordinate (in world co-ordinates). System.Single y The y coordinate (in world co-ordinates). System.Predicate < IObject > filter An optional filter. Returns Type Description IObject The IObject at that world position. Examples To get GUIs only you can do something like: var gui = hitTest.GetObjectAt(200, 100, obj => obj is IUIControl); if (gui == null) await cHero.SayAsync(\"There's no GUI at (200,100)\"); else await cHero.SayAsync($\"I see at {gui.DisplayName} at (200,100)!\");"
  },
  "api/AGS.API.IFont.html": {
    "href": "api/AGS.API.IFont.html",
    "title": "Interface IFont | MonoAGS Documentation",
    "keywords": "Interface IFont Represents a font which is used when drawing text. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IFont Properties | Improve this Doc View Source FontFamily Gets the font family. Declaration string FontFamily { get; } Property Value Type Description System.String The font family. | Improve this Doc View Source SizeInPoints Gets the size of the font in points ( http://www.computerhope.com/jargon/f/font-size.htm ). Declaration float SizeInPoints { get; } Property Value Type Description System.Single The size in points. | Improve this Doc View Source Style Gets the style of the font (regular, bold, italic, underline or strikeout). Declaration FontStyle Style { get; } Property Value Type Description FontStyle The style. Methods | Improve this Doc View Source MeasureString(String, Alignment, Int32) Measures the size that the text will take when using this font. Declaration SizeF MeasureString(string text, Alignment alignment, int maxWidth = 2147483647) Parameters Type Name Description System.String text Text. Alignment alignment The text alignment. System.Int32 maxWidth Max width if the text is expected to be wrapped, or int.MaxValue for unlimited width. Returns Type Description SizeF The size of the expected text. | Improve this Doc View Source Resize(Single) Returns a new font with the same properties as the current font, but with a new size. Declaration IFont Resize(float sizeInPoints) Parameters Type Name Description System.Single sizeInPoints Size in points. Returns Type Description IFont The resized font."
  },
  "api/AGS.API.IFollowSettings.html": {
    "href": "api/AGS.API.IFollowSettings.html",
    "title": "Interface IFollowSettings | MonoAGS Documentation",
    "keywords": "Interface IFollowSettings Configures how the character follow component behaves. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IFollowSettings Properties | Improve this Doc View Source FollowBetweenRooms Should the character follow the target when the target moves to a different room? Declaration bool FollowBetweenRooms { get; } Property Value Type Description System.Boolean true if follow between rooms; otherwise, false . | Improve this Doc View Source MaxWaitBetweenWalks Gets the maximum wait (in game ticks) the character wait between walks. This requires setting MinWaitBetweenWalks as well, and the wait time will be randomized each time between the minimum and maximum wait times. Declaration int MaxWaitBetweenWalks { get; } Property Value Type Description System.Int32 The minimum wait between walks. | Improve this Doc View Source MaxXOffset The maximum horizontal distance the follower will keep from the target. This requires setting MinXOffset as well, and the distance will be randomized each time between the minimum and maximum x. Declaration float MaxXOffset { get; } Property Value Type Description System.Single The maximum X Offset. | Improve this Doc View Source MaxXOffsetForWanderOff An optional maximum x offset for when wandering off (behaves similarly to MaxXOffset , just for the 'wander off' phase). If left out, the maximum x will be the right-most part of the room (regardless for where the target is). Declaration float? MaxXOffsetForWanderOff { get; } Property Value Type Description System.Nullable < System.Single > The maximum X Offset for wandering off. | Improve this Doc View Source MaxYOffset The minimum vertical distance the follower will keep from the target. This requires setting MinYOffset as well, and the distance will be randomized each time between the minimum and maximum y. Declaration float MaxYOffset { get; } Property Value Type Description System.Single The maximum Y Offset. | Improve this Doc View Source MaxYOffsetForWanderOff An optional maximum y offset for when wandering off (behaves similarly to MaxYOffset , just for the 'wander off' phase). If left out, the maximum y will be the top-most part of the room (regardless for where the target is). Declaration float? MaxYOffsetForWanderOff { get; } Property Value Type Description System.Nullable < System.Single > The maximum Y Offset for wandering off. | Improve this Doc View Source MinimumWalkingDistance It might look silly for a character to walk just a few pixels. This allows you to set the minimum distance from its current position that the follower will walk. Declaration float MinimumWalkingDistance { get; } Property Value Type Description System.Single | Improve this Doc View Source MinWaitBetweenWalks Gets the minimum wait (in game ticks) the character wait between walks. This requires setting MaxWaitBetweenWalks as well, and the wait time will be randomized each time between the minimum and maximum wait times. Declaration int MinWaitBetweenWalks { get; } Property Value Type Description System.Int32 The minimum wait between walks. | Improve this Doc View Source MinXOffset The minimum horizontal distance the follower will keep from the target. This requires setting MaxXOffset as well, and the distance will be randomized each time between the minimum and maximum x. Declaration float MinXOffset { get; } Property Value Type Description System.Single The minimum X Offset. | Improve this Doc View Source MinXOffsetForWanderOff An optional minimum x offset for when wandering off (behaves similarly to MinXOffset , just for the 'wander off' phase). If left out, the minimum x will be the left-most part of the room (regardless for where the target is). Declaration float? MinXOffsetForWanderOff { get; } Property Value Type Description System.Nullable < System.Single > The minimum X Offset for wandering off. | Improve this Doc View Source MinYOffset The minimum vertical distance the follower will keep from the target. This requires setting MaxYOffset as well, and the distance will be randomized each time between the minimum and maximum y. Declaration float MinYOffset { get; } Property Value Type Description System.Single The minimum Y Offset. | Improve this Doc View Source MinYOffsetForWanderOff An optional minimum y offset for when wandering off (behaves similarly to MinYOffset , just for the 'wander off' phase). If left out, the minimum y will be the bottom-most part of the room (regardless for where the target is). Declaration float? MinYOffsetForWanderOff { get; } Property Value Type Description System.Nullable < System.Single > The minimum y Offset for wandering off. | Improve this Doc View Source StayOnTheSameSideForXPercentage The probability (in percentage) that the character will stay on the same side of the target on the X axis (as opposed to getting around it) Declaration int StayOnTheSameSideForXPercentage { get; } Property Value Type Description System.Int32 | Improve this Doc View Source StayOnTheSameSideForYPercentage The probability (in percentage) that the character will stay on the same side of the target on the Y axis (as opposed to getting around it) Declaration int StayOnTheSameSideForYPercentage { get; } Property Value Type Description System.Int32 | Improve this Doc View Source StayPutPercentage The probability (in percentage) that the character will not move in the next walk, if she/he is already within allowed range of the target. Declaration int StayPutPercentage { get; } Property Value Type Description System.Int32 | Improve this Doc View Source WanderOffPercentage The probability (in percentage) that the next character walk will not actually be towards the target, but wandering off to somewhere else in the room. Declaration int WanderOffPercentage { get; } Property Value Type Description System.Int32 The wander off percentage."
  },
  "api/AGS.API.IEdge.html": {
    "href": "api/AGS.API.IEdge.html",
    "title": "Interface IEdge | MonoAGS Documentation",
    "keywords": "Interface IEdge Room edges are a convenient way for scripting a room change once a player walks beyond an edge. Each room has 4 edges, and this interface represents any of those edges. Inherited Members System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IEdge : INotifyPropertyChanged Properties | Improve this Doc View Source Enabled Gets or sets a value indicating whether this IEdge is enabled. If disabled, the OnEdgeCrossed event will not be fired on edge crossing. Declaration bool Enabled { get; set; } Property Value Type Description System.Boolean true if enabled; otherwise, false . | Improve this Doc View Source OnEdgeCrossed An event which is fired when the player character crosses the edge from inside to outside. Declaration IBlockingEvent OnEdgeCrossed { get; } Property Value Type Description IBlockingEvent The on edge crossed. | Improve this Doc View Source Value Gets or sets the edge's value (if it's left/right edge then it's an X value, if it's top/bottom edge then it's a Y value). Whether X or Y, the value is used in room coordinates. Declaration float Value { get; set; } Property Value Type Description System.Single The value."
  },
  "api/AGS.API.IDrawableInfoComponent.html": {
    "href": "api/AGS.API.IDrawableInfoComponent.html",
    "title": "Interface IDrawableInfoComponent | MonoAGS Documentation",
    "keywords": "Interface IDrawableInfoComponent Adds the ability for an entity to configure various aspects of how it is rendered. Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IDrawableInfoComponent : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source IgnoreScalingArea Gets or sets a value indicating whether this entity's scaling is not affected by scaling areas in the room. If the scaling areas are ignored, then the entity will keep its scale even if it's \"sitting\" in a scaling areas. Therefore, it's on by default for GUI controls which usually are not part of the game world itself. Declaration bool IgnoreScalingArea { get; set; } Property Value Type Description System.Boolean true if ignore scaling area; otherwise, false . | Improve this Doc View Source IgnoreViewport Gets or sets a value indicating whether this entity's position is not affected by the viewport. If the viewport is ignored, then the entity will remain on the same place on the screen even if the camera moves around. Therefore, it's on by default for GUI controls which usually are not part of the game world itself. Declaration bool IgnoreViewport { get; set; } Property Value Type Description System.Boolean true if ignore viewport; otherwise, false . | Improve this Doc View Source RenderLayer Gets or sets the render layer associated with the entity. Declaration IRenderLayer RenderLayer { get; set; } Property Value Type Description IRenderLayer The render layer. See Also IRenderLayer"
  },
  "api/AGS.API.IDraggableComponent.html": {
    "href": "api/AGS.API.IDraggableComponent.html",
    "title": "Interface IDraggableComponent | MonoAGS Documentation",
    "keywords": "Interface IDraggableComponent Adds the ability for an entity to be dragged on the screen with the mouse/touch. Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax [RequiredComponent(typeof(ITranslateComponent), true)] [RequiredComponent(typeof(IDrawableInfoComponent), false)] [RequiredComponent(typeof(IUIEvents), true)] public interface IDraggableComponent : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source DragMaxX Allows to limit the dragging to a maximum x (as room coordinates after adjusting for the viewport). Declaration float? DragMaxX { get; set; } Property Value Type Description System.Nullable < System.Single > The drag maximum x. | Improve this Doc View Source DragMaxY Allows to limit the dragging to a maximum y (as room coordinates after adjusting for the viewport). Declaration float? DragMaxY { get; set; } Property Value Type Description System.Nullable < System.Single > The drag maximum y. | Improve this Doc View Source DragMinX Allows to limit the dragging to a minimum x (as room coordinates after adjusting for the viewport). Declaration float? DragMinX { get; set; } Property Value Type Description System.Nullable < System.Single > The drag minimum x. | Improve this Doc View Source DragMinY Allows to limit the dragging to a minimum y (as room coordinates after adjusting for the viewport). Declaration float? DragMinY { get; set; } Property Value Type Description System.Nullable < System.Single > The drag minimum y. | Improve this Doc View Source IsCurrentlyDragged Gets a value indicating whether this entity is currently dragged. Declaration bool IsCurrentlyDragged { get; } Property Value Type Description System.Boolean true if is currently dragged; otherwise, false . | Improve this Doc View Source IsDragEnabled Gets or sets a value indicating whether this entity can be dragged now. Declaration bool IsDragEnabled { get; set; } Property Value Type Description System.Boolean true if is drag enabled; otherwise, false . | Improve this Doc View Source OnDragStart Declaration IBlockingEvent<(float dragStartX, float dragStartY)> OnDragStart { get; } Property Value Type Description IBlockingEvent < System.ValueTuple < System.Single , System.Single >> Methods | Improve this Doc View Source SimulateMouseDown(MouseButtonEventArgs) Simulates a mouse down event. This can be useful if you add the draggable component after the mouse was already pressed down. Declaration void SimulateMouseDown(MouseButtonEventArgs args) Parameters Type Name Description MouseButtonEventArgs args Arguments."
  },
  "api/AGS.API.IDisplayListSettings.html": {
    "href": "api/AGS.API.IDisplayListSettings.html",
    "title": "Interface IDisplayListSettings | MonoAGS Documentation",
    "keywords": "Interface IDisplayListSettings Controls what is shown on screen for this display list. Inherited Members System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IDisplayListSettings : INotifyPropertyChanged Properties | Improve this Doc View Source DepthClipping Allows configuring depth clipping (i.e hiding objects if they are too close or too far from the camera). Declaration IDepthClipping DepthClipping { get; } Property Value Type Description IDepthClipping The depth clipping. | Improve this Doc View Source DisplayGUIs Should we display the GUIs? Declaration bool DisplayGUIs { get; set; } Property Value Type Description System.Boolean true if display GUI; otherwise, false . | Improve this Doc View Source DisplayRoom Should we display the objects in the room? Declaration bool DisplayRoom { get; set; } Property Value Type Description System.Boolean true if display room; otherwise, false . | Improve this Doc View Source RestrictionList Allows fine grain control over which entities will be displayed. Declaration IRestrictionList RestrictionList { get; } Property Value Type Description IRestrictionList The restriction list."
  },
  "api/AGS.API.IDisplayList.html": {
    "href": "api/AGS.API.IDisplayList.html",
    "title": "Interface IDisplayList | MonoAGS Documentation",
    "keywords": "Interface IDisplayList Represents an ordered list of objects that will be displayed on screen. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IDisplayList Methods | Improve this Doc View Source GetCursor() Gets the mouse cursor. Declaration IObject GetCursor() Returns Type Description IObject The cursor. | Improve this Doc View Source GetDisplayList(IViewport) Gets an ordered list of objects to display on screen. Declaration List<IObject> GetDisplayList(IViewport viewport) Parameters Type Name Description IViewport viewport Viewport. Returns Type Description System.Collections.Generic.List < IObject > The display list. | Improve this Doc View Source Update(Boolean) Update the display list (this is called every tick by the game engine itself). Declaration void Update(bool forceUpdate) Parameters Type Name Description System.Boolean forceUpdate Should we force an update of the display list?"
  },
  "api/AGS.API.IDirectionalAnimation.html": {
    "href": "api/AGS.API.IDirectionalAnimation.html",
    "title": "Interface IDirectionalAnimation | MonoAGS Documentation",
    "keywords": "Interface IDirectionalAnimation Allows grouping animations for different directions together (for example, walking left and right). This is used by the character when choosing a directional animation: if you don't assign all of the directions, the engine will attempt to choose the best direction based on what you have assigned. So, for example, if you only assign Left and Right animations for your walk animation, and the player is attempting to walk down-right, the engine will use the Right animation. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IDirectionalAnimation Properties | Improve this Doc View Source Down Gets or sets the down direction animation. Declaration IAnimation Down { get; set; } Property Value Type Description IAnimation The down direction animation. | Improve this Doc View Source DownLeft Gets or sets the down and left direction animation. Declaration IAnimation DownLeft { get; set; } Property Value Type Description IAnimation The down and left direction animation. | Improve this Doc View Source DownRight Gets or sets the down and right direction animation. Declaration IAnimation DownRight { get; set; } Property Value Type Description IAnimation The down and right direction animation. | Improve this Doc View Source Left Gets or sets the left direction animation. Declaration IAnimation Left { get; set; } Property Value Type Description IAnimation The left direction animation. | Improve this Doc View Source Right Gets or sets the right direction animation. Declaration IAnimation Right { get; set; } Property Value Type Description IAnimation The right direction animation. | Improve this Doc View Source Up Gets or sets the up direction animation. Declaration IAnimation Up { get; set; } Property Value Type Description IAnimation The up direction animation. | Improve this Doc View Source UpLeft Gets or sets the up and left direction animation. Declaration IAnimation UpLeft { get; set; } Property Value Type Description IAnimation The up and left direction animation. | Improve this Doc View Source UpRight Gets or sets the up and right direction animation. Declaration IAnimation UpRight { get; set; } Property Value Type Description IAnimation The up and right direction animation. Methods | Improve this Doc View Source GetAllDirections() Allows to iterate on all assigned directions. Declaration IEnumerable<IAnimation> GetAllDirections() Returns Type Description System.Collections.Generic.IEnumerable < IAnimation > All assigned directions."
  },
  "api/AGS.API.ICustomSearchItem.html": {
    "href": "api/AGS.API.ICustomSearchItem.html",
    "title": "Interface ICustomSearchItem | MonoAGS Documentation",
    "keywords": "Interface ICustomSearchItem Allows providing behavior for custom searching text in tree view or list box. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ICustomSearchItem Methods | Improve this Doc View Source Contains(String) Is the search text contained in the item? Declaration bool Contains(string searchText) Parameters Type Name Description System.String searchText Search text. Returns Type Description System.Boolean The contains."
  },
  "api/AGS.API.ICustomPropertiesPerType-1.html": {
    "href": "api/AGS.API.ICustomPropertiesPerType-1.html",
    "title": "Interface ICustomPropertiesPerType<TValue> | MonoAGS Documentation",
    "keywords": "Interface ICustomPropertiesPerType<TValue> Custom properties that you can attach to entities and can be used to get/set values during the game. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ICustomPropertiesPerType<TValue> Type Parameters Name Description TValue Methods | Improve this Doc View Source AllProperties() Returns a dictionary with all existing custom properties for this type. Declaration IDictionary<string, TValue> AllProperties() Returns Type Description System.Collections.Generic.IDictionary < System.String , TValue> The properties. | Improve this Doc View Source CopyFrom(ICustomPropertiesPerType<TValue>) Copies the custom properties from a different object (this will override values in the current object, but will not delete properties which don't have an equivalent in the given object). Declaration void CopyFrom(ICustomPropertiesPerType<TValue> properties) Parameters Type Name Description ICustomPropertiesPerType <TValue> properties Properties. | Improve this Doc View Source GetValue(String, TValue) Gets the stored value for the custom property with the specified name. If no value is stored for this property, returns the specified default value instead (and stored that default value as the property's new value). Declaration TValue GetValue(string name, TValue defaultValue = null) Parameters Type Name Description System.String name Name. TValue defaultValue Default value. Returns Type Description TValue The value. | Improve this Doc View Source SetValue(String, TValue) Stores a new value for the custom property with the specified name. If an old value is stored it will be overridden by the new value. Declaration void SetValue(string name, TValue value) Parameters Type Name Description System.String name Name. TValue value Value."
  },
  "api/AGS.API.ICustomPropertiesComponent.html": {
    "href": "api/AGS.API.ICustomPropertiesComponent.html",
    "title": "Interface ICustomPropertiesComponent | MonoAGS Documentation",
    "keywords": "Interface ICustomPropertiesComponent Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ICustomPropertiesComponent : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source Properties Custom properties that are attached to the entity and can be used to get/set values during the game. Declaration ICustomProperties Properties { get; } Property Value Type Description ICustomProperties"
  },
  "api/AGS.API.ICustomProperties.html": {
    "href": "api/AGS.API.ICustomProperties.html",
    "title": "Interface ICustomProperties | MonoAGS Documentation",
    "keywords": "Interface ICustomProperties Custom properties that you can attach to entities and can be used to get/set values during the game. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ICustomProperties Properties | Improve this Doc View Source Bools Gets a collection of properties which type is a boolean (true/false). Declaration ICustomPropertiesPerType<bool> Bools { get; } Property Value Type Description ICustomPropertiesPerType < System.Boolean > The bools. | Improve this Doc View Source Entities Gets a collection of properties which type is an entity (can be any game object). Declaration ICustomPropertiesPerType<IEntity> Entities { get; } Property Value Type Description ICustomPropertiesPerType < IEntity > The entities. | Improve this Doc View Source Floats Gets a collection of properties which type is a float (numbers with decimal point). Declaration ICustomPropertiesPerType<float> Floats { get; } Property Value Type Description ICustomPropertiesPerType < System.Single > The floats. | Improve this Doc View Source Ints Gets a collection of properties which type is an integer (whole numbers). Declaration ICustomPropertiesPerType<int> Ints { get; } Property Value Type Description ICustomPropertiesPerType < System.Int32 > The ints. | Improve this Doc View Source Strings Gets a collection of properties which type is a string (text). Declaration ICustomPropertiesPerType<string> Strings { get; } Property Value Type Description ICustomPropertiesPerType < System.String > The strings. Methods | Improve this Doc View Source CopyFrom(ICustomProperties) Copies the custom properties from the specified object into this object. This will override existing values, but will not delete custom properties with no equivalent in the given object. Declaration void CopyFrom(ICustomProperties properties) Parameters Type Name Description ICustomProperties properties Properties. | Improve this Doc View Source RegisterCustomData(ICustomSerializable) Declaration void RegisterCustomData(ICustomSerializable customData) Parameters Type Name Description ICustomSerializable customData"
  },
  "api/AGS.API.ICrossFading.html": {
    "href": "api/AGS.API.ICrossFading.html",
    "title": "Interface ICrossFading | MonoAGS Documentation",
    "keywords": "Interface ICrossFading Allows to set how cross fading audio clips between rooms behaves. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ICrossFading Properties | Improve this Doc View Source EaseFadeIn If the audio clip for the new room is set to fade in, this allows you to set the easing function for the fade in (linear, ease-in, etc). Declaration Func<float, float> EaseFadeIn { get; set; } Property Value Type Description System.Func < System.Single , System.Single > The ease fade out. Examples game.AudioSettings.RoomMusicCrossFading.EaseFadeIn = Ease.CubeInOut; | Improve this Doc View Source EaseFadeOut If the audio clip for the old room is set to fade out, this allows you to set the easing function for the fade out (linear, ease-in, etc). Declaration Func<float, float> EaseFadeOut { get; set; } Property Value Type Description System.Func < System.Single , System.Single > The ease fade out. Examples game.AudioSettings.RoomMusicCrossFading.EaseFadeOut = Ease.QuadOut; | Improve this Doc View Source FadeIn Should the audio clip for the new room fade in while transistioning to the new room? Declaration bool FadeIn { get; set; } Property Value Type Description System.Boolean true if fade in; otherwise, false . | Improve this Doc View Source FadeInSeconds If the audio clip for the new room is set to fade in, how long (in seconds) should the fade in take? Declaration float FadeInSeconds { get; set; } Property Value Type Description System.Single The fade in seconds. | Improve this Doc View Source FadeOut Should the audio clip for the old room fade out while transistioning to the new room? Declaration bool FadeOut { get; set; } Property Value Type Description System.Boolean true if fade out; otherwise, false . | Improve this Doc View Source FadeOutSeconds If the audio clip for the old room is set to fade out, how long (in seconds) should the fade out take? Declaration float FadeOutSeconds { get; set; } Property Value Type Description System.Single The fade out seconds."
  },
  "api/AGS.API.ICropSelfComponent.html": {
    "href": "api/AGS.API.ICropSelfComponent.html",
    "title": "Interface ICropSelfComponent | MonoAGS Documentation",
    "keywords": "Interface ICropSelfComponent Adds the ability to crop the shown image (only show part of the image). Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ICropSelfComponent : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source CropArea The visible area (everything else will be cropped), where (0,0) is the bottom-left corner. Declaration RectangleF CropArea { get; set; } Property Value Type Description RectangleF | Improve this Doc View Source CropEnabled Gets or sets a value indicating whether this ICropSelfComponent crop is enabled. Declaration bool CropEnabled { get; set; } Property Value Type Description System.Boolean true if crop enabled; otherwise, false . | Improve this Doc View Source LastCrop The information on the last crop. Declaration AGSCropInfo LastCrop { get; } Property Value Type Description AGSCropInfo The last crop. | Improve this Doc View Source NeverGuaranteedToFullyCrop Gets or sets a value indicating whether this ICropSelfComponent is never guaranteed to fully crop (so calling IsGuaranteedToFullyCrop() will always return true, ensuring bounding box calculations are always performed on this entity (even if it's outside a scrolling panel). Declaration bool NeverGuaranteedToFullyCrop { get; set; } Property Value Type Description System.Boolean true if never guaranteed to fully crop; otherwise, false . | Improve this Doc View Source OnBeforeCrop An event which fires before cropping the area, allows to change the crop configuration. Declaration IBlockingEvent<BeforeCropEventArgs> OnBeforeCrop { get; } Property Value Type Description IBlockingEvent < BeforeCropEventArgs > The on before crop. Methods | Improve this Doc View Source Crop(ref AGSBoundingBox, BoundingBoxType, PointF) Calculates and crops both the texture and the bounding box (used by the engine). Declaration AGSCropInfo Crop(ref AGSBoundingBox box, BoundingBoxType boundingBoxType, PointF adjustedScale) Parameters Type Name Description AGSBoundingBox box The bounding box to crop. BoundingBoxType boundingBoxType Which type of bounding box is to be cropped. PointF adjustedScale Adjusted scale. Returns Type Description AGSCropInfo The crop info. | Improve this Doc View Source IsGuaranteedToFullyCrop() Is the entity guaranteed to be fully cropped? In specific scenario we can know for certain that the entity will be fully cropped from the scene, which can be used for optimizations in the engine. For example: if the entity is part of a vertical stack layout and the previous item was cropped from the top we know that this item will also be fully cropped. Declaration bool IsGuaranteedToFullyCrop() Returns Type Description System.Boolean true , if guaranteed to fully crop, false otherwise."
  },
  "api/AGS.API.IAreaRestriction.html": {
    "href": "api/AGS.API.IAreaRestriction.html",
    "title": "Interface IAreaRestriction | MonoAGS Documentation",
    "keywords": "Interface IAreaRestriction Adds the ability to restrict certain entities from being affected by the area. Inherited Members IRestrictionList.RestrictionType IRestrictionList.RestrictionList IRestrictionList.IsRestricted(String) IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax [RequiredComponent(typeof(IArea), true)] public interface IAreaRestriction : IRestrictionList, IComponent, IDisposable, INotifyPropertyChanged"
  },
  "api/AGS.API.IAreaComponent.html": {
    "href": "api/AGS.API.IAreaComponent.html",
    "title": "Interface IAreaComponent | MonoAGS Documentation",
    "keywords": "Interface IAreaComponent Areas are specific regions in a room that provide additional behaviors that apply only within that region. Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax [RequiredComponent(typeof(ITranslateComponent), false)] [RequiredComponent(typeof(IRotateComponent), false)] public interface IAreaComponent : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source Enabled Gets or sets a value indicating whether this IAreaComponent is enabled. This would affect all the components attached to this area (so if an area is both a walkable area and a scaling area, having it disabled will disable both). Declaration bool Enabled { get; set; } Property Value Type Description System.Boolean true if enabled; otherwise, false . | Improve this Doc View Source Mask Gets or sets the mask which defines the area (each cell with 1 in the mask is part of the area). Declaration IMask Mask { get; set; } Property Value Type Description IMask The mask. Methods | Improve this Doc View Source FindClosestPoint(PointF, out Single) Finds the closest point in the area to the specified point, and also returns the distance between the points. Declaration PointF? FindClosestPoint(PointF point, out float distance) Parameters Type Name Description PointF point Point. System.Single distance Distance. Returns Type Description System.Nullable < PointF > The closest point. | Improve this Doc View Source IsInArea(PointF) Is the specified point inside the area? Declaration bool IsInArea(PointF point) Parameters Type Name Description PointF point Point. Returns Type Description System.Boolean true , if is inside the area, false otherwise. | Improve this Doc View Source IsInArea(PointF, AGSBoundingBox, Single, Single) Is the specified point inside the area after being projected and scaled? Declaration bool IsInArea(PointF point, AGSBoundingBox projectionBox, float scaleX, float scaleY) Parameters Type Name Description PointF point Point. AGSBoundingBox projectionBox Projection box. System.Single scaleX Scale x. System.Single scaleY Scale y. Returns Type Description System.Boolean true , if point is inside area, false otherwise. See Also IWalkableArea IWalkBehindArea IScalingArea IZoomArea IAreaRestriction"
  },
  "api/AGS.API.IApproachComponent.html": {
    "href": "api/AGS.API.IApproachComponent.html",
    "title": "Interface IApproachComponent | MonoAGS Documentation",
    "keywords": "Interface IApproachComponent Allows a character to approach a hotspot. When an interaction event is triggered for a hotspot, if this component is available for the player (which it is by default), then the character will approach the hotspot before the interaction logic code is triggered. Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax [RequiredComponent(typeof(IFaceDirectionComponent), true)] [RequiredComponent(typeof(IWalkComponent), true)] public interface IApproachComponent : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source ApproachStyle Gets or sets the approach style. Declaration IApproachStyle ApproachStyle { get; set; } Property Value Type Description IApproachStyle The approach style. Methods | Improve this Doc View Source ApproachAsync(String, IObject) Approachs the target hotspot for the given verb (Look, Interact, etc). Declaration Task<bool> ApproachAsync(string verb, IObject target) Parameters Type Name Description System.String verb The verb (Look, Interact, etc). IObject target The target hotspot. Returns Type Description System.Threading.Tasks.Task < System.Boolean > Did the approach complete successfully? (i.e was not interrupted by the player or any other game code)."
  },
  "api/AGS.API.IAnimationState.html": {
    "href": "api/AGS.API.IAnimationState.html",
    "title": "Interface IAnimationState | MonoAGS Documentation",
    "keywords": "Interface IAnimationState Control and query the animation current state. Inherited Members System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IAnimationState : INotifyPropertyChanged Properties | Improve this Doc View Source CurrentFrame Gets or sets the current animation frame. Declaration int CurrentFrame { get; set; } Property Value Type Description System.Int32 The current frame. | Improve this Doc View Source CurrentLoop Gets or sets the current loop. Declaration int CurrentLoop { get; set; } Property Value Type Description System.Int32 The current loop. | Improve this Doc View Source IsPaused Gets or sets a value indicating whether this animation is paused. Declaration bool IsPaused { get; set; } Property Value Type Description System.Boolean true if is paused; otherwise, false . | Improve this Doc View Source OnAnimationCompleted Allows to subscribe to a task and await animation completion (note that if the animation is configured to loop forever, the task will never complete). Declaration TaskCompletionSource<AnimationCompletedEventArgs> OnAnimationCompleted { get; } Property Value Type Description System.Threading.Tasks.TaskCompletionSource < AnimationCompletedEventArgs > The on animation completed. Examples await cHero.SayAsync(\"Waiting for the animation to complete\"); await state.OnAnimationCompleted.Task; await cHero.SayAsync(\"Done!\"); | Improve this Doc View Source RunningBackwards Gets or sets a value indicating whether this animation is currently running backwards. Declaration bool RunningBackwards { get; set; } Property Value Type Description System.Boolean true if running backwards; otherwise, false . | Improve this Doc View Source TimeToNextFrame Gets or sets the time to next frame (in game ticks: so 10 when the game is at 60FPS means 1/6 of a second). Declaration int TimeToNextFrame { get; set; } Property Value Type Description System.Int32 The time to next frame."
  },
  "api/AGS.API.IAnimationComponent.html": {
    "href": "api/AGS.API.IAnimationComponent.html",
    "title": "Interface IAnimationComponent | MonoAGS Documentation",
    "keywords": "Interface IAnimationComponent An animation container. This gives access to the animation, and allows to start a new animation which will replace the old animation. Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IAnimationComponent : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source Animation The currently associated animation. Declaration IAnimation Animation { get; } Property Value Type Description IAnimation The animation. | Improve this Doc View Source OnAnimationStarted An event when fires whenever an animation is started on this container. Declaration IBlockingEvent OnAnimationStarted { get; } Property Value Type Description IBlockingEvent The event. Methods | Improve this Doc View Source Animate(IAnimation) Starts a new animation and waits for it to complete. Note: if an animation is an endless loop, this method will never return (unless the animation is stopped manually). Declaration AnimationCompletedEventArgs Animate(IAnimation animation) Parameters Type Name Description IAnimation animation Animation. Returns Type Description AnimationCompletedEventArgs A result to indicate if the animation completed successfully or stopped abruptly. | Improve this Doc View Source AnimateAsync(IAnimation) Starts a new animation and returns a task for allowing asynchronously waiting for the animation to complete. This allows for doing more things in parallel while the animation is playing, while still having the power to wait for the animation when you're done. Note: if an animation is an endless loop, this task will never complete (unless the animation is stopped manually). Declaration Task<AnimationCompletedEventArgs> AnimateAsync(IAnimation animation) Parameters Type Name Description IAnimation animation Animation. Returns Type Description System.Threading.Tasks.Task < AnimationCompletedEventArgs > A result to indicate if the animation completed successfully or stopped abruptly. Examples Let's animate our 3 musical instruments to play at the same time and wait for the first one to complete. var trumpetTask = player1.AnimateAsync(trumpetAnimation); var pianoTask = player2.AnimateAsync(pianoAnimation); var drumsTask = player3.AnimateAsync(drumAnimation); //As we didn't await the tasks yet, the trumpet, piano and drums are playing at the same time. //Now let's see who finishes first: var firstTaskToComplete = await Task.WhenAny(trumpetTask, pianoTask, drumsTask); if (firstTaskToComplete == trumpetTask) await player4.SayAsync(\"Nice job, trumpet dude!\"); else if (firstTaskToComplete == pianoTask) await player4.SayAsync(\"Nice job, piano dude!\"); else await player4.SayAsync(\"Nice job, drums dude!\"); //Now let's wait for all animations to complete: await Task.WhenAll(trumpetTask, pianoTask, drumsTask); await player4.SayAsync(\"Nice job, everybody!\"); | Improve this Doc View Source StartAnimation(IAnimation) Starts a new animation (this does not wait for the animation to complete). Declaration void StartAnimation(IAnimation animation) Parameters Type Name Description IAnimation animation Animation."
  },
  "api/AGS.API.IAnimation.html": {
    "href": "api/AGS.API.IAnimation.html",
    "title": "Interface IAnimation | MonoAGS Documentation",
    "keywords": "Interface IAnimation Represents an animation. This allows you to configure an animation, and also to query/control animation when it's running. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IAnimation Properties | Improve this Doc View Source Configuration Allows configuring the animation. Declaration IAnimationConfiguration Configuration { get; } Property Value Type Description IAnimationConfiguration The configuration. | Improve this Doc View Source Frames The list of animation frames that composes the animation (those will run one after the other). Declaration IList<IAnimationFrame> Frames { get; } Property Value Type Description System.Collections.Generic.IList < IAnimationFrame > The frames. | Improve this Doc View Source Sprite Gets the sprite that is currently showing (the current frame's sprite). Declaration ISprite Sprite { get; } Property Value Type Description ISprite The sprite. | Improve this Doc View Source State Allows querying and controlling the current state of the animation. Declaration IAnimationState State { get; } Property Value Type Description IAnimationState The state. Methods | Improve this Doc View Source Clone() Copy this animation and get a new animation. This performs a deep clone. This means that once you get a clone, the 2 animations are not attached. You can change a color to one of the sprite in the animation, for example, and this color change will not be applied on the old animation. Declaration IAnimation Clone() Returns Type Description IAnimation The new animation. | Improve this Doc View Source FlipHorizontally() Flips the animation horizontally (from left to right or from right to left). This is applied to all of the animation frames one by one. Declaration void FlipHorizontally() | Improve this Doc View Source FlipVertically() Flips the animation vertically (from up to down or from down to up). This is applied to all of the animation frames on by one. Declaration void FlipVertically() | Improve this Doc View Source NextFrame() Moves the animation to the next frame. This is called by the engine to run the animation. Declaration bool NextFrame() Returns Type Description System.Boolean true , if frame was nexted, false otherwise."
  },
  "api/AGS.API.FourCorners-1.html": {
    "href": "api/AGS.API.FourCorners-1.html",
    "title": "Class FourCorners<TValue> | MonoAGS Documentation",
    "keywords": "Class FourCorners<TValue> Represents four values of \"something\" that matches four corners of a bounding box (for example, four colors for a gradient border). Inheritance System.Object FourCorners<TValue> Implements System.IEquatable < FourCorners <TValue>> Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : AGS.API Assembly : AGS.API.dll Syntax [ConcreteImplementation(DisplayName = \"4-Corners\")] [DataContract] public class FourCorners<TValue> : IEquatable<FourCorners<TValue>> Type Parameters Name Description TValue Constructors | Improve this Doc View Source FourCorners() Initializes a new instance of the FourCorners<TValue> class. Declaration public FourCorners() | Improve this Doc View Source FourCorners(TValue) Initializes a new instance of the FourCorners<TValue> class. Declaration public FourCorners(TValue value) Parameters Type Name Description TValue value Value. | Improve this Doc View Source FourCorners(TValue, TValue, TValue, TValue) Initializes a new instance of the FourCorners<TValue> class. Declaration public FourCorners(TValue bottomLeft, TValue bottomRight, TValue topLeft, TValue topRight) Parameters Type Name Description TValue bottomLeft Bottom left. TValue bottomRight Bottom right. TValue topLeft Top left. TValue topRight Top right. Properties | Improve this Doc View Source BottomLeft Gets or sets the bottom left value. Declaration [DataMember] public TValue BottomLeft { get; set; } Property Value Type Description TValue The bottom left value. | Improve this Doc View Source BottomRight Gets or sets the bottom right value. Declaration [DataMember] public TValue BottomRight { get; set; } Property Value Type Description TValue The bottom right value. | Improve this Doc View Source IsOneValue Gets a value indicating whether this FourCorners<TValue> contains only a single value. Declaration public bool IsOneValue { get; } Property Value Type Description System.Boolean true if is one value; otherwise, false . | Improve this Doc View Source TopLeft Gets or sets the top left value. Declaration [DataMember] public TValue TopLeft { get; set; } Property Value Type Description TValue The top left value. | Improve this Doc View Source TopRight Gets or sets the top right value. Declaration [DataMember] public TValue TopRight { get; set; } Property Value Type Description TValue The top right value. Methods | Improve this Doc View Source Convert<TNewValue>(Func<TValue, TNewValue>) Converts the four corners with a new value. Declaration public FourCorners<TNewValue> Convert<TNewValue>(Func<TValue, TNewValue> convert) Parameters Type Name Description System.Func <TValue, TNewValue> convert Convert. Returns Type Description FourCorners <TNewValue> The convert. Type Parameters Name Description TNewValue The type of the converted object. | Improve this Doc View Source Equals(FourCorners<TValue>) Declaration public bool Equals(FourCorners<TValue> other) Parameters Type Name Description FourCorners <TValue> other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements System.IEquatable<T>"
  },
  "api/AGS.API.FontStyle.html": {
    "href": "api/AGS.API.FontStyle.html",
    "title": "Enum FontStyle | MonoAGS Documentation",
    "keywords": "Enum FontStyle Font style (regular, bold, italic, underline or strikeout). Namespace : AGS.API Assembly : AGS.API.dll Syntax [Flags] public enum FontStyle Fields Name Description Bold Italic Regular Strikeout Underline"
  },
  "api/AGS.API.Color.html": {
    "href": "api/AGS.API.Color.html",
    "title": "Struct Color | MonoAGS Documentation",
    "keywords": "Struct Color Represents a color. Implements System.IEquatable < Color > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : AGS.API Assembly : AGS.API.dll Syntax [DataContract] public struct Color : IEquatable<Color> Properties | Improve this Doc View Source A Gets the alpha element of the color. 0 is fully transparent and 255 is fully opaque. Declaration public byte A { get; } Property Value Type Description System.Byte The alpha element of the color. | Improve this Doc View Source B Gets the blue element of the color. 0 is no red and 255 is fully blue. Declaration public byte B { get; } Property Value Type Description System.Byte The blue element of the color. | Improve this Doc View Source G Gets the green element of the color. 0 is no red and 255 is fully green. Declaration public byte G { get; } Property Value Type Description System.Byte The green element of the color. | Improve this Doc View Source R Gets the red element of the color. 0 is no red and 255 is fully red. Declaration public byte R { get; } Property Value Type Description System.Byte The red element of the color. | Improve this Doc View Source Value A single value which encodes the color within it, 8 bits per color element, where the order is A (alpha)-R (red)-G (green)-B (blue). Declaration [DataMember(Name = \"Argb\")] public uint Value { get; } Property Value Type Description System.UInt32 The color value. Methods | Improve this Doc View Source Equals(Color) Declaration public bool Equals(Color other) Parameters Type Name Description Color other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source FromArgb(Byte, Byte, Byte, Byte) Gets a color from ARGB elements (alpha, red, green, blue). Declaration public static Color FromArgb(byte a, byte r, byte g, byte b) Parameters Type Name Description System.Byte a The alpha component. System.Byte r The red component. System.Byte g The green component. System.Byte b The blue component. Returns Type Description Color The color. | Improve this Doc View Source FromHexa(UInt32) Gets a color from a hexa value (in ARGB format). Declaration public static Color FromHexa(uint argb) Parameters Type Name Description System.UInt32 argb ARGB. Returns Type Description Color The hexa. | Improve this Doc View Source FromHsla(Int32, Single, Single, Byte) Gets a color from HSLA format ( https://en.wikipedia.org/wiki/HSL_and_HSV ). Also see: https://css-tricks.com/yay-for-hsla/ , and a helpful calculator: https://www.w3schools.com/colors/colors_hsl.asp Declaration public static Color FromHsla(int hue, float saturation, float lightness, byte a) Parameters Type Name Description System.Int32 hue Hue: Think of a color wheel. Around 0o and 360o are reds 120o are greens, 240o are blues. Use anything in between 0-360. Values above and below will be modulus 360. System.Single saturation Saturation: 0 is completely denatured (grayscale). 1 is fully saturated (full color). System.Single lightness Lightness: 0 is completely dark (black). 1 is completely light (white). System.Byte a The alpha component: 0 is fully transparent. 255 is fully opaque. Returns Type Description Color The color. | Improve this Doc View Source FromRgba(Byte, Byte, Byte, Byte) Gets a color from RGBA elements (red, green, blue, alpha). Declaration public static Color FromRgba(byte r, byte g, byte b, byte a) Parameters Type Name Description System.Byte r The red component. System.Byte g The green component. System.Byte b The blue component. System.Byte a The alpha component. Returns Type Description Color The color. | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source GetHue() Gets the hue of the color (based on HSL format: https://en.wikipedia.org/wiki/HSL_and_HSV ). Declaration public int GetHue() Returns Type Description System.Int32 The hue. | Improve this Doc View Source GetLightness() Gets the lightness of the color (based on HSL format: https://en.wikipedia.org/wiki/HSL_and_HSV ). Declaration public float GetLightness() Returns Type Description System.Single The saturation. | Improve this Doc View Source GetSaturation() Gets the saturation of the color (based on HSL format: https://en.wikipedia.org/wiki/HSL_and_HSV ). Declaration public float GetSaturation() Returns Type Description System.Single The saturation. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() | Improve this Doc View Source WithAlpha(Byte) Gets a new color with a changed alpha (transparency). Declaration public Color WithAlpha(byte a) Parameters Type Name Description System.Byte a The alpha component. 0 is fully transparent and 255 is fully opaque. Returns Type Description Color The color. Implements System.IEquatable<T>"
  },
  "api/AGS.API.ClaimEventToken.html": {
    "href": "api/AGS.API.ClaimEventToken.html",
    "title": "Struct ClaimEventToken | MonoAGS Documentation",
    "keywords": "Struct ClaimEventToken This is a token that can be used when you want to claim an event, so that other subscribers which follow you on the subscriber list will not get that event. ClaimableCallback Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : AGS.API Assembly : AGS.API.dll Syntax public struct ClaimEventToken Properties | Improve this Doc View Source Claimed Gets or sets a value indicating whether this ClaimEventToken is claimed. If you claim the event (by setting Claimed = true), this event will not be propogated to the rest of the subscribers. Declaration public bool Claimed { get; set; } Property Value Type Description System.Boolean true if claimed; otherwise, false ."
  },
  "api/AGS.API.BrushType.html": {
    "href": "api/AGS.API.BrushType.html",
    "title": "Enum BrushType | MonoAGS Documentation",
    "keywords": "Enum BrushType Namespace : AGS.API Assembly : AGS.API.dll Syntax public enum BrushType Fields Name Description Hatch Linear Path Solid Texture"
  },
  "api/AGS.API.BeforeSayEventArgs.html": {
    "href": "api/AGS.API.BeforeSayEventArgs.html",
    "title": "Class BeforeSayEventArgs | MonoAGS Documentation",
    "keywords": "Class BeforeSayEventArgs Event arguments which allows you to modify how/where the text is rendered and control how the speech is skipped (assuming you configure External in your ISayConfig ). Inheritance System.Object BeforeSayEventArgs Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AGS.API Assembly : AGS.API.dll Syntax public class BeforeSayEventArgs Constructors | Improve this Doc View Source BeforeSayEventArgs(ILabel, Action) Initializes a new instance of the BeforeSayEventArgs class. Declaration public BeforeSayEventArgs(ILabel label, Action skip) Parameters Type Name Description ILabel label Label. System.Action skip Skip. Properties | Improve this Doc View Source Label The text label which will be displayed to the user. Declaration public ILabel Label { get; set; } Property Value Type Description ILabel The label. | Improve this Doc View Source Skip An action you can call to skip the text, for implementing custom text skipping. Declaration public Action Skip { get; } Property Value Type Description System.Action The skip."
  },
  "api/AGS.API.ApproachHotspots.html": {
    "href": "api/AGS.API.ApproachHotspots.html",
    "title": "Enum ApproachHotspots | MonoAGS Documentation",
    "keywords": "Enum ApproachHotspots How to approach hotspots? Namespace : AGS.API Assembly : AGS.API.dll Syntax public enum ApproachHotspots Fields Name Description AlwaysWalk The character will face and walk towards the hotspot. If the hotspot has a walk point defined, the character will walk to that point, otherwise the character will walk towards the center point of the hotspot. FaceOnly The character will face the hotspot but will not walk towards it. NeverWalk No action will be performed. The character will not walk nor face the hotspot. WalkIfHaveWalkPoint The character will face and walk towards the hotspot if it has a walk point defined, otherwise it will face the hotspot without walking towards it."
  },
  "api/AGS.API.Alignment.html": {
    "href": "api/AGS.API.Alignment.html",
    "title": "Enum Alignment | MonoAGS Documentation",
    "keywords": "Enum Alignment Namespace : AGS.API Assembly : AGS.API.dll Syntax public enum Alignment Fields Name Description BottomCenter BottomLeft BottomRight MiddleCenter MiddleLeft MiddleRight TopCenter TopLeft TopRight"
  },
  "api/AGS.API.AGSHashSetChangedEventArgs-1.html": {
    "href": "api/AGS.API.AGSHashSetChangedEventArgs-1.html",
    "title": "Class AGSHashSetChangedEventArgs<TItem> | MonoAGS Documentation",
    "keywords": "Class AGSHashSetChangedEventArgs<TItem> Event arguments for a hash set change event. Inheritance System.Object AGSHashSetChangedEventArgs<TItem> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AGS.API Assembly : AGS.API.dll Syntax public class AGSHashSetChangedEventArgs<TItem> Type Parameters Name Description TItem Constructors | Improve this Doc View Source AGSHashSetChangedEventArgs(ListChangeType, TItem) Initializes a new instance of the AGSHashSetChangedEventArgs<TItem> class. Declaration public AGSHashSetChangedEventArgs(ListChangeType changeType, TItem item) Parameters Type Name Description ListChangeType changeType Change type. TItem item Item. | Improve this Doc View Source AGSHashSetChangedEventArgs(ListChangeType, IEnumerable<TItem>) Initializes a new instance of the AGSHashSetChangedEventArgs<TItem> class. Declaration public AGSHashSetChangedEventArgs(ListChangeType changeType, IEnumerable<TItem> items) Parameters Type Name Description ListChangeType changeType Change type. System.Collections.Generic.IEnumerable <TItem> items Items. Properties | Improve this Doc View Source ChangeType Was an item added or removed from the set? Declaration public ListChangeType ChangeType { get; } Property Value Type Description ListChangeType The type of the change. | Improve this Doc View Source Items Gets the items which were involved in the change (either added or removed depending on ChangeType ). Declaration public IEnumerable<TItem> Items { get; } Property Value Type Description System.Collections.Generic.IEnumerable <TItem> The item."
  },
  "api/AGS.API.IBorderStyle.html": {
    "href": "api/AGS.API.IBorderStyle.html",
    "title": "Interface IBorderStyle | MonoAGS Documentation",
    "keywords": "Interface IBorderStyle A border style will draw a border around an entity. It can draw both behind and in front of the entity. There are several borders that come built in: A solid color border (use SolidColor(Color, Single, Boolean) ): allows to set a color, line width and optional rounded corners. A gradient color border (use ): allows to set 4 colors for the 4 corners which will be interpolated across, a line width and optional rounded corners. A 9-slice image border (use AGSSlicedImageBorder): this allows you to use an image, slice it to 9 pieces, and spread it in various ways to create a border. The 9-slice image border is heavily inspired by the border image used by CSS, so you can look at an example in CSS, to see what can be done with a 9-slice image: https://css-tricks.com/almanac/properties/b/border-image/ You can also implement your own custom border style by implementing this interface, which can then be used for all objects. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IBorderStyle Properties | Improve this Doc View Source WidthBottom Gets the bottom edge width of the border. Declaration float WidthBottom { get; } Property Value Type Description System.Single The bottom width. | Improve this Doc View Source WidthLeft Gets the left edge width of the border. Declaration float WidthLeft { get; } Property Value Type Description System.Single The left width. | Improve this Doc View Source WidthRight Gets the right edge width of the border. Declaration float WidthRight { get; } Property Value Type Description System.Single The right width. | Improve this Doc View Source WidthTop Gets the top edge width of the border. Declaration float WidthTop { get; } Property Value Type Description System.Single The top width. Methods | Improve this Doc View Source RenderBorderBack(AGSBoundingBox) Renders border graphics which will appear behind the entity. This is called on every game tick. Declaration void RenderBorderBack(AGSBoundingBox square) Parameters Type Name Description AGSBoundingBox square Square. | Improve this Doc View Source RenderBorderFront(AGSBoundingBox) Renders border graphics which will appear in front of the entity. This is called on every game tick. Declaration void RenderBorderFront(AGSBoundingBox square) Parameters Type Name Description AGSBoundingBox square Square."
  },
  "api/AGS.API.IBorderFactory.html": {
    "href": "api/AGS.API.IBorderFactory.html",
    "title": "Interface IBorderFactory | MonoAGS Documentation",
    "keywords": "Interface IBorderFactory A factory for creating borders ( IBorderStyle ). Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IBorderFactory Methods | Improve this Doc View Source Gradient(FourCorners<Color>, FourCorners<Boolean>, Single) Creates a gradient border (you can give a different color for each of the corners, and the border color will interpolate between them). Declaration IBorderStyle Gradient(FourCorners<Color> color, FourCorners<bool> hasRoundCorners, float lineWidth = 10F) Parameters Type Name Description FourCorners < Color > color Color. FourCorners < System.Boolean > hasRoundCorners For each corner you can select whether it is a round corner or a square corner. System.Single lineWidth Line width. Returns Type Description IBorderStyle The border. | Improve this Doc View Source Gradient(FourCorners<Color>, Single, Boolean) Creates a gradient border (you can give a different color for each of the corners, and the border color will interpolate between them). Declaration IBorderStyle Gradient(FourCorners<Color> color, float lineWidth = 10F, bool hasRoundCorners = false) Parameters Type Name Description FourCorners < Color > color Color. System.Single lineWidth Line width. System.Boolean hasRoundCorners If set to true has round corners. Returns Type Description IBorderStyle The border. | Improve this Doc View Source Multiple(IBorderStyle[]) Combines multiple borders into a single border. Declaration IBorderStyle Multiple(params IBorderStyle[] borders) Parameters Type Name Description IBorderStyle [] borders Borders. Returns Type Description IBorderStyle The border. | Improve this Doc View Source SolidColor(Color, Single, Boolean) Creates a solid color border. Declaration IBorderStyle SolidColor(Color color, float lineWidth = 10F, bool hasRoundCorners = false) Parameters Type Name Description Color color Color. System.Single lineWidth Line width. System.Boolean hasRoundCorners If set to true has round corners. Returns Type Description IBorderStyle The border."
  },
  "api/AGS.API.IBorderComponent.html": {
    "href": "api/AGS.API.IBorderComponent.html",
    "title": "Interface IBorderComponent | MonoAGS Documentation",
    "keywords": "Interface IBorderComponent Allows drawing a border around the entity. Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IBorderComponent : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source Border Gets or sets a border that will (optionally) surround the entity. Declaration IBorderStyle Border { get; set; } Property Value Type Description IBorderStyle The border."
  },
  "api/AGS.API.IBlockingEvent.html": {
    "href": "api/AGS.API.IBlockingEvent.html",
    "title": "Interface IBlockingEvent | MonoAGS Documentation",
    "keywords": "Interface IBlockingEvent Represents an event which can be subscribed and invoked synchronously. An event is a notification for something that has happened. Interested parties can subscribe to the event and be notified when it triggers ( https://en.wikipedia.org/wiki/Event-driven_programming ). Inherited Members System.IDisposable.Dispose() Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IBlockingEvent : IDisposable Properties | Improve this Doc View Source SubscribersCount Gets the number of subscribers to the event. Declaration int SubscribersCount { get; } Property Value Type Description System.Int32 The subscribers count. Methods | Improve this Doc View Source Invoke() Invoke the event synchronously (i.e will wait for all subscribers to process the event before moving on). Declaration void Invoke() | Improve this Doc View Source Subscribe(ClaimableCallback, CallbackPriority) Subscribe the specified callback to the event. Once subscribed, whenever the event happens this callback will be called. In addition, this specific overload allows you to claim the event so that subscribers which follow you on the list will not receive the event. For an example- ClaimableCallback . Declaration void Subscribe(ClaimableCallback callback, CallbackPriority priority = CallbackPriority.Normal) Parameters Type Name Description ClaimableCallback callback Callback. CallbackPriority priority The callback priority (determines the order in which the subscribers get the events). | Improve this Doc View Source Subscribe(Action, CallbackPriority) Subscribe the specified callback to the event. Once subscribed, whenever the event happens this callback will be called. Declaration void Subscribe(Action callback, CallbackPriority priority = CallbackPriority.Normal) Parameters Type Name Description System.Action callback Callback. CallbackPriority priority The callback priority (determines the order in which the subscribers get the events). | Improve this Doc View Source Unsubscribe(ClaimableCallback, CallbackPriority) Unsubscribe the specified callback from the event. This will stops notifications to call this callback. Declaration void Unsubscribe(ClaimableCallback callback, CallbackPriority priority = CallbackPriority.Normal) Parameters Type Name Description ClaimableCallback callback Callback. CallbackPriority priority The callback priority (determines the order in which the subscribers get the events). | Improve this Doc View Source Unsubscribe(Action, CallbackPriority) Unsubscribe the specified callback from the event. This will stops notifications to call this callback. Declaration void Unsubscribe(Action callback, CallbackPriority priority = CallbackPriority.Normal) Parameters Type Name Description System.Action callback Callback. CallbackPriority priority The callback priority (determines the order in which the subscribers get the events). | Improve this Doc View Source WaitUntilAsync(Func<Boolean>, CallbackPriority) Asynchronously wait until the event fires and the specific condition applies. Declaration Task WaitUntilAsync(Func<bool> condition, CallbackPriority priority = CallbackPriority.Normal) Parameters Type Name Description System.Func < System.Boolean > condition The condition we are waiting to apply before moving on. CallbackPriority priority The callback priority (determines the order in which the subscribers get the events). Returns Type Description System.Threading.Tasks.Task The task to be awaited."
  },
  "api/AGS.API.IBitmap.html": {
    "href": "api/AGS.API.IBitmap.html",
    "title": "Interface IBitmap | MonoAGS Documentation",
    "keywords": "Interface IBitmap A low level bitmap which can be manipulated. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IBitmap Properties | Improve this Doc View Source Height Gets the height of the bitmap (in pixels). Declaration uint Height { get; } Property Value Type Description System.UInt32 The height. | Improve this Doc View Source Width Gets the width of the bitmap (in pixels). Declaration uint Width { get; } Property Value Type Description System.UInt32 The width. Methods | Improve this Doc View Source ApplyArea(IAreaComponent) Create a new bitmap with only the pixels which are in the specified area, and makes all of the rest transparent. Declaration IBitmap ApplyArea(IAreaComponent area) Parameters Type Name Description IAreaComponent area Area. Returns Type Description IBitmap The new bitmap. | Improve this Doc View Source Clear() Clears the bitmap. Declaration void Clear() | Improve this Doc View Source CreateMask(IGameFactory, String, Boolean, Nullable<Color>, String, String) Creates a mask from the bitmap. Declaration IMask CreateMask(IGameFactory factory, string path, bool transparentMeansMasked = false, Color? debugDrawColor = default(Color? ), string saveMaskToFile = null, string id = null) Parameters Type Name Description IGameFactory factory The game factory. System.String path The path the bitmap was created from (will be used as the id for the debug mask image, if a debug draw color is given). System.Boolean transparentMeansMasked If set to true then a transparent pixel means masked, otherwise a non transparent pixel means masked. System.Nullable < Color > debugDrawColor An optional debug draw color, this will make the mask be saved as an image with the specified color. System.String saveMaskToFile An optional file path to the save the mask (for debugging purposes). System.String id A unique id which will be given to the mask (null will use the path as the id). Returns Type Description IMask The mask. | Improve this Doc View Source Crop(Rectangle) Creates a new bitmap which is cropped to the given rectangle. Declaration IBitmap Crop(Rectangle rectangle) Parameters Type Name Description Rectangle rectangle Rectangle. Returns Type Description IBitmap The new bitmap. | Improve this Doc View Source GetPixel(Int32, Int32) Gets the pixel color on the specified coordinates. Declaration Color GetPixel(int x, int y) Parameters Type Name Description System.Int32 x The x coordinate. System.Int32 y The y coordinate. Returns Type Description Color The pixel color. | Improve this Doc View Source GetTextDraw() Allows to draw text on the bitmap. Declaration IBitmapTextDraw GetTextDraw() Returns Type Description IBitmapTextDraw The text draw. | Improve this Doc View Source LoadTexture(Nullable<Int32>) Uploads the bitmap to graphics memory, and optionally binds to a texture. Declaration void LoadTexture(int? textureToBind) Parameters Type Name Description System.Nullable < System.Int32 > textureToBind Texture to bind. | Improve this Doc View Source MakeTransparent(Color) Replaces all pixels with the specified color to be transparent. Declaration void MakeTransparent(Color color) Parameters Type Name Description Color color Color. | Improve this Doc View Source SaveToFile(String) Saves the bitmap as an image to the specified file path. Declaration void SaveToFile(string path) Parameters Type Name Description System.String path Path. | Improve this Doc View Source SetPixel(Color, Int32, Int32) Sets a pixel color on the specified coordinates. Declaration void SetPixel(Color color, int x, int y) Parameters Type Name Description Color color Color. System.Int32 x The x coordinate. System.Int32 y The y coordinate. | Improve this Doc View Source SetPixels(Color, List<Point>) Sets multiple pixels with the specified color. Declaration void SetPixels(Color color, List<Point> points) Parameters Type Name Description Color color Color. System.Collections.Generic.List < Point > points Points."
  },
  "api/AGS.API.IAudioSystem.html": {
    "href": "api/AGS.API.IAudioSystem.html",
    "title": "Interface IAudioSystem | MonoAGS Documentation",
    "keywords": "Interface IAudioSystem The entry point for interacting with the audio system. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IAudioSystem Properties | Improve this Doc View Source AudioClips Gets all available audio clips. Declaration IAGSBindingList<IAudioClip> AudioClips { get; } Property Value Type Description IAGSBindingList < IAudioClip > The audio clips. | Improve this Doc View Source AudioRules Gets the audio rules (which can modify properties of playing sounds). Declaration IAGSBindingList<IAudioRule> AudioRules { get; } Property Value Type Description IAGSBindingList < IAudioRule > The audio rules. | Improve this Doc View Source CurrentlyPlayingSounds Gets the currently playing sounds. Declaration ReadOnlyCollection<ISound> CurrentlyPlayingSounds { get; } Property Value Type Description System.Collections.ObjectModel.ReadOnlyCollection < ISound > The currently playing sounds. | Improve this Doc View Source Settings Gets the settings. Declaration IAudioSettings Settings { get; } Property Value Type Description IAudioSettings The settings."
  },
  "api/AGS.API.IAudioSettings.html": {
    "href": "api/AGS.API.IAudioSettings.html",
    "title": "Interface IAudioSettings | MonoAGS Documentation",
    "keywords": "Interface IAudioSettings Allows to set global audio settings Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IAudioSettings Properties | Improve this Doc View Source MasterVolume Gets or sets the master volume. The valid range is between 0 (sound is muted) and 1 (no change is made to the volume). Default value is 0.5. Declaration float MasterVolume { get; set; } Property Value Type Description System.Single The master volume. | Improve this Doc View Source RoomMusicCrossFading Gets the settings for cross fading music clips when transitioning between rooms. Declaration ICrossFading RoomMusicCrossFading { get; } Property Value Type Description ICrossFading The room music cross fading."
  },
  "api/AGS.API.IAudioRule.html": {
    "href": "api/AGS.API.IAudioRule.html",
    "title": "Interface IAudioRule | MonoAGS Documentation",
    "keywords": "Interface IAudioRule You can implement an audio rule and add it to AudioRules , to modify properties of playing sounds. It gets callbacks from the engines whenever a sound has played and completed, and can add a ISoundModifier to the sound ( SoundModifiers ) to modify its properties. Note: the audio rule is a conviency interface for interacting all the sounds in the system. You don't have to use it, though, there's nothing stopping you from adding sound modifiers to sounds outside this system. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IAudioRule Properties | Improve this Doc View Source Enabled Gets or sets a value indicating whether this IAudioRule is enabled. Declaration bool Enabled { get; set; } Property Value Type Description System.Boolean true if enabled; otherwise, false . Methods | Improve this Doc View Source OnSoundCompleted(ISound) Called by the engine to notify the rule that an existing sound has completed playing. Declaration void OnSoundCompleted(ISound sound) Parameters Type Name Description ISound sound Sound. | Improve this Doc View Source OnSoundStarted(ISound) Called by the engine to notify the rule that a new sound has started. Declaration void OnSoundStarted(ISound sound) Parameters Type Name Description ISound sound Sound."
  },
  "api/AGS.API.IAGSBindingList-1.html": {
    "href": "api/AGS.API.IAGSBindingList-1.html",
    "title": "Interface IAGSBindingList<TItem> | MonoAGS Documentation",
    "keywords": "Interface IAGSBindingList<TItem> A binding list is a list which notifies on each list change Inherited Members System.Collections.Generic.IList<TItem>.IndexOf(TItem) System.Collections.Generic.IList<TItem>.Insert(System.Int32, TItem) System.Collections.Generic.IList<TItem>.RemoveAt(System.Int32) System.Collections.Generic.IList<TItem>.Item[System.Int32] System.Collections.Generic.ICollection<TItem>.Add(TItem) System.Collections.Generic.ICollection<TItem>.Clear() System.Collections.Generic.ICollection<TItem>.Contains(TItem) System.Collections.Generic.ICollection<TItem>.CopyTo(TItem[], System.Int32) System.Collections.Generic.ICollection<TItem>.Remove(TItem) System.Collections.Generic.ICollection<TItem>.Count System.Collections.Generic.ICollection<TItem>.IsReadOnly System.Collections.Generic.IEnumerable<TItem>.GetEnumerator() System.IDisposable.Dispose() Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IAGSBindingList<TItem> : IList<TItem>, ICollection<TItem>, IEnumerable<TItem>, IEnumerable, IDisposable Type Parameters Name Description TItem Properties | Improve this Doc View Source OnListChanged The event which is triggered on every list change (whenever an item is added from the list or removed from the list, or if AddRange(List<TItem>) was called, when multiple items were added). Declaration IBlockingEvent<AGSListChangedEventArgs<TItem>> OnListChanged { get; } Property Value Type Description IBlockingEvent < AGSListChangedEventArgs <TItem>> The event. Methods | Improve this Doc View Source AddRange(List<TItem>) Adds several items to the list together. Declaration void AddRange(List<TItem> items) Parameters Type Name Description System.Collections.Generic.List <TItem> items Items."
  },
  "api/AGS.API.HatchStyle.html": {
    "href": "api/AGS.API.HatchStyle.html",
    "title": "Enum HatchStyle | MonoAGS Documentation",
    "keywords": "Enum HatchStyle Namespace : AGS.API Assembly : AGS.API.dll Syntax public enum HatchStyle Fields Name Description BackwardDiagonal Cross DarkDownwardDiagonal DarkHorizontal DarkUpwardDiagonal DarkVertical DashedDownwardDiagonal DashedHorizontal DashedUpwardDiagonal DashedVertical DiagonalBrick DiagonalCross Divot DottedDiamond DottedGrid ForwardDiagonal Horizontal HorizontalBrick LargeCheckerBoard LargeConfetti LargeGrid LightDownwardDiagonal LightHorizontal LightUpwardDiagonal LightVertical Max Min NarrowHorizontal NarrowVertical OutlinedDiamond Percent05 Percent10 Percent20 Percent25 Percent30 Percent40 Percent50 Percent60 Percent70 Percent75 Percent80 Percent90 Plaid Shingle SmallCheckerBoard SmallConfetti SmallGrid SolidDiamond Sphere Trellis Vertical Wave Weave WideDownwardDiagonal WideUpwardDiagonal ZigZag"
  },
  "api/AGS.API.CropFrom.html": {
    "href": "api/AGS.API.CropFrom.html",
    "title": "Enum CropFrom | MonoAGS Documentation",
    "keywords": "Enum CropFrom If the item was completely cropped, gets the direction the item was cropped from. Namespace : AGS.API Assembly : AGS.API.dll Syntax public enum CropFrom Fields Name Description Bottom The item was cropped from the bottom. Left The item was cropped from the left. None The item was not fully cropped. Right The item was cropped from the right. Top The item was cropped from the top."
  },
  "api/AGS.API.ConcreteImplementationAttribute.html": {
    "href": "api/AGS.API.ConcreteImplementationAttribute.html",
    "title": "Class ConcreteImplementationAttribute | MonoAGS Documentation",
    "keywords": "Class ConcreteImplementationAttribute This attribute can be assigned to concrete implementations of interfaces. This affects the inspector, when selecting implementations for interfaces (for example, when selecting a border you'd want to look of implmentations of IBorderStyle ). Inheritance System.Object System.Attribute ConcreteImplementationAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AGS.API Assembly : AGS.API.dll Syntax [AttributeUsage(AttributeTargets.Class)] public class ConcreteImplementationAttribute : Attribute Constructors | Improve this Doc View Source ConcreteImplementationAttribute() Initializes a new instance of the ConcreteImplementationAttribute class. Declaration public ConcreteImplementationAttribute() Properties | Improve this Doc View Source Browsable Gets or sets a value indicating whether the associated class can be selected as a possible implementation. Declaration public bool Browsable { get; set; } Property Value Type Description System.Boolean true if browsable; otherwise, false . | Improve this Doc View Source DisplayName Gets or sets the display name to be shown instead of the class name. Declaration public string DisplayName { get; set; } Property Value Type Description System.String The display name."
  },
  "api/AGS.API.CheckBoxEventArgs.html": {
    "href": "api/AGS.API.CheckBoxEventArgs.html",
    "title": "Class CheckBoxEventArgs | MonoAGS Documentation",
    "keywords": "Class CheckBoxEventArgs Event arguments for a checkbox check change. Inheritance System.Object CheckBoxEventArgs Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AGS.API Assembly : AGS.API.dll Syntax public class CheckBoxEventArgs Constructors | Improve this Doc View Source CheckBoxEventArgs(Boolean, Boolean) Declaration public CheckBoxEventArgs(bool isChecked, bool userInitiated) Parameters Type Name Description System.Boolean isChecked System.Boolean userInitiated Properties | Improve this Doc View Source Checked Gets a value indicating whether the checkbox is checked. Declaration public bool Checked { get; } Property Value Type Description System.Boolean true if checked; otherwise, false . | Improve this Doc View Source UserInitiated Gets a value indicating whether the checkbox was checked by the user or changed programmatically. Declaration public bool UserInitiated { get; } Property Value Type Description System.Boolean true if user initiated; otherwise, false ."
  },
  "api/AGS.API.CallbackPriority.html": {
    "href": "api/AGS.API.CallbackPriority.html",
    "title": "Enum CallbackPriority | MonoAGS Documentation",
    "keywords": "Enum CallbackPriority In a scenario where an event has multiple subscribers, the callback priority affects which subscriber gets the callback first. High priority subscribers will receive the event before normal priority (the default) subscribers, and low priority will receive the event last. Note: For 2 subscribers with the same callback priority, there's no guarantee regarding who gets the event first. Namespace : AGS.API Assembly : AGS.API.dll Syntax public enum CallbackPriority : byte Fields Name Description High High priority- will receive the event first. Low Low priority- will receive the event last. Normal Normal priority."
  },
  "api/AGS.API.AutoFit.html": {
    "href": "api/AGS.API.AutoFit.html",
    "title": "Enum AutoFit | MonoAGS Documentation",
    "keywords": "Enum AutoFit Allows for a label and its text to fit together in various way. Namespace : AGS.API Assembly : AGS.API.dll Syntax public enum AutoFit Fields Name Description LabelShouldFitText The label size will be ignored. The label will resize to fit the text inside it. NoFitting There will be no custom fitting: the user will select a label size, and the text size will be based on the font, it's size and the text. TextShouldCrop The text will be cropped to fit the label size. This is the default for textboxes. TextShouldFitLabel The text will be resized (but only downscaled, not upscaled) to fit the label size. This can be useful when you lay out multiple buttons when you want to have them at the same size, and have various lengths of text. TextShouldWrapAndLabelShouldFitHeight The label width will be used as a maximum width for the text. If the text width is bigger, it will wrap to the next line. The label height will then be resized to fit the text. This is the default for speech and dialog options."
  },
  "api/AGS.API.AGSListItem-1.html": {
    "href": "api/AGS.API.AGSListItem-1.html",
    "title": "Struct AGSListItem<TItem> | MonoAGS Documentation",
    "keywords": "Struct AGSListItem<TItem> Represents an item in a list Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : AGS.API Assembly : AGS.API.dll Syntax public struct AGSListItem<TItem> Type Parameters Name Description TItem Constructors | Improve this Doc View Source AGSListItem(TItem, Int32) Initializes a new instance of the AGSListItem<TItem> struct. Declaration public AGSListItem(TItem item, int index) Parameters Type Name Description TItem item Item. System.Int32 index Index. Properties | Improve this Doc View Source Index Gets the index of the item in the list. Declaration public int Index { get; } Property Value Type Description System.Int32 The index. | Improve this Doc View Source Item Gets the item. Declaration public TItem Item { get; } Property Value Type Description TItem The item."
  },
  "api/AGS.API.AGSBoundingBoxes.html": {
    "href": "api/AGS.API.AGSBoundingBoxes.html",
    "title": "Class AGSBoundingBoxes | MonoAGS Documentation",
    "keywords": "Class AGSBoundingBoxes The bounding boxes used for the entity. Inheritance System.Object AGSBoundingBoxes Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AGS.API Assembly : AGS.API.dll Syntax public class AGSBoundingBoxes Properties | Improve this Doc View Source PreCropViewportBox Gets or sets the viewport bounding box before the object was cropped. This will usually be the same as the viewport box unless the object was actually cropped (i.e if it had the ICropSelfComponent attached, maybe inside a scrolling panel, for example). Declaration public AGSBoundingBox PreCropViewportBox { get; set; } Property Value Type Description AGSBoundingBox The pre crop render box. | Improve this Doc View Source TextureBox Gets or sets the texture box which specifies which part of the texture is used on the render box. Usually this would be the entire texture: (0,0)-(1,1), unless cropped by a cropping component. This should be only set from the engine. Declaration public FourCorners<Vector2> TextureBox { get; set; } Property Value Type Description FourCorners < Vector2 > The texture box. | Improve this Doc View Source ViewportBox Gets or sets the bounding box in viewport coordinages (used for rendering the entity). This should be only set from the engine. Declaration public AGSBoundingBox ViewportBox { get; set; } Property Value Type Description AGSBoundingBox The render box. | Improve this Doc View Source WorldBox Gets or sets the bounding box in world coordinates (used for collision checks). This should be only set from the engine. Declaration public AGSBoundingBox WorldBox { get; set; } Property Value Type Description AGSBoundingBox The hit-test box. Methods | Improve this Doc View Source CopyFrom(AGSBoundingBoxes) Declaration public void CopyFrom(AGSBoundingBoxes boxes) Parameters Type Name Description AGSBoundingBoxes boxes | Improve this Doc View Source Equals(AGSBoundingBoxes) Declaration public bool Equals(AGSBoundingBoxes boxes) Parameters Type Name Description AGSBoundingBoxes boxes Returns Type Description System.Boolean"
  },
  "api/AGS.API.SelectionType.html": {
    "href": "api/AGS.API.SelectionType.html",
    "title": "Enum SelectionType | MonoAGS Documentation",
    "keywords": "Enum SelectionType Namespace : AGS.API Assembly : AGS.API.dll Syntax public enum SelectionType Fields Name Description None Single"
  },
  "api/AGS.API.ScalingAxis.html": {
    "href": "api/AGS.API.ScalingAxis.html",
    "title": "Enum ScalingAxis | MonoAGS Documentation",
    "keywords": "Enum ScalingAxis Scaling axis on which the scaling takes place. Namespace : AGS.API Assembly : AGS.API.dll Syntax public enum ScalingAxis Fields Name Description X Scale based on the horizontal X axis. Y Scale based on the vertical Y axis."
  },
  "api/AGS.API.ScaleUpFilters.html": {
    "href": "api/AGS.API.ScaleUpFilters.html",
    "title": "Enum ScaleUpFilters | MonoAGS Documentation",
    "keywords": "Enum ScaleUpFilters The filter to be used when scaling up the texture. Namespace : AGS.API Assembly : AGS.API.dll Syntax public enum ScaleUpFilters Fields Name Description Linear Uses a weighted average of the closest pixels. Gives a smooth look (recommended for non pixel art games). Nearest Uses the nearest neighbor (in Manhattan Distance) as the neighbor to be used. Gives a pixelated look (recommended for pixel art games)."
  },
  "api/AGS.API.ScaleDownFilters.html": {
    "href": "api/AGS.API.ScaleDownFilters.html",
    "title": "Enum ScaleDownFilters | MonoAGS Documentation",
    "keywords": "Enum ScaleDownFilters The filter to be used when scaling down the texture. Namespace : AGS.API Assembly : AGS.API.dll Syntax public enum ScaleDownFilters Fields Name Description Linear Uses a weighted average of the closest pixels. Gives a smooth look (recommended for non pixel art games). LinearMipmapLinear Uses a weighted average to choose the mipmap, then a weighted average to choose the pixel. LinearMipmapNearest Uses a weighted average to choose the mipmap, then the nearest neighbor to choose the pixel. Nearest Uses the nearest neighbor (in Manhattan Distance) as the neighbor to be used. Gives a pixelated look (recommended for pixel art games). NearestMipmapLinear Uses the closest mipmap, then a weighted average to choose the pixel. NearestMipmapNearest Uses the closest mipmap, then the closest neighbor to choose the pixel."
  },
  "api/AGS.API.RestrictionListType.html": {
    "href": "api/AGS.API.RestrictionListType.html",
    "title": "Enum RestrictionListType | MonoAGS Documentation",
    "keywords": "Enum RestrictionListType Defines how a restriction list ( IRestrictionList ) is interpreted. Namespace : AGS.API Assembly : AGS.API.dll Syntax public enum RestrictionListType Fields Name Description BlackList Using a black list means that everybody on the list are restricted and will not be affected (by the area, viewport, or whatever the context of the list is), everybody else will be 'welcome' and will be affected (by the area, viewport, or whatever the context of the list is). WhiteList Using a white list means that everybody on the list are 'welcome' and will be affected (by the area, viewport, or whatever the context of the list is), everybody else will be restricted and will not be affected (by the area, viewport, or whatever the context of the list is)."
  },
  "api/AGS.API.ResourcePack.html": {
    "href": "api/AGS.API.ResourcePack.html",
    "title": "Struct ResourcePack | MonoAGS Documentation",
    "keywords": "Struct ResourcePack A resource pack to be registered with the resource loader. It carries both the resource pack implementation, and a priority which used to decide which resource pack takes precedence in the resource loader (higher is better). Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : AGS.API Assembly : AGS.API.dll Syntax public struct ResourcePack Constructors | Improve this Doc View Source ResourcePack(IResourcePack, Int32) Initializes a new instance of the ResourcePack struct. Declaration public ResourcePack(IResourcePack pack, int priority) Parameters Type Name Description IResourcePack pack Pack. System.Int32 priority Priority. Properties | Improve this Doc View Source Pack Gets the resource pack. Declaration public IResourcePack Pack { get; } Property Value Type Description IResourcePack The resource pack. | Improve this Doc View Source Priority Gets the priority. Declaration public int Priority { get; } Property Value Type Description System.Int32 The priority."
  },
  "api/AGS.API.RequiredComponentAttribute.html": {
    "href": "api/AGS.API.RequiredComponentAttribute.html",
    "title": "Class RequiredComponentAttribute | MonoAGS Documentation",
    "keywords": "Class RequiredComponentAttribute A decorator for components, to hint that this component requires other components in order to function. For example, a walk component needs a translate (x,y,z) component to move x and y when the character moves. The walk component also needs an animation component to animate the walk. So a walk component will have a required component attribute with translate compnent, and another attribute with the animation component. Inheritance System.Object System.Attribute RequiredComponentAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AGS.API Assembly : AGS.API.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface, AllowMultiple = true)] public class RequiredComponentAttribute : Attribute Constructors | Improve this Doc View Source RequiredComponentAttribute(Type, Boolean) Declaration public RequiredComponentAttribute(Type component, bool mandatory = true) Parameters Type Name Description System.Type component System.Boolean mandatory Properties | Improve this Doc View Source Component Gets the component. Declaration public Type Component { get; } Property Value Type Description System.Type The component. | Improve this Doc View Source Mandatory Gets a value indicating whether the component is mandatory for the current component to function. Declaration public bool Mandatory { get; } Property Value Type Description System.Boolean true if mandatory; otherwise, false ."
  },
  "api/AGS.API.RectangleF.html": {
    "href": "api/AGS.API.RectangleF.html",
    "title": "Struct RectangleF | MonoAGS Documentation",
    "keywords": "Struct RectangleF Represents a rectangle in 2D space. Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : AGS.API Assembly : AGS.API.dll Syntax public struct RectangleF Constructors | Improve this Doc View Source RectangleF(Single, Single, Single, Single) Initializes a new instance of the Rectangle struct. Declaration public RectangleF(float x, float y, float width, float height) Parameters Type Name Description System.Single x The x coordinate. System.Single y The y coordinate. System.Single width Width. System.Single height Height. Properties | Improve this Doc View Source Height Gets the height. Declaration public float Height { get; } Property Value Type Description System.Single The height. | Improve this Doc View Source Width Gets the width. Declaration public float Width { get; } Property Value Type Description System.Single The width. | Improve this Doc View Source X Gets the x coordinate. Declaration public float X { get; } Property Value Type Description System.Single The x. | Improve this Doc View Source Y Gets the y coordinate. Declaration public float Y { get; } Property Value Type Description System.Single The y. Methods | Improve this Doc View Source Contains(Vector2) Checkes if the rectangle contains the specified point. Declaration public bool Contains(Vector2 point) Parameters Type Name Description Vector2 point Point. Returns Type Description System.Boolean The contains. | Improve this Doc View Source Deconstruct(out Single, out Single, out Single, out Single) Declaration public void Deconstruct(out float x, out float y, out float width, out float height) Parameters Type Name Description System.Single x System.Single y System.Single width System.Single height | Improve this Doc View Source Equals(RectangleF) Declaration public bool Equals(RectangleF other) Parameters Type Name Description RectangleF other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToInspectorString() Declaration [CustomStringValue(CustomStringApplyWhen.CanWrite)] public string ToInspectorString() Returns Type Description System.String | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Implicit((Single x, Single y, Single width, Single height) to RectangleF) Declaration public static implicit operator RectangleF((float x, float y, float width, float height)rect) Parameters Type Name Description System.ValueTuple < System.Single , System.Single , System.Single , System.Single > rect Returns Type Description RectangleF"
  },
  "api/AGS.API.Rectangle.html": {
    "href": "api/AGS.API.Rectangle.html",
    "title": "Struct Rectangle | MonoAGS Documentation",
    "keywords": "Struct Rectangle Represents a rectangle in 2D space. Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : AGS.API Assembly : AGS.API.dll Syntax public struct Rectangle Constructors | Improve this Doc View Source Rectangle(Int32, Int32, Int32, Int32) Initializes a new instance of the Rectangle struct. Declaration public Rectangle(int x, int y, int width, int height) Parameters Type Name Description System.Int32 x The x coordinate. System.Int32 y The y coordinate. System.Int32 width Width. System.Int32 height Height. Properties | Improve this Doc View Source Height Gets the height. Declaration public int Height { get; } Property Value Type Description System.Int32 The height. | Improve this Doc View Source Width Gets the width. Declaration public int Width { get; } Property Value Type Description System.Int32 The width. | Improve this Doc View Source X Gets the x coordinate. Declaration public int X { get; } Property Value Type Description System.Int32 The x. | Improve this Doc View Source Y Gets the y coordinate. Declaration public int Y { get; } Property Value Type Description System.Int32 The y. Methods | Improve this Doc View Source Deconstruct(out Int32, out Int32, out Int32, out Int32) Declaration public void Deconstruct(out int x, out int y, out int width, out int height) Parameters Type Name Description System.Int32 x System.Int32 y System.Int32 width System.Int32 height | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToInspectorString() Declaration [CustomStringValue(CustomStringApplyWhen.CanWrite)] public string ToInspectorString() Returns Type Description System.String | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Implicit((Int32 x, Int32 y, Int32 width, Int32 height) to Rectangle) Declaration public static implicit operator Rectangle((int x, int y, int width, int height)rect) Parameters Type Name Description System.ValueTuple < System.Int32 , System.Int32 , System.Int32 , System.Int32 > rect Returns Type Description Rectangle"
  },
  "api/AGS.API.QueryLayoutEventArgs.html": {
    "href": "api/AGS.API.QueryLayoutEventArgs.html",
    "title": "Class QueryLayoutEventArgs | MonoAGS Documentation",
    "keywords": "Class QueryLayoutEventArgs Event arguments used by ITreeTableLayout when querying the rows for the layout. Each row should set a new column size for each column with a size smaller than what the row needs. Inheritance System.Object QueryLayoutEventArgs Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AGS.API Assembly : AGS.API.dll Syntax public class QueryLayoutEventArgs Constructors | Improve this Doc View Source QueryLayoutEventArgs() Initializes a new instance of the QueryLayoutEventArgs class. Declaration public QueryLayoutEventArgs() Properties | Improve this Doc View Source ColumnSizes Gets the column sizes. Each row should set a new column size for each column with a size smaller than what the row needs. Declaration public List<float> ColumnSizes { get; } Property Value Type Description System.Collections.Generic.List < System.Single > The column sizes."
  },
  "api/AGS.API.Quaternion.html": {
    "href": "api/AGS.API.Quaternion.html",
    "title": "Struct Quaternion | MonoAGS Documentation",
    "keywords": "Struct Quaternion Represents a Quaternion. Implements System.IEquatable < Quaternion > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : AGS.API Assembly : AGS.API.dll Syntax public struct Quaternion : IEquatable<Quaternion> Constructors | Improve this Doc View Source Quaternion(Vector3) Construct a new Quaternion from given Euler angles Declaration public Quaternion(Vector3 eulerAngles) Parameters Type Name Description Vector3 eulerAngles The euler angles as a Vector3 | Improve this Doc View Source Quaternion(Vector3, Single) Construct a new Quaternion from vector and w components Declaration public Quaternion(Vector3 v, float w) Parameters Type Name Description Vector3 v The vector part System.Single w The w part | Improve this Doc View Source Quaternion(Single, Single, Single) Construct a new Quaternion from given Euler angles Declaration public Quaternion(float pitch, float yaw, float roll) Parameters Type Name Description System.Single pitch The pitch (attitude), rotation around X axis System.Single yaw The yaw (heading), rotation around Y axis System.Single roll The roll (bank), rotation around Z axis | Improve this Doc View Source Quaternion(Single, Single, Single, Single) Construct a new Quaternion Declaration public Quaternion(float x, float y, float z, float w) Parameters Type Name Description System.Single x The x component System.Single y The y component System.Single z The z component System.Single w The w component Fields | Improve this Doc View Source Identity Defines the identity quaternion. Declaration public static readonly Quaternion Identity Field Value Type Description Quaternion Properties | Improve this Doc View Source Length Gets the length (magnitude) of the quaternion. Declaration public float Length { get; } Property Value Type Description System.Single See Also LengthSquared | Improve this Doc View Source LengthSquared Gets the square of the quaternion length (magnitude). Declaration public float LengthSquared { get; } Property Value Type Description System.Single | Improve this Doc View Source W Gets or sets the W component of this instance. Declaration public float W { get; set; } Property Value Type Description System.Single | Improve this Doc View Source X Gets or sets the X component of this instance. Declaration public float X { get; set; } Property Value Type Description System.Single | Improve this Doc View Source Xyz Gets or sets an OpenTK.Vector3 with the X, Y and Z components of this instance. Declaration [CLSCompliant(false)] public Vector3 Xyz { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Y Gets or sets the Y component of this instance. Declaration public float Y { get; set; } Property Value Type Description System.Single | Improve this Doc View Source Z Gets or sets the Z component of this instance. Declaration public float Z { get; set; } Property Value Type Description System.Single Methods | Improve this Doc View Source Add(Quaternion, Quaternion) Add two quaternions Declaration public static Quaternion Add(Quaternion left, Quaternion right) Parameters Type Name Description Quaternion left The first operand Quaternion right The second operand Returns Type Description Quaternion The result of the addition | Improve this Doc View Source Add(ref Quaternion, ref Quaternion, out Quaternion) Add two quaternions Declaration public static void Add(ref Quaternion left, ref Quaternion right, out Quaternion result) Parameters Type Name Description Quaternion left The first operand Quaternion right The second operand Quaternion result The result of the addition | Improve this Doc View Source Conjugate() Inverts the Vector3 component of this Quaternion. Declaration public void Conjugate() | Improve this Doc View Source Conjugate(Quaternion) Get the conjugate of the given quaternion Declaration public static Quaternion Conjugate(Quaternion q) Parameters Type Name Description Quaternion q The quaternion Returns Type Description Quaternion The conjugate of the given quaternion | Improve this Doc View Source Conjugate(ref Quaternion, out Quaternion) Get the conjugate of the given quaternion Declaration public static void Conjugate(ref Quaternion q, out Quaternion result) Parameters Type Name Description Quaternion q The quaternion Quaternion result The conjugate of the given quaternion | Improve this Doc View Source Equals(Quaternion) Compares this Quaternion instance to another Quaternion for equality. Declaration public bool Equals(Quaternion other) Parameters Type Name Description Quaternion other The other Quaternion to be used in the comparison. Returns Type Description System.Boolean True if both instances are equal; false otherwise. | Improve this Doc View Source Equals(Object) Compares this object instance to another object for equality. Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other The other object to be used in the comparison. Returns Type Description System.Boolean True if both objects are Quaternions of equal value. Otherwise it returns false. Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source FromAxisAngle(Vector3, Single) Build a quaternion from the given axis and angle Declaration public static Quaternion FromAxisAngle(Vector3 axis, float angle) Parameters Type Name Description Vector3 axis The axis to rotate about System.Single angle The rotation angle in radians Returns Type Description Quaternion The equivalent quaternion | Improve this Doc View Source FromEulerAngles(Vector3) Builds a Quaternion from the given euler angles Declaration public static Quaternion FromEulerAngles(Vector3 eulerAngles) Parameters Type Name Description Vector3 eulerAngles The euler angles as a vector Returns Type Description Quaternion The equivalent Quaternion | Improve this Doc View Source FromEulerAngles(ref Vector3, out Quaternion) Builds a Quaternion from the given euler angles Declaration public static void FromEulerAngles(ref Vector3 eulerAngles, out Quaternion result) Parameters Type Name Description Vector3 eulerAngles The euler angles a vector Quaternion result The equivalent Quaternion | Improve this Doc View Source FromEulerAngles(Single, Single, Single) Builds a Quaternion from the given euler angles Declaration public static Quaternion FromEulerAngles(float pitch, float yaw, float roll) Parameters Type Name Description System.Single pitch The pitch (attitude), rotation around X axis System.Single yaw The yaw (heading), rotation around Y axis System.Single roll The roll (bank), rotation around Z axis Returns Type Description Quaternion | Improve this Doc View Source FromMatrix(Matrix3) Builds a quaternion from the given rotation matrix Declaration public static Quaternion FromMatrix(Matrix3 matrix) Parameters Type Name Description Matrix3 matrix A rotation matrix Returns Type Description Quaternion The equivalent quaternion | Improve this Doc View Source FromMatrix(ref Matrix3, out Quaternion) Builds a quaternion from the given rotation matrix Declaration public static void FromMatrix(ref Matrix3 matrix, out Quaternion result) Parameters Type Name Description Matrix3 matrix A rotation matrix Quaternion result The equivalent quaternion | Improve this Doc View Source GetHashCode() Provides the hash code for this object. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code formed from the bitwise XOR of this objects members. Overrides System.ValueType.GetHashCode() | Improve this Doc View Source Invert() Reverses the rotation angle of this Quaterniond. Declaration public void Invert() | Improve this Doc View Source Invert(Quaternion) Get the inverse of the given quaternion Declaration public static Quaternion Invert(Quaternion q) Parameters Type Name Description Quaternion q The quaternion to invert Returns Type Description Quaternion The inverse of the given quaternion | Improve this Doc View Source Invert(ref Quaternion, out Quaternion) Get the inverse of the given quaternion Declaration public static void Invert(ref Quaternion q, out Quaternion result) Parameters Type Name Description Quaternion q The quaternion to invert Quaternion result The inverse of the given quaternion | Improve this Doc View Source Inverted() Returns a copy of this Quaterniond with its rotation angle reversed. Declaration public Quaternion Inverted() Returns Type Description Quaternion | Improve this Doc View Source Mult(Quaternion, Quaternion) Multiplies two instances. Declaration [Obsolete(\"Use Multiply instead.\")] public static Quaternion Mult(Quaternion left, Quaternion right) Parameters Type Name Description Quaternion left The first instance. Quaternion right The second instance. Returns Type Description Quaternion A new instance containing the result of the calculation. | Improve this Doc View Source Mult(ref Quaternion, ref Quaternion, out Quaternion) Multiplies two instances. Declaration [Obsolete(\"Use Multiply instead.\")] public static void Mult(ref Quaternion left, ref Quaternion right, out Quaternion result) Parameters Type Name Description Quaternion left The first instance. Quaternion right The second instance. Quaternion result A new instance containing the result of the calculation. | Improve this Doc View Source Multiply(Quaternion, Quaternion) Multiplies two instances. Declaration public static Quaternion Multiply(Quaternion left, Quaternion right) Parameters Type Name Description Quaternion left The first instance. Quaternion right The second instance. Returns Type Description Quaternion A new instance containing the result of the calculation. | Improve this Doc View Source Multiply(Quaternion, Single) Multiplies an instance by a scalar. Declaration public static Quaternion Multiply(Quaternion quaternion, float scale) Parameters Type Name Description Quaternion quaternion The instance. System.Single scale The scalar. Returns Type Description Quaternion A new instance containing the result of the calculation. | Improve this Doc View Source Multiply(ref Quaternion, ref Quaternion, out Quaternion) Multiplies two instances. Declaration public static void Multiply(ref Quaternion left, ref Quaternion right, out Quaternion result) Parameters Type Name Description Quaternion left The first instance. Quaternion right The second instance. Quaternion result A new instance containing the result of the calculation. | Improve this Doc View Source Multiply(ref Quaternion, Single, out Quaternion) Multiplies an instance by a scalar. Declaration public static void Multiply(ref Quaternion quaternion, float scale, out Quaternion result) Parameters Type Name Description Quaternion quaternion The instance. System.Single scale The scalar. Quaternion result A new instance containing the result of the calculation. | Improve this Doc View Source Normalize() Scales the Quaternion to unit length. Declaration public void Normalize() | Improve this Doc View Source Normalize(Quaternion) Scale the given quaternion to unit length Declaration public static Quaternion Normalize(Quaternion q) Parameters Type Name Description Quaternion q The quaternion to normalize Returns Type Description Quaternion The normalized quaternion | Improve this Doc View Source Normalize(ref Quaternion, out Quaternion) Scale the given quaternion to unit length Declaration public static void Normalize(ref Quaternion q, out Quaternion result) Parameters Type Name Description Quaternion q The quaternion to normalize Quaternion result The normalized quaternion | Improve this Doc View Source Normalized() Returns a copy of the Quaternion scaled to unit length. Declaration public Quaternion Normalized() Returns Type Description Quaternion | Improve this Doc View Source Slerp(Quaternion, Quaternion, Single) Do Spherical linear interpolation between two quaternions Declaration public static Quaternion Slerp(Quaternion q1, Quaternion q2, float blend) Parameters Type Name Description Quaternion q1 The first quaternion Quaternion q2 The second quaternion System.Single blend The blend factor Returns Type Description Quaternion A smooth blend between the given quaternions | Improve this Doc View Source Sub(Quaternion, Quaternion) Subtracts two instances. Declaration public static Quaternion Sub(Quaternion left, Quaternion right) Parameters Type Name Description Quaternion left The left instance. Quaternion right The right instance. Returns Type Description Quaternion The result of the operation. | Improve this Doc View Source Sub(ref Quaternion, ref Quaternion, out Quaternion) Subtracts two instances. Declaration public static void Sub(ref Quaternion left, ref Quaternion right, out Quaternion result) Parameters Type Name Description Quaternion left The left instance. Quaternion right The right instance. Quaternion result The result of the operation. | Improve this Doc View Source ToAxisAngle() Convert this instance to an axis-angle representation. Declaration public Vector4 ToAxisAngle() Returns Type Description Vector4 A Vector4 that is the axis-angle representation of this quaternion. | Improve this Doc View Source ToAxisAngle(out Vector3, out Single) Convert the current quaternion to axis angle representation Declaration public void ToAxisAngle(out Vector3 axis, out float angle) Parameters Type Name Description Vector3 axis The resultant axis System.Single angle The resultant angle | Improve this Doc View Source ToString() Returns a System.String that represents the current Quaternion. Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Addition(Quaternion, Quaternion) Adds two instances. Declaration public static Quaternion operator +(Quaternion left, Quaternion right) Parameters Type Name Description Quaternion left The first instance. Quaternion right The second instance. Returns Type Description Quaternion The result of the calculation. | Improve this Doc View Source Equality(Quaternion, Quaternion) Compares two instances for equality. Declaration public static bool operator ==(Quaternion left, Quaternion right) Parameters Type Name Description Quaternion left The first instance. Quaternion right The second instance. Returns Type Description System.Boolean True, if left equals right; false otherwise. | Improve this Doc View Source Inequality(Quaternion, Quaternion) Compares two instances for inequality. Declaration public static bool operator !=(Quaternion left, Quaternion right) Parameters Type Name Description Quaternion left The first instance. Quaternion right The second instance. Returns Type Description System.Boolean True, if left does not equal right; false otherwise. | Improve this Doc View Source Multiply(Quaternion, Quaternion) Multiplies two instances. Declaration public static Quaternion operator *(Quaternion left, Quaternion right) Parameters Type Name Description Quaternion left The first instance. Quaternion right The second instance. Returns Type Description Quaternion The result of the calculation. | Improve this Doc View Source Multiply(Quaternion, Single) Multiplies an instance by a scalar. Declaration public static Quaternion operator *(Quaternion quaternion, float scale) Parameters Type Name Description Quaternion quaternion The instance. System.Single scale The scalar. Returns Type Description Quaternion A new instance containing the result of the calculation. | Improve this Doc View Source Multiply(Single, Quaternion) Multiplies an instance by a scalar. Declaration public static Quaternion operator *(float scale, Quaternion quaternion) Parameters Type Name Description System.Single scale The scalar. Quaternion quaternion The instance. Returns Type Description Quaternion A new instance containing the result of the calculation. | Improve this Doc View Source Subtraction(Quaternion, Quaternion) Subtracts two instances. Declaration public static Quaternion operator -(Quaternion left, Quaternion right) Parameters Type Name Description Quaternion left The first instance. Quaternion right The second instance. Returns Type Description Quaternion The result of the calculation. Implements System.IEquatable<T>"
  },
  "api/AGS.API.PropertyFolderAttribute.html": {
    "href": "api/AGS.API.PropertyFolderAttribute.html",
    "title": "Class PropertyFolderAttribute | MonoAGS Documentation",
    "keywords": "Class PropertyFolderAttribute Allows declaring a class as a folder of properties which can be expanded in the inspector. Inheritance System.Object System.Attribute PropertyFolderAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AGS.API Assembly : AGS.API.dll Syntax [AttributeUsage(AttributeTargets.Class)] public class PropertyFolderAttribute : Attribute"
  },
  "api/AGS.API.PropertyAttribute.html": {
    "href": "api/AGS.API.PropertyAttribute.html",
    "title": "Class PropertyAttribute | MonoAGS Documentation",
    "keywords": "Class PropertyAttribute Allows attaching an attribute to a property which controls various aspects on how it will look when shown via the inspector. Inheritance System.Object System.Attribute PropertyAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AGS.API Assembly : AGS.API.dll Syntax [AttributeUsage(AttributeTargets.Property)] public class PropertyAttribute : Attribute Constructors | Improve this Doc View Source PropertyAttribute() Declaration public PropertyAttribute() Properties | Improve this Doc View Source Browsable Gets or sets a value indicating whether this PropertyAttribute will be visible in the inspector. Declaration public bool Browsable { get; set; } Property Value Type Description System.Boolean true if browsable; otherwise, false . | Improve this Doc View Source Category Gets or sets the category (this will override the component name, if part of a component, or the \"General\" category for all other properties). Declaration public string Category { get; set; } Property Value Type Description System.String The category. | Improve this Doc View Source CategoryExpand Gets or sets whether to expand the category automatically when opening the inspector (this should match between all the properties in the category for accurate results). Declaration public bool CategoryExpand { get; set; } Property Value Type Description System.Boolean Expand Category? | Improve this Doc View Source CategoryZ Gets or sets the category's z index for sorting in the inspector (this should match between all the properties in the category for accurate results). Declaration public int CategoryZ { get; set; } Property Value Type Description System.Int32 The category z. | Improve this Doc View Source Description Gets or sets the description (this will override the xml docs on the property if set). Declaration public string Description { get; set; } Property Value Type Description System.String The description. | Improve this Doc View Source DisplayName Gets or sets the display name (this will override the property name if set). Declaration public string DisplayName { get; set; } Property Value Type Description System.String The display name. | Improve this Doc View Source ForceReadonly Forces the property to be shown as readonly in the inspector (even if it can be set by script). Declaration public bool ForceReadonly { get; set; } Property Value Type Description System.Boolean true to force readonly; otherwise, false ."
  },
  "api/AGS.API.Position.html": {
    "href": "api/AGS.API.Position.html",
    "title": "Struct Position | MonoAGS Documentation",
    "keywords": "Struct Position A 3D location in the world. Implements System.IEquatable < Position > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : AGS.API Assembly : AGS.API.dll Syntax [DataContract] public struct Position : IEquatable<Position> Constructors | Improve this Doc View Source Position(PointF, Nullable<Single>) Declaration public Position(PointF point, float? z = default(float? )) Parameters Type Name Description PointF point System.Nullable < System.Single > z | Improve this Doc View Source Position(Single, Single, Nullable<Single>) Declaration [JsonConstructor] public Position(float x, float y, float? z = default(float? )) Parameters Type Name Description System.Single x System.Single y System.Nullable < System.Single > z Fields | Improve this Doc View Source Empty Declaration public static Position Empty Field Value Type Description Position Properties | Improve this Doc View Source X Gets the x coordinate. Declaration [DataMember(Name = \"X\")] public float X { get; } Property Value Type Description System.Single The x. | Improve this Doc View Source XY Gets the (x,y) as a point. Declaration public PointF XY { get; } Property Value Type Description PointF The xy. | Improve this Doc View Source Y Gets the y coordinate. Declaration [DataMember(Name = \"Y\")] public float Y { get; } Property Value Type Description System.Single The y. | Improve this Doc View Source Z Gets the z coordinate. In a 2D world, Z is actually used to decide what gets rendered behind what. By default, Z will equal Y and will change whenever Y changes, so that characters/objects which are more to the bottom of the screen will appear in the front, which is the desired behavior in most scenarios. By setting a location with Z different than Y, this behavior breaks, making Z an independent value (this can be reverted again by explicitly setting Z to be Y). Declaration [DataMember(Name = \"Z\")] public float Z { get; } Property Value Type Description System.Single The z. Methods | Improve this Doc View Source Deconstruct(out Single, out Single, out Single) Deconstruct the specified x, y and z (can be used for tuple deconstruction). Declaration public void Deconstruct(out float x, out float y, out float z) Parameters Type Name Description System.Single x The x coordinate. System.Single y The y coordinate. System.Single z The z coordinate. | Improve this Doc View Source Equals(Position) Declaration public bool Equals(Position other) Parameters Type Name Description Position other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns a System.String that represents the current Position . Declaration public override string ToString() Returns Type Description System.String A System.String that represents the current Position . Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Implicit((Single x, Single y, Nullable<Single> z) to Position) Declaration public static implicit operator Position((float x, float y, float? z)pos) Parameters Type Name Description System.ValueTuple < System.Single , System.Single , System.Nullable < System.Single >> pos Returns Type Description Position | Improve this Doc View Source Implicit((Single x, Single y) to Position) Declaration public static implicit operator Position((float x, float y)pos) Parameters Type Name Description System.ValueTuple < System.Single , System.Single > pos Returns Type Description Position Implements System.IEquatable<T>"
  },
  "api/AGS.API.PortraitPositioning.html": {
    "href": "api/AGS.API.PortraitPositioning.html",
    "title": "Enum PortraitPositioning | MonoAGS Documentation",
    "keywords": "Enum PortraitPositioning Configures how the portraits will be positioned. Namespace : AGS.API Assembly : AGS.API.dll Syntax public enum PortraitPositioning Fields Name Description Alternating The portraits will alternate in positions so if two characters are having a dialog, each of them will have the portrait on a sepearate side. Note that the portrait's pivot will be automacially set to left in order for the portrait to be properly positioned. Custom Portrait positioning will not be altered by the engine, it is up to the game developer to choose how to position the portrait before speaking. SpeakerPosition If the speaker is in the left side of the screen the portrait will be positioned on the left, otherwise on the right. Note that the portrait's pivot will be automacially set to left in order for the portrait to be properly positioned."
  },
  "api/AGS.API.PointF.html": {
    "href": "api/AGS.API.PointF.html",
    "title": "Struct PointF | MonoAGS Documentation",
    "keywords": "Struct PointF Represents a float point in 2D space. Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : AGS.API Assembly : AGS.API.dll Syntax public struct PointF Constructors | Improve this Doc View Source PointF(Single, Single) Initializes a new instance of the PointF struct. Declaration public PointF(float x, float y) Parameters Type Name Description System.Single x The x coordinate. System.Single y The y coordinate. Fields | Improve this Doc View Source Empty Declaration public static PointF Empty Field Value Type Description PointF Properties | Improve this Doc View Source X Gets the x coordinate. Declaration public float X { get; } Property Value Type Description System.Single The x. | Improve this Doc View Source Y Gets the y coordinate. Declaration public float Y { get; } Property Value Type Description System.Single The y. Methods | Improve this Doc View Source Deconstruct(out Single, out Single) Declaration public void Deconstruct(out float x, out float y) Parameters Type Name Description System.Single x System.Single y | Improve this Doc View Source Equals(PointF) Declaration public bool Equals(PointF other) Parameters Type Name Description PointF other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Addition(PointF, PointF) Declaration public static PointF operator +(PointF p1, PointF p2) Parameters Type Name Description PointF p1 PointF p2 Returns Type Description PointF | Improve this Doc View Source Division(PointF, PointF) Declaration public static PointF operator /(PointF p1, PointF p2) Parameters Type Name Description PointF p1 PointF p2 Returns Type Description PointF | Improve this Doc View Source Division(PointF, Single) Declaration public static PointF operator /(PointF p1, float factor) Parameters Type Name Description PointF p1 System.Single factor Returns Type Description PointF | Improve this Doc View Source Implicit((Single x, Single y) to PointF) Declaration public static implicit operator PointF((float x, float y)point) Parameters Type Name Description System.ValueTuple < System.Single , System.Single > point Returns Type Description PointF | Improve this Doc View Source Multiply(PointF, PointF) Declaration public static PointF operator *(PointF p1, PointF p2) Parameters Type Name Description PointF p1 PointF p2 Returns Type Description PointF | Improve this Doc View Source Multiply(PointF, Single) Declaration public static PointF operator *(PointF p1, float factor) Parameters Type Name Description PointF p1 System.Single factor Returns Type Description PointF | Improve this Doc View Source Subtraction(PointF, PointF) Declaration public static PointF operator -(PointF p1, PointF p2) Parameters Type Name Description PointF p1 PointF p2 Returns Type Description PointF"
  },
  "api/AGS.API.Point.html": {
    "href": "api/AGS.API.Point.html",
    "title": "Struct Point | MonoAGS Documentation",
    "keywords": "Struct Point Represents an integer point in 2D space. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : AGS.API Assembly : AGS.API.dll Syntax public struct Point Constructors | Improve this Doc View Source Point(Int32, Int32) Initializes a new instance of the Point struct. Declaration public Point(int x, int y) Parameters Type Name Description System.Int32 x The x coordinate. System.Int32 y The y coordinate. Fields | Improve this Doc View Source Empty Declaration public static Point Empty Field Value Type Description Point Properties | Improve this Doc View Source X Gets the x coordinate. Declaration public int X { get; } Property Value Type Description System.Int32 The x. | Improve this Doc View Source Y Gets the y coordinate. Declaration public int Y { get; } Property Value Type Description System.Int32 The y. Methods | Improve this Doc View Source Deconstruct(out Int32, out Int32) Declaration public void Deconstruct(out int x, out int y) Parameters Type Name Description System.Int32 x System.Int32 y | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Implicit((Int32 x, Int32 y) to Point) Declaration public static implicit operator Point((int x, int y)point) Parameters Type Name Description System.ValueTuple < System.Int32 , System.Int32 > point Returns Type Description Point"
  },
  "api/AGS.API.ObjectEventArgs.html": {
    "href": "api/AGS.API.ObjectEventArgs.html",
    "title": "Class ObjectEventArgs | MonoAGS Documentation",
    "keywords": "Class ObjectEventArgs Event arguments for interacting with an object. Inheritance System.Object ObjectEventArgs InventoryInteractEventArgs Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : AGS.API Assembly : AGS.API.dll Syntax public class ObjectEventArgs Constructors | Improve this Doc View Source ObjectEventArgs(IObject) Declaration public ObjectEventArgs(IObject obj) Parameters Type Name Description IObject obj Properties | Improve this Doc View Source Object The object being interacted with. Declaration public IObject Object { get; } Property Value Type Description IObject The object. Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/AGS.API.NumberValueChangedArgs.html": {
    "href": "api/AGS.API.NumberValueChangedArgs.html",
    "title": "Class NumberValueChangedArgs | MonoAGS Documentation",
    "keywords": "Class NumberValueChangedArgs Event arguments for when the number editor's value changed. Inheritance System.Object NumberValueChangedArgs Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AGS.API Assembly : AGS.API.dll Syntax public class NumberValueChangedArgs Constructors | Improve this Doc View Source NumberValueChangedArgs(Boolean) Initializes a new instance of the NumberValueChangedArgs class. Declaration public NumberValueChangedArgs(bool userInitiated) Parameters Type Name Description System.Boolean userInitiated If set to true user initiated. Properties | Improve this Doc View Source UserInitiated Gets a value indicating whether the value was changed by the user (using the editor) or programmatically. Declaration public bool UserInitiated { get; } Property Value Type Description System.Boolean true if user initiated; otherwise, false ."
  },
  "api/AGS.API.ListChangeType.html": {
    "href": "api/AGS.API.ListChangeType.html",
    "title": "Enum ListChangeType | MonoAGS Documentation",
    "keywords": "Enum ListChangeType How did the list change? Namespace : AGS.API Assembly : AGS.API.dll Syntax public enum ListChangeType Fields Name Description Add An item was added to the list. Remove An item was removed from the list."
  },
  "api/AGS.API.ListboxItemChangingArgs.html": {
    "href": "api/AGS.API.ListboxItemChangingArgs.html",
    "title": "Class ListboxItemChangingArgs | MonoAGS Documentation",
    "keywords": "Class ListboxItemChangingArgs Event arguments for when a selected item is in the process of changing (before actually being changed) in a listbox/combobox. The event gives the ability to cancel the selection by settings ShouldCancel to true. Inheritance System.Object ListboxItemArgs ListboxItemChangingArgs Inherited Members ListboxItemArgs.Item ListboxItemArgs.Index System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AGS.API Assembly : AGS.API.dll Syntax public class ListboxItemChangingArgs : ListboxItemArgs Constructors | Improve this Doc View Source ListboxItemChangingArgs(IStringItem, Int32) Initializes a new instance of the ListboxItemChangingArgs class. Declaration public ListboxItemChangingArgs(IStringItem item, int index) Parameters Type Name Description IStringItem item Item. System.Int32 index Index. Properties | Improve this Doc View Source ShouldCancel A subscriber of the event can canel processing the item selection by setting this property to true. Declaration public bool ShouldCancel { get; set; } Property Value Type Description System.Boolean true if should cancel; otherwise, false ."
  },
  "api/AGS.API.ListboxItemArgs.html": {
    "href": "api/AGS.API.ListboxItemArgs.html",
    "title": "Class ListboxItemArgs | MonoAGS Documentation",
    "keywords": "Class ListboxItemArgs Event arguments for when a selected item changes in a listbox/combobox. Inheritance System.Object ListboxItemArgs ListboxItemChangingArgs Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AGS.API Assembly : AGS.API.dll Syntax public class ListboxItemArgs Constructors | Improve this Doc View Source ListboxItemArgs(IStringItem, Int32) Initializes a new instance of the ListboxItemArgs class. Declaration public ListboxItemArgs(IStringItem item, int index) Parameters Type Name Description IStringItem item Item. System.Int32 index Index. Properties | Improve this Doc View Source Index The selected index. Declaration public int Index { get; } Property Value Type Description System.Int32 The index. | Improve this Doc View Source Item The newly selected item. Declaration public IStringItem Item { get; } Property Value Type Description IStringItem The item."
  },
  "api/AGS.API.LayoutDirection.html": {
    "href": "api/AGS.API.LayoutDirection.html",
    "title": "Enum LayoutDirection | MonoAGS Documentation",
    "keywords": "Enum LayoutDirection Namespace : AGS.API Assembly : AGS.API.dll Syntax public enum LayoutDirection Fields Name Description Horizontal Vertical"
  },
  "api/AGS.API.KeyboardEventArgs.html": {
    "href": "api/AGS.API.KeyboardEventArgs.html",
    "title": "Class KeyboardEventArgs | MonoAGS Documentation",
    "keywords": "Class KeyboardEventArgs Event arguments for keyboard key press/release. Inheritance System.Object KeyboardEventArgs Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AGS.API Assembly : AGS.API.dll Syntax public class KeyboardEventArgs Constructors | Improve this Doc View Source KeyboardEventArgs(Key) Declaration public KeyboardEventArgs(Key key) Parameters Type Name Description Key key Properties | Improve this Doc View Source Key Declaration public Key Key { get; } Property Value Type Description Key"
  },
  "api/AGS.API.Key.html": {
    "href": "api/AGS.API.Key.html",
    "title": "Enum Key | MonoAGS Documentation",
    "keywords": "Enum Key The keyboard keys. Namespace : AGS.API Assembly : AGS.API.dll Syntax public enum Key Fields Name Description A AltLeft AltRight B Back BackSlash BackSpace BracketLeft BracketRight C CapsLock Clear Comma ControlLeft ControlRight D Delete Down E End Enter Escape F F1 F10 F11 F12 F13 F14 F15 F16 F17 F18 F19 F2 F20 F21 F22 F23 F24 F25 F26 F27 F28 F29 F3 F30 F31 F32 F33 F34 F35 F4 F5 F6 F7 F8 F9 G Grave H Home I Insert J K Keypad0 Keypad1 Keypad2 Keypad3 Keypad4 Keypad5 Keypad6 Keypad7 Keypad8 Keypad9 KeypadAdd KeypadDecimal KeypadDivide KeypadEnter KeypadMinus KeypadMultiply KeypadPeriod KeypadPlus KeypadSubtract L LAlt LastKey LBracket LControl Left LShift LWin M Menu Minus N NonUSBackSlash Number0 Number1 Number2 Number3 Number4 Number5 Number6 Number7 Number8 Number9 NumLock O P PageDown PageUp Pause Period Plus PrintScreen Q Quote R RAlt RBracket RControl Right RShift RWin S ScrollLock Semicolon ShiftLeft ShiftRight Slash Sleep Space T Tab Tilde U Unknown Up V W WinLeft WinRight X Y Z"
  },
  "api/AGS.API.IZoomArea.html": {
    "href": "api/AGS.API.IZoomArea.html",
    "title": "Interface IZoomArea | MonoAGS Documentation",
    "keywords": "Interface IZoomArea These are areas that indicate the camera should automatically zoom when the player (or whatever other target was chosen for the camera) is in that area. This works along nicely with a vertical scaling area, to zoom the camera as the player moves farther away from the camera. Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax [RequiredComponent(typeof(IArea), true)] public interface IZoomArea : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source MaxZoom The highest point in the area, which usually corresponds to the farthest distance to the camera (if your background has perspective) will have the camera at its \"maximal zoom\" which is what configured here. This will be interpolated as the character moves down the area until it reaches the most bottom area (the \"minimal zoom\"). Declaration float MaxZoom { get; set; } Property Value Type Description System.Single The minimum zoom. | Improve this Doc View Source MinZoom The lowest point in the area, which usually corresponds to the closest distance to the camera (if your background has perspective) will have the camera at its \"minimal zoom\" which is what configured here. This will be interpolated as the character moves up the area until it reaches the top-most area (the \"maximal zoom\"). Declaration float MinZoom { get; set; } Property Value Type Description System.Single The minimum zoom. | Improve this Doc View Source ZoomCamera Gets or sets a value indicating whether to zoom the camera on this area or not. Declaration bool ZoomCamera { get; set; } Property Value Type Description System.Boolean true if zoom camera; otherwise, false . Methods | Improve this Doc View Source GetZoom(Single) Gets the zoom factor for the given Y value (in room coordinates). Declaration float GetZoom(float value) Parameters Type Name Description System.Single value Value. Returns Type Description System.Single The zoom."
  },
  "api/AGS.API.IWorldPositionComponent.html": {
    "href": "api/AGS.API.IWorldPositionComponent.html",
    "title": "Interface IWorldPositionComponent | MonoAGS Documentation",
    "keywords": "Interface IWorldPositionComponent Allows getting the world position for entities. Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IWorldPositionComponent : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source WorldX Get the X of an entity in world coordinates. In case the entity has no parents, the value will be the same as X , but if the entity has a parent, then WorldX will give you the absolute world value (as opposed to relative to the parent). Declaration float WorldX { get; } Property Value Type Description System.Single The world x. | Improve this Doc View Source WorldXY Get the (X,Y) of an entity in world coordinates. In case the entity has no parents, the value will be the same as Position , but if the entity has a parent, then WorldXY will give you the absolute world value (as opposed to relative to the parent). Declaration PointF WorldXY { get; } Property Value Type Description PointF The world y. | Improve this Doc View Source WorldY Get the Y of an entity in world coordinates. In case the entity has no parents, the value will be the same as Y , but if the entity has a parent, then WorldY will give you the absolute world value (as opposed to relative to the parent). Declaration float WorldY { get; } Property Value Type Description System.Single The world y."
  },
  "api/AGS.API.IWindowInfo.html": {
    "href": "api/AGS.API.IWindowInfo.html",
    "title": "Interface IWindowInfo | MonoAGS Documentation",
    "keywords": "Interface IWindowInfo Information about the application window and the sub-window containing the game. Usually, the window hosting the game IS the application window, but for some scenarios (like for the editor which is hosting the game) the game can be configured to only use part of the window (a \"sub window\"). Inherited Members System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IWindowInfo : INotifyPropertyChanged Properties | Improve this Doc View Source AppWindowHeight Gets the height of the application window. Declaration float AppWindowHeight { get; } Property Value Type Description System.Single The height of the application window. | Improve this Doc View Source AppWindowWidth Gets the width of the application window. Declaration float AppWindowWidth { get; } Property Value Type Description System.Single The width of the application window. | Improve this Doc View Source GameSubWindow Gets the rectangle (a subset of the application window) which contains the game. In the normal case this rectangle will be the entire application window. This rectangle includes possible black borders (if PreserveAspectRatio is enabled). To get the rectangle without the black borders, ScreenArea . Declaration Rectangle GameSubWindow { get; } Property Value Type Description Rectangle The game sub window."
  },
  "api/AGS.API.IWalkComponent.html": {
    "href": "api/AGS.API.IWalkComponent.html",
    "title": "Interface IWalkComponent | MonoAGS Documentation",
    "keywords": "Interface IWalkComponent Gives an entity the ability to walk around the room. Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax [RequiredComponent(typeof(ITranslateComponent), true)] [RequiredComponent(typeof(IFaceDirectionComponent), true)] [RequiredComponent(typeof(IOutfitComponent), true)] [RequiredComponent(typeof(IHasRoomComponent), true)] [RequiredComponent(typeof(IDrawableInfoComponent), true)] [RequiredComponent(typeof(IAnimationComponent), false)] public interface IWalkComponent : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source AdjustWalkSpeedToScaleArea Gets or sets a value indicating whether this IWalkComponent adjust the walk speed to the scaling area (i.e for a scaling area that shrinks the character to simulate a far away place, you'll want the character to walk slower). Declaration bool AdjustWalkSpeedToScaleArea { get; set; } Property Value Type Description System.Boolean true if adjust walk speed to scale area; otherwise, false . | Improve this Doc View Source DebugDrawWalkPath If set to true, lines will be drawn to mark the selected paths to walk by the path finder. This can be useful for debugging issues with the path finder algorithm. Declaration bool DebugDrawWalkPath { get; set; } Property Value Type Description System.Boolean true if debug draw walk path; otherwise, false . | Improve this Doc View Source IsWalking Gets a value indicating whether the character is walking. Declaration bool IsWalking { get; } Property Value Type Description System.Boolean true if is walking; otherwise, false . | Improve this Doc View Source MovementLinkedToAnimation Gets or sets a value indicating whether this IWalkComponent movement is linked to the animation. This is on by default, meaning that the walk step would only be performed when the walk animation frame changes. For the walk to look right, the images need to be drawn so that a foot touching the ground moves back a constant amount of pixels in between frames. This amount should then be entered as the WalkStep , and not touched any further. Any speed adjustment should only done by changing the animation speed (the animation's DelayBetweenFrames property and an optional additional delay for the actual running frame). If this is turned off, then the walk step would be performed on each frame making for a smooth movement. Note that if the walk animation only has a single frame, then the engine will ignore the configuration and will treat it as false. How to decide if this should be on or off? As a rule of thumb, if the character has legs you would want this on. If you turn this off (for a character which has legs) while the movement will look smoother, it will also cause a gliding effect, caused by the fact that the movement is not in sync with the animation of the moving feet. If your character doesn't have legs (a robot, a floating ghost, etc), turning this off would make for a smoother looking walk. Declaration bool MovementLinkedToAnimation { get; set; } Property Value Type Description System.Boolean true if movement linked to animation; otherwise, false . | Improve this Doc View Source WalkDestination Gets the destination the character is currently walking to (if currently walking), or the last destination the character was walking to (if currently not walking). Declaration Position WalkDestination { get; } Property Value Type Description Position The walk destination. | Improve this Doc View Source WalkStep Gets or sets the walk step. The walk speed is actually the number of pixels the character moves each time he/she/it moves. If MovementLinkedToAnimation is turned off, the step would be made on each frame, making for a smooth movement. This means that for this state, the walk step is the sole 'decision maker' for the walking speed of the character. If MovementLinkedToAnimation is turned on (the default), the step would be made each time the animation frame changes. This means that for this state, the walk step should be setup once (it needs to match exactly the amount of pixels the leg moves in the drawings) when the actual controller of the walk speed is the animation's speed (the animation's DelayBetweenFrames property and an optional additional delay for the actual running frame). Declaration PointF WalkStep { get; set; } Property Value Type Description PointF The walk speed. Methods | Improve this Doc View Source PlaceOnWalkableArea() If the character is already standing in a walkable area, does nothing. Otherwise it would try to place it on a walkable area close by. Declaration void PlaceOnWalkableArea() | Improve this Doc View Source StopWalkingAsync() Asynchronosly stops the current walk (if there is a walk to stop). Declaration Task StopWalkingAsync() Returns Type Description System.Threading.Tasks.Task The walking async. | Improve this Doc View Source WalkAsync(Position, Boolean) Walks asynchronously to the specified location. Let's start walking to the chair, say something about it while we're walking, and then properly respond if the user decided they want to walk somewhere else before we got to the chair. Task<bool> walkSuccessful = cHero.WalkAsync(oChair.Location); await cHero.SayAsync(\"I'm walking to the chair!\"); if (await walkSuccessful) { await cHero.SayAsync(\"And now I'm sitting!\"); sitOnChair(); } else { await cHero.SayAsync(\"You know what, that the chair doesn't look too comfortable, I think I'll pass.\"); } Declaration Task<bool> WalkAsync(Position position, bool walkAnywhere = false) Parameters Type Name Description Position position The position. System.Boolean walkAnywhere If set to true, the character will simply walk directly to the destination, ignoring walkable areas and treat the entire room as walkable. Returns Type Description System.Threading.Tasks.Task < System.Boolean > Returns true if the walk was completed successfully, or false if the walk was cancelled (if the user clicked on something else) or the character failed to reach the destination. | Improve this Doc View Source WalkStraightAsync(Position) Walk asynchronously to the specified position in a straight line as far as is possible before hitting a non-walkable area. This is useful for use with the arrow keys for character movement, since it guarantees that the character will move in a straight line in the direction specified. Declaration Task<bool> WalkStraightAsync(Position position) Parameters Type Name Description Position position Position. Returns Type Description System.Threading.Tasks.Task < System.Boolean > Returns true if the walk was completed successfully, or false if the walk was cancelled (if the user clicked on something else) or the character failed to reach the destination."
  },
  "api/AGS.API.IWalkBehindArea.html": {
    "href": "api/AGS.API.IWalkBehindArea.html",
    "title": "Interface IWalkBehindArea | MonoAGS Documentation",
    "keywords": "Interface IWalkBehindArea These are areas that indicate that the background graphic of the room should be in front of the characters/objects. When rendering the engine will actually crop those up and render them on top. Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax [RequiredComponent(typeof(IArea), true)] public interface IWalkBehindArea : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source Baseline The baseline is a horizontal line, which tells the game where the character has to be in order to be drawn behind the area. For example, if you had a table in the middle of the room, you'd only want him drawn behind the table if he was standing behind it. You normally place a baseline at the lowest point of the walk-behind area. Declaration float? Baseline { get; set; } Property Value Type Description System.Nullable < System.Single > The baseline."
  },
  "api/AGS.API.IWalkableArea.html": {
    "href": "api/AGS.API.IWalkableArea.html",
    "title": "Interface IWalkableArea | MonoAGS Documentation",
    "keywords": "Interface IWalkableArea These are the areas that indicate where the characters can walk. Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax [RequiredComponent(typeof(IArea), true)] public interface IWalkableArea : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source IsWalkable Gets or sets a value indicating whether this area is walkable. Note that you can also turn the Enabled on/off to achieve the same effect.The difference is that if you have an area which is both a walkable area but also is a different kind an area(areas can have multiple roles) than Enabled controls all of area roles, and IsWalkable only affects the area's walk-ability. Declaration bool IsWalkable { get; set; } Property Value Type Description System.Boolean true if is walkable; otherwise, false ."
  },
  "api/AGS.API.IVisibleComponent.html": {
    "href": "api/AGS.API.IVisibleComponent.html",
    "title": "Interface IVisibleComponent | MonoAGS Documentation",
    "keywords": "Interface IVisibleComponent Adds the ability to show/hide an entity. Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax [RequiredComponent(typeof(IInObjectTreeComponent), true)] public interface IVisibleComponent : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source UnderlyingVisible Gets a value indicating whether this entity underlying property is visible. If the entity was set to be visible but its parent is not visible, the entity will read as not visible. The \"UnderlyingVisible\" property however, will remember that the entity was set to be visible, so in case the parent will be visible, the entity will remember that it is now visible as well. Declaration bool UnderlyingVisible { get; } Property Value Type Description System.Boolean true if underlying visible; otherwise, false . See Also Visible | Improve this Doc View Source Visible Gets or sets a value indicating whether this entity is visible. Note that even if you set the entity to be visible, it might still appear as not visible if it's part of a tree and its parent (or the parent's parent, or the parent's grandparent, and so on) is itself not visible. However the setting will be remembered (via the UnderlyingVisible property) so if the parent will become visible the entity will also become visible if was set to be visible before. Declaration bool Visible { get; set; } Property Value Type Description System.Boolean true if visible; otherwise, false . Examples button.TreeNode.SetParent(null); // the button has no parent button.Visible = true; Debug.WriteLine(\"Is button visible? {0}, button.Visible); //This will print \"Is button visible? True\". button.TreeNode.SetParent(panel); // the panel is now the parent of the button. panel.Visible = false; Debug.WriteLine(\"Is button visible? {0}, button.Visible); //This will print \"Is button visible? False\" because the parent is not visible. panel.Visible = true; Debug.WriteLine(\"Is button visible? {0}, button.Visible); //This will print \"Is button visible? True\" because both the parent and the button are visible."
  },
  "api/AGS.API.IRenderLayer.html": {
    "href": "api/AGS.API.IRenderLayer.html",
    "title": "Interface IRenderLayer | MonoAGS Documentation",
    "keywords": "Interface IRenderLayer A render layer is an abstract grouping of objects with similar rendering properties. A render layer has a \"Z\" property for sorting which takes precedence over specific objects \"Z\" property. This means that if you have a UI render layer which is configured to be in front of a Background render layer, all objects which are associated with the UI layer will always be in front of the objects that are associated with the background layer. In addition, render layers add support for assigning different parallax speeds, to create beautiful parallax effects. AGS comes with a few built in layers that are used by default (Background, Foreground, UI and Speech). Speech layer is in front to ensure that displayed text can always be seen. This is the default layer used for Character.Say. UI layer is next, to ensure that it can always be seen (unless obstructed by text). This is the default layer used for all UI controls. This is followed by the Foreground layer, which is the default for all non UI objects. And lastly the Background layer, which is the default for the room's background graphics. You can assign those layers yourself, using AGSLayers static class: cEgo.RenderLayer = AGSLayers.UI; //The player is now on the UI layer! Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IRenderLayer Properties | Improve this Doc View Source IndependentResolution A custom virtual resolution that will be used for all objects in this layer, different than the default game's virtual resolution. Null means that the layer does not have a custom resolution and uses the game's resolution. Declaration Size? IndependentResolution { get; } Property Value Type Description System.Nullable < Size > The independent resolution. Examples Let's assume the game resolution is (320,200): The character is using the game's resolution, but the house in the room is in a layer with a (640,400) resolution. This means that if the character's position is (100,100) and the house's position is (200,200) they will actually be drawn in the same location. | Improve this Doc View Source ParallaxSpeed Gets the parallax speed associated with the layer ( https://en.wikipedia.org/wiki/Parallax ). The speed is the factor by which the location is changed based to the normal speed. Giving different speeds for different layers creates the parallax effect which gives the illusion of 3D depth. This is mostly effective in scrolling screens, as the objects move in relation to the camera. If the room scrolls horizontally (the majority of scrolling rooms), you'd like to change the X value of the parallax speed. If the room scrolls vertically (rare but can happen), you'd like to change the Y value of the parallax speed. All the default layers have parallax speed of 1 (i.e normal speed), so you'll need to create your own layers to enable the parallax effect. The closer the object is to the front, the faster it should go, so it should have a bigger parallax speed. Objects in the foreground should have values larger than 1, and objects in the background should have values smaller than 1. PointF parallaxSpeed = new PointF (1.4f, 1f); //all objects in this layer will move at a faster horizontal speed than the rest of the objects. AGSRenderLayer parallaxForegroundLayer = new AGSRenderLayer(-50, parallaxSpeed); //This layer is positioned before the foreground layer and behind the UI layer. myObjInFront.RenderLayer = parallaxForegroundLayer; Declaration PointF ParallaxSpeed { get; } Property Value Type Description PointF The parallax speed. | Improve this Doc View Source Z Gets the Z ordering for the layer. The smaller the number, the more visible the layer gets. Debug.WriteLine(\"Z value for the background layer is: \" + AGSLayers.Background.Z); Declaration int Z { get; } Property Value Type Description System.Int32 The z."
  },
  "api/AGS.API.IRenderInstruction.html": {
    "href": "api/AGS.API.IRenderInstruction.html",
    "title": "Interface IRenderInstruction | MonoAGS Documentation",
    "keywords": "Interface IRenderInstruction A render instruction represents an instruction to draw something. It is created on demand by renderers, and used by the rendering loop to draw on the screen on each game tick. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IRenderInstruction Methods | Improve this Doc View Source Release() After the rendering instruction has completed, the rendering loop tells the render instruction that it's not needed anymore by calling the \"Release\" function. The instruction can then recycle itself (if object pooling is used) to reduce memory allocations. Declaration void Release() | Improve this Doc View Source Render() Draw something. Declaration void Render() See Also IRenderPipeline IRenderer IRendererLoop"
  },
  "api/AGS.API.IRendererLoop.html": {
    "href": "api/AGS.API.IRendererLoop.html",
    "title": "Interface IRendererLoop | MonoAGS Documentation",
    "keywords": "Interface IRendererLoop Represents the render loop of the game. All drawing to the screen is performed from the render loop. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IRendererLoop Methods | Improve this Doc View Source Tick() Calls the next tick, which triggers the next render. This is called from within the engine. Declaration void Tick() See Also IRenderPipeline IRenderer IRenderInstruction"
  },
  "api/AGS.API.IOutfitComponent.html": {
    "href": "api/AGS.API.IOutfitComponent.html",
    "title": "Interface IOutfitComponent | MonoAGS Documentation",
    "keywords": "Interface IOutfitComponent Gives an entity the ability to have an outfit (and be able to change outfits). Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IOutfitComponent : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source Outfit Gets or sets the outfit for the entity. Declaration IOutfit Outfit { get; set; } Property Value Type Description IOutfit The outfit. Examples await cHero.SayAsync(\"Let's try on this cool hat.\"); //Hero speaks with the normal outfit- without the hat var normalOutfit = cHero.Outfit; //Saving the current outfit so we can wear it back later cHero.Outfit = outfitWithHat; await cHero.SayAsync(\"Hmm, it looks nice, but not sure if it's comfortable.\"); //Character's animation now uses the hat for speaking. await cHero.WalkAsync(walkPoint); //Character's walk animation now includes the hat. cHero.Outfit = normalOutfit; await cHero.SayAsync(\"Yeah, it's not comfortable, I took it down.\"); //Character's animation is now again without the hat See Also IOutfit"
  },
  "api/AGS.API.IOutfit.html": {
    "href": "api/AGS.API.IOutfit.html",
    "title": "Interface IOutfit | MonoAGS Documentation",
    "keywords": "Interface IOutfit An outfit is a collection of animations that are associated with a character. The collection can be swapped with another collection when the character changes his look. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IOutfit Examples Say your player can wear a jacket. You can create two outfits in advance, one with a jacket and the other without. Each outfit will have different walk, idle and speak animations (one with a jacket and the other without). Properties | Improve this Doc View Source Item[String] Gets or sets an animation that will be associated with a specific key for this outfit. Some built in keys are expected by some components to change animations (idle, walk, speak). Custom animations can be added and accessed from the outfit as needed. cPlayer.Outfit[AGSOutfit.Walk] = aCrazyWalkAnimation; cPlayer.Outfit[AGSOutfit.Idle] = aPlayingYoyoAnimation; cPlayer.Outfit[AGSOutfit.Speak] = aScaryAnimation; cPlayer.Outfit[\"Jump\"] = aJumpAnimation; await cPlayer.WalkAsync(100, 200); //The crazy walk animation will now be used for walking to (100,200). Thread.Sleep(5000); //The player has finished walking, and sitting idle for 5 seconds during which the playing yoyo animation is playing await cPlayer.SayAsync(\"Do I scare you?\"); //The character will speak with the scary animation cPlayer.StartAnimation(cPlayer.Outfit[\"Jump\"].Left); //The character will do a jump left animation. Declaration IDirectionalAnimation this[string key] { get; set; } Parameters Type Name Description System.String key Key. Property Value Type Description IDirectionalAnimation Methods | Improve this Doc View Source ToDictionary() Gets all the animations as a dictionary; Declaration IDictionary<string, IDirectionalAnimation> ToDictionary() Returns Type Description System.Collections.Generic.IDictionary < System.String , IDirectionalAnimation > The dictionary."
  },
  "api/AGS.API.IObjectFactory.html": {
    "href": "api/AGS.API.IObjectFactory.html",
    "title": "Interface IObjectFactory | MonoAGS Documentation",
    "keywords": "Interface IObjectFactory A factory for creating objects, characters, and masked hotspots. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IObjectFactory Methods | Improve this Doc View Source GetAdventureObject(String, IRoom, String[], String[]) Creates a new object with IHotspotComponent, which supports have reaction to character interactions (command verbs). TODO: invent a new type name for this. It can be IAdventureObject or something simple like IHotspot. Declaration IObject GetAdventureObject(string id, IRoom room = null, string[] sayWhenLook = null, string[] sayWhenInteract = null) Parameters Type Name Description System.String id A unique identifier for the object (this has to be globally unique across all entities). IRoom room The room to place the object in. System.String [] sayWhenLook An optional list of things that the player will say (one after the other) when looking on the object. System.String [] sayWhenInteract An optional list of things that the player will say (one after the other) when interacting with the object. Returns Type Description IObject The object. | Improve this Doc View Source GetCharacter(String, IOutfit, IAnimationComponent, IRoom) Creates a new character Declaration ICharacter GetCharacter(string id, IOutfit outfit, IAnimationComponent innerContainer, IRoom room = null) Parameters Type Name Description System.String id A unique identifier for the object (this has to be globally unique across all entities). IOutfit outfit An animation outfit for the character (this can be created from the outfit factory). IAnimationComponent innerContainer An animation container for the character IRoom room The room to place the character in. Returns Type Description ICharacter The character. | Improve this Doc View Source GetCharacter(String, IOutfit, IRoom, String[], String[]) Creates a new character Declaration ICharacter GetCharacter(string id, IOutfit outfit, IRoom room = null, string[] sayWhenLook = null, string[] sayWhenInteract = null) Parameters Type Name Description System.String id A unique identifier for the object (this has to be globally unique across all entities).. IOutfit outfit An animation outfit for the character (this can be created from the outfit factory). IRoom room The room to place the character in. System.String [] sayWhenLook An optional list of things that the player will say (one after the other) when looking on the character. System.String [] sayWhenInteract An optional list of things that the player will say (one after the other) when interacting with the character. Returns Type Description ICharacter The character. | Improve this Doc View Source GetHotspot(String, String, IRoom, String[], String[], String) Creates a new hotspot object from a bitmap mask (the hotspot text will be shown when the mouse is hovering the object if a hotspot label is in the game). Declaration IObject GetHotspot(string maskPath, string hotspot, IRoom room = null, string[] sayWhenLook = null, string[] sayWhenInteract = null, string id = null) Parameters Type Name Description System.String maskPath The path of the resource/file (see cref=\"IResourceLoader\"/> to load the mask from. System.String hotspot The hotspot text. IRoom room The room to place the hotspot in. System.String [] sayWhenLook An optional list of things that the player will say (one after the other) when looking on the object. System.String [] sayWhenInteract An optional list of things that the player will say (one after the other) when interacting with the object. System.String id A unique identifier for the object (this has to be globally unique across all entities). If an ID is not given, the hotspot text will be used as the id. Returns Type Description IObject The hotspot. | Improve this Doc View Source GetHotspotAsync(String, String, IRoom, String[], String[], String) Creates a new hotspot object from a bitmap mask asynchronously (the hotspot text will be shown when the mouse is hovering the object if a hotspot label is in the game). Declaration Task<IObject> GetHotspotAsync(string maskPath, string hotspot, IRoom room = null, string[] sayWhenLook = null, string[] sayWhenInteract = null, string id = null) Parameters Type Name Description System.String maskPath The path of the resource/file ( IResourceLoader to load the mask from. System.String hotspot The hotspot text. IRoom room The room to place the hotspot in. System.String [] sayWhenLook An optional list of things that the player will say (one after the other) when looking on the object. System.String [] sayWhenInteract An optional list of things that the player will say (one after the other) when interacting with the object. System.String id A unique identifier for the object (this has to be globally unique across all entities). If an ID is not given, the hotspot text will be used as the id. Returns Type Description System.Threading.Tasks.Task < IObject > The hotspot. | Improve this Doc View Source GetObject(String, IRoom) Creates a new object. Declaration IObject GetObject(string id, IRoom room = null) Parameters Type Name Description System.String id A unique identifier for the object (this has to be globally unique across all entities). IRoom room The room to place the object in. Returns Type Description IObject The object."
  },
  "api/AGS.API.IObject.html": {
    "href": "api/AGS.API.IObject.html",
    "title": "Interface IObject | MonoAGS Documentation",
    "keywords": "Interface IObject An object is an entity with pre-set components (like location, scale, rotation, animation, etc) which is useful to depict all adventure game objects. Both characters and UI controls are also objects (with additional components). Inherited Members IEntity.ID IEntity.DisplayName IEntity.GetFriendlyName() IComponentsCollection.AddComponent<TComponent>() IComponentsCollection.AddComponent(Type) IComponentsCollection.AddComponent<TComponent>(IComponent) IComponentsCollection.RemoveComponent<TComponent>() IComponentsCollection.RemoveComponent(Type) IComponentsCollection.RemoveComponent(IComponent) IComponentsCollection.PopComponent<TComponent>() IComponentsCollection.HasComponent<TComponent>() IComponentsCollection.HasComponent(Type) IComponentsCollection.HasComponent(IComponent) IComponentsCollection.GetComponent<TComponent>() IComponentsCollection.GetComponent(Type) IComponentsCollection.Bind<TComponent>(Action<TComponent>, Action<TComponent>) IComponentsCollection.Count IComponentsCollection.ComponentsInitialized IComponentsCollection.OnComponentsInitialized IComponentsCollection.OnComponentsChanged IComponentsCollection.OnDisposed(Action) System.Collections.Generic.IEnumerable<AGS.API.IComponent>.GetEnumerator() IHasRoomComponent.Room IHasRoomComponent.PreviousRoom IHasRoomComponent.OnRoomChanged IHasRoomComponent.ChangeRoomAsync(IRoom, Nullable<Single>, Nullable<Single>) IAnimationComponent.Animation IAnimationComponent.OnAnimationStarted IAnimationComponent.StartAnimation(IAnimation) IAnimationComponent.Animate(IAnimation) IAnimationComponent.AnimateAsync(IAnimation) IInTree<IObject>.TreeNode IColliderComponent.CenterPoint IColliderComponent.CollidesWith(Single, Single, IViewport) IVisibleComponent.Visible IVisibleComponent.UnderlyingVisible IEnabledComponent.Enabled IEnabledComponent.UnderlyingEnabled IEnabledComponent.ClickThrough ICustomPropertiesComponent.Properties IDrawableInfoComponent.RenderLayer IDrawableInfoComponent.IgnoreViewport IDrawableInfoComponent.IgnoreScalingArea IShaderComponent.Shader IImageComponent.IsImageVisible IImageComponent.CurrentSprite IImageComponent.SpriteProvider IBorderComponent.Border IPixelPerfectComponent.IsPixelPerfect IPixelPerfectCollidable.PixelPerfectHitTestArea IScale.Height IScale.Width IScale.ScaleX IScale.ScaleY IScale.Scale IScale.BaseSize IScale.ResetScale() IScale.ResetScale(Single, Single) IScale.ScaleTo(Single, Single) IScale.FlipHorizontally() IScale.FlipVertically() IRotate.Angle ITranslate.Position ITranslate.X ITranslate.Y ITranslate.Z IHasImage.Opacity IHasImage.Tint IHasImage.Brightness IHasImage.Pivot IHasImage.Image IModelMatrixComponent.GetModelMatrices() IModelMatrixComponent.OnMatrixChanged IModelMatrixComponent.ModelMatrixLockStep IBoundingBoxComponent.GetBoundingBoxes(IViewport) IBoundingBoxComponent.WorldBoundingBox IBoundingBoxComponent.OnBoundingBoxesChanged IBoundingBoxComponent.BoundingBoxLockStep IWorldPositionComponent.WorldX IWorldPositionComponent.WorldY IWorldPositionComponent.WorldXY IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IObject : IEntity, IComponentsCollection, IEnumerable<IComponent>, IEnumerable, IHasRoomComponent, IAnimationComponent, IInObjectTreeComponent, IInTree<IObject>, IColliderComponent, IVisibleComponent, IEnabledComponent, ICustomPropertiesComponent, IDrawableInfoComponent, IShaderComponent, ITranslateComponent, IImageComponent, IBorderComponent, IScaleComponent, IRotateComponent, IPixelPerfectComponent, IPixelPerfectCollidable, IHasModelMatrix, IScale, IRotate, ITranslate, IHasImage, IModelMatrixComponent, IBoundingBoxComponent, IWorldPositionComponent, IComponent, IDisposable, INotifyPropertyChanged"
  },
  "api/AGS.API.InventoryInteractEventArgs.html": {
    "href": "api/AGS.API.InventoryInteractEventArgs.html",
    "title": "Class InventoryInteractEventArgs | MonoAGS Documentation",
    "keywords": "Class InventoryInteractEventArgs Event arguments for inventory interaction Inheritance System.Object ObjectEventArgs InventoryInteractEventArgs Inherited Members ObjectEventArgs.Object System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : AGS.API Assembly : AGS.API.dll Syntax public class InventoryInteractEventArgs : ObjectEventArgs Constructors | Improve this Doc View Source InventoryInteractEventArgs(IObject, IInventoryItem) Initializes a new instance of the InventoryInteractEventArgs class. Declaration public InventoryInteractEventArgs(IObject obj, IInventoryItem item) Parameters Type Name Description IObject obj Object. IInventoryItem item Item. Properties | Improve this Doc View Source Item The inventory item being interacted with. Declaration public IInventoryItem Item { get; } Property Value Type Description IInventoryItem The item. Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides ObjectEventArgs.ToString()"
  },
  "api/AGS.API.InventoryCombinationEventArgs.html": {
    "href": "api/AGS.API.InventoryCombinationEventArgs.html",
    "title": "Class InventoryCombinationEventArgs | MonoAGS Documentation",
    "keywords": "Class InventoryCombinationEventArgs The event arguments for the inventory combination events. The arguments contain the two combined items. Inheritance System.Object InventoryCombinationEventArgs Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : AGS.API Assembly : AGS.API.dll Syntax public class InventoryCombinationEventArgs Constructors | Improve this Doc View Source InventoryCombinationEventArgs(IInventoryItem, IInventoryItem) Initializes a new instance of the InventoryCombinationEventArgs class. Declaration public InventoryCombinationEventArgs(IInventoryItem activeItem, IInventoryItem passiveItem) Parameters Type Name Description IInventoryItem activeItem Active item. IInventoryItem passiveItem Passive item. Properties | Improve this Doc View Source ActiveItem Gets the active item for the combination (the item that you are using on the other item). Declaration public IInventoryItem ActiveItem { get; } Property Value Type Description IInventoryItem The active item. | Improve this Doc View Source PassiveItem Gets the passive item for the combination (the item that you use the other item on). Declaration public IInventoryItem PassiveItem { get; } Property Value Type Description IInventoryItem The passive item. Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/AGS.API.INumberEditorComponent.html": {
    "href": "api/AGS.API.INumberEditorComponent.html",
    "title": "Interface INumberEditorComponent | MonoAGS Documentation",
    "keywords": "Interface INumberEditorComponent A component that acts as a control to edit numbers. Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface INumberEditorComponent : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source DownButton Gets or sets an optional button that will decrease the value by Step when clicked. Declaration IButton DownButton { get; set; } Property Value Type Description IButton Up button. | Improve this Doc View Source EditWholeNumbersOnly Gets or sets a value indicating whether this INumberEditorComponent edits whole numbers only (ints), or numbers with decimal digits (floats). Declaration bool EditWholeNumbersOnly { get; set; } Property Value Type Description System.Boolean true if edit whole numbers only; otherwise, false . | Improve this Doc View Source MaxValue Gets or sets the maximum allowed value. Declaration float? MaxValue { get; set; } Property Value Type Description System.Nullable < System.Single > The max value. | Improve this Doc View Source MinValue Gets or sets the minimum allowed value. Declaration float? MinValue { get; set; } Property Value Type Description System.Nullable < System.Single > The minimum value. | Improve this Doc View Source OnValueChanged An event which fires whenever the value is changed. Declaration IBlockingEvent<NumberValueChangedArgs> OnValueChanged { get; } Property Value Type Description IBlockingEvent < NumberValueChangedArgs > The event. | Improve this Doc View Source Slider Gets or sets an optional slider which will allow editing the value by sliding the handle. The range of the slider is determined by either SuggestedMinValue and SuggestedMaxValue if those exist, otherwise by MinValue and MaxValue if those exist, otherwise the arbitrary -1000 and 1000 are set as minimum and maximum. Declaration ISlider Slider { get; set; } Property Value Type Description ISlider The slider. | Improve this Doc View Source Step Gets or sets the step that increases/decreases the value when pressing on the up/down arrow keys/buttons. Declaration float Step { get; set; } Property Value Type Description System.Single The step. | Improve this Doc View Source SuggestedMaxValue Gets or sets the suggested maximum value. This will be the maximum value shown in the slider (if one exists), but will not be forced on a user which types a value by hand. Declaration float? SuggestedMaxValue { get; set; } Property Value Type Description System.Nullable < System.Single > The suggested maximum value. | Improve this Doc View Source SuggestedMinValue Gets or sets the suggested minimum value. This will be the minimum value shown in the slider (if one exists), but will not be forced on a user which types a value by hand. Declaration float? SuggestedMinValue { get; set; } Property Value Type Description System.Nullable < System.Single > The suggested minimum value. | Improve this Doc View Source UpButton Gets or sets an optional button that will increase the value by Step when clicked. Declaration IButton UpButton { get; set; } Property Value Type Description IButton Up button. | Improve this Doc View Source Value Gets or sets the edited number. Declaration float Value { get; set; } Property Value Type Description System.Single The value. Methods | Improve this Doc View Source SetUserInitiatedValue(Single) Sets the value and have it marked as changed by the user. Declaration void SetUserInitiatedValue(float value) Parameters Type Name Description System.Single value Value."
  },
  "api/AGS.API.IModelMatrixComponent.html": {
    "href": "api/AGS.API.IModelMatrixComponent.html",
    "title": "Interface IModelMatrixComponent | MonoAGS Documentation",
    "keywords": "Interface IModelMatrixComponent A component to calculate the matrix used to render/hit-test the object. The matrix includes transormations, rotations and scale. Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax [RequiredComponent(typeof(IScaleComponent), true)] [RequiredComponent(typeof(ITranslateComponent), true)] [RequiredComponent(typeof(IRotateComponent), true)] [RequiredComponent(typeof(IImageComponent), true)] [RequiredComponent(typeof(IHasRoomComponent), true)] [RequiredComponent(typeof(IDrawableInfoComponent), true)] [RequiredComponent(typeof(IInObjectTreeComponent), true)] [RequiredComponent(typeof(IWorldPositionComponent), true)] [RequiredComponent(typeof(ITextComponent), false)] public interface IModelMatrixComponent : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source ModelMatrixLockStep Allows locking the component from changing (to allow for changing multiple components \"at once\"). Declaration ILockStep ModelMatrixLockStep { get; } Property Value Type Description ILockStep The lock step. | Improve this Doc View Source OnMatrixChanged An event that fires whenever the matrix changes. Declaration IBlockingEvent OnMatrixChanged { get; } Property Value Type Description IBlockingEvent The on matrix changed. Methods | Improve this Doc View Source GetModelMatrices() Gets the model matrices. Declaration ModelMatrices GetModelMatrices() Returns Type Description ModelMatrices The model matrices."
  },
  "api/AGS.API.IModalWindowComponent.html": {
    "href": "api/AGS.API.IModalWindowComponent.html",
    "title": "Interface IModalWindowComponent | MonoAGS Documentation",
    "keywords": "Interface IModalWindowComponent Adds the ability for a window to be modal (blocks input from other windows). For example, if you create a \"Save Game\" dialog, you wouldn't want to be able to open the inventory when the dialog is showing, so you'll make the dialog a modal window, then you can grab focus when the window is shown, and lose focus when the window is closed. Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IModalWindowComponent : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source HasFocus Gets a value indicating whether this IModalWindowComponent has focus. Declaration bool HasFocus { get; } Property Value Type Description System.Boolean true if has focus; otherwise, false . Methods | Improve this Doc View Source GrabFocus() Grabs the focus for the window. Use this when opening your window. If a window grabs focus when another window already has focus, the new window will now be focused, and the engine will remember that the old window was focused before, so once the new window loses focus the old window will regain focus. Declaration void GrabFocus() | Improve this Doc View Source LoseFocus() Loses the focus for the window, bringing the focus back to the previous focused window (or none, if no windows are focused, which is the default). Declaration void LoseFocus()"
  },
  "api/AGS.API.IMessageBoxSettings.html": {
    "href": "api/AGS.API.IMessageBoxSettings.html",
    "title": "Interface IMessageBoxSettings | MonoAGS Documentation",
    "keywords": "Interface IMessageBoxSettings Settings for creating message boxes. Those are created from the \"AGSMessageBox\" class. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IMessageBoxSettings Properties | Improve this Doc View Source ButtonHeight Gets or sets the buttons height (if there are any buttons). Declaration float ButtonHeight { get; set; } Property Value Type Description System.Single The button height. | Improve this Doc View Source ButtonText Gets or sets the text configuration for the buttons in the message box (if there are any buttons). Declaration ITextConfig ButtonText { get; set; } Property Value Type Description ITextConfig The button text. | Improve this Doc View Source ButtonWidth Gets or sets the buttons width (if there are any buttons). Declaration float ButtonWidth { get; set; } Property Value Type Description System.Single The button width. | Improve this Doc View Source ButtonXPadding Gets or sets the buttons padding on the x axis (if there are any buttons). Declaration float ButtonXPadding { get; set; } Property Value Type Description System.Single The button X padding. | Improve this Doc View Source ButtonYPadding Gets or sets the buttons padding on the y axis (if there are any buttons). Declaration float ButtonYPadding { get; set; } Property Value Type Description System.Single The button Y padding. | Improve this Doc View Source DisplayConfig Gets or sets the display configuration. Declaration ISayConfig DisplayConfig { get; set; } Property Value Type Description ISayConfig The display config. | Improve this Doc View Source RenderLayer Gets or sets the render layer. Declaration IRenderLayer RenderLayer { get; set; } Property Value Type Description IRenderLayer The render layer."
  },
  "api/AGS.API.IMaskLoader.html": {
    "href": "api/AGS.API.IMaskLoader.html",
    "title": "Interface IMaskLoader | MonoAGS Documentation",
    "keywords": "Interface IMaskLoader Allows loading a mask from an image. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IMaskLoader Methods | Improve this Doc View Source Load(Boolean[,], String, Boolean, Nullable<Color>, String) Load the mask from the specified 2d array. Declaration IMask Load(bool[, ] mask, string id, bool inverseMask = false, Color? debugDrawColor = default(Color? ), string saveMaskToFile = null) Parameters Type Name Description System.Boolean [,] mask Mask. System.String id Identifier. System.Boolean inverseMask If set to true inverse mask. System.Nullable < Color > debugDrawColor Debug draw color. System.String saveMaskToFile Save mask to file. Returns Type Description IMask The load. | Improve this Doc View Source Load(String, IBitmap, Boolean, Nullable<Color>, String) Load the mask from the specified image. Declaration IMask Load(string id, IBitmap image, bool transparentMeansMasked = false, Color? debugDrawColor = default(Color? ), string saveMaskToFile = null) Parameters Type Name Description System.String id A unique id which will be given to the mask. IBitmap image The image to use as the mask. System.Boolean transparentMeansMasked If set to true then a transparent pixel means a masked value, otherwise a non transparent pixel means a masked value. System.Nullable < Color > debugDrawColor For debugging purposes you can specify a color, which will then add an object to the mask which can drawn on screen (will use the color to draw the mask). System.String saveMaskToFile Whether to save the mask to file (for debugging purposes). Returns Type Description IMask The mask. | Improve this Doc View Source Load(String, Boolean, Nullable<Color>, String, String) Load the mask from the specified resource/file path ( IResourceLoader ). Declaration IMask Load(string path, bool transparentMeansMasked = false, Color? debugDrawColor = default(Color? ), string saveMaskToFile = null, string id = null) Parameters Type Name Description System.String path The resource/file path. System.Boolean transparentMeansMasked If set to true then a transparent pixel means a masked value, otherwise a non transparent pixel means a masked value. System.Nullable < Color > debugDrawColor For debugging purposes you can specify a color, which will then add an object to the mask which can drawn on screen (will use the color to draw the mask). System.String saveMaskToFile Whether to save the mask to file (for debugging purposes). System.String id A unique identifier for the mask (the path will be used as id if an id is not specified). Returns Type Description IMask The mask. | Improve this Doc View Source LoadAsync(String, Boolean, Nullable<Color>, String, String) Load the mask asynchronously from the specified resource/file path ( IResourceLoader ). Declaration Task<IMask> LoadAsync(string path, bool transparentMeansMasked = false, Color? debugDrawColor = default(Color? ), string saveMaskToFile = null, string id = null) Parameters Type Name Description System.String path The resource/file path. System.Boolean transparentMeansMasked If set to true then a transparent pixel means a masked value, otherwise a non transparent pixel means a masked value. System.Nullable < Color > debugDrawColor For debugging purposes you can specify a color, which will then add an object to the mask which can drawn on screen (will use the color to draw the mask). System.String saveMaskToFile Whether to save the mask to file (for debugging purposes). System.String id A unique identifier for the mask (the path will be used as id if an id is not specified). Returns Type Description System.Threading.Tasks.Task < IMask > The mask."
  },
  "api/AGS.API.IMask.html": {
    "href": "api/AGS.API.IMask.html",
    "title": "Interface IMask | MonoAGS Documentation",
    "keywords": "Interface IMask A mask is basically a 2D array of booleans, usually representing an area on the screen. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IMask Properties | Improve this Doc View Source DebugDraw When loading the mask there's an option for drawing the mask on the screen, for debugging purposes. Declaration IObject DebugDraw { get; } Property Value Type Description IObject The debug draw. | Improve this Doc View Source Height Gets the height. Declaration int Height { get; } Property Value Type Description System.Int32 The height. | Improve this Doc View Source MaxX The maximum X with a \"masked\" (i.e a true) value. Declaration float MaxX { get; } Property Value Type Description System.Single The max x. | Improve this Doc View Source MaxY The maximum Y with a \"masked\" (i.e a true) value. Declaration float MaxY { get; } Property Value Type Description System.Single The max y. | Improve this Doc View Source MinX The minimum X with a \"masked\" (i.e a true) value. Declaration float MinX { get; } Property Value Type Description System.Single The minimum x. | Improve this Doc View Source MinY The minimum Y with a \"masked\" (i.e a true) value. Declaration float MinY { get; } Property Value Type Description System.Single The minimum y. | Improve this Doc View Source Width Gets the width. Declaration int Width { get; } Property Value Type Description System.Int32 The width. Methods | Improve this Doc View Source ApplyToMask(Boolean[][], Point) Adds the current mask to the target specified mask (i.e all true values in the current mask will be set to true in the target mask). Declaration void ApplyToMask(bool[][] mask, Point offset) Parameters Type Name Description System.Boolean [][] mask Mask. Point offset The offset of the mask from the (0,0) co-ordinate | Improve this Doc View Source AsJaggedArray() Returns the mask as a jagged array ( https://msdn.microsoft.com/en-us/library/2s05feca.aspx ). Declaration bool[][] AsJaggedArray() Returns Type Description System.Boolean [][] The jagged array. | Improve this Doc View Source DebugString() Returns a display string with the mask contents as asterisks, for debugging purposes. Declaration string DebugString() Returns Type Description System.String The string. | Improve this Doc View Source IsMasked(PointF) Is the specific point masked (i.e has a true value in the 2D array)? Declaration bool IsMasked(PointF point) Parameters Type Name Description PointF point Point. Returns Type Description System.Boolean true , if masked, false otherwise. | Improve this Doc View Source IsMasked(PointF, AGSBoundingBox, Single, Single) Is the specific point masked after projecting the mask on the specified square? Declaration bool IsMasked(PointF point, AGSBoundingBox projectionBox, float scaleX, float scaleY) Parameters Type Name Description PointF point Point. AGSBoundingBox projectionBox Projection box. System.Single scaleX The projection box x scaling (is only needed to know if the projection box is flipped horizontally). System.Single scaleY The projection box y scaling (is only need to know if the projection box is flipped vertically). Returns Type Description System.Boolean true , if masked, false otherwise. | Improve this Doc View Source To2DArray() Copies the mask to a 2D array and returns it. Declaration bool[, ] To2DArray() Returns Type Description System.Boolean [,] The DA rray. | Improve this Doc View Source Transform(Matrix4) Transform the mask (by moving and/or rotating it). Declaration void Transform(Matrix4 matrix) Parameters Type Name Description Matrix4 matrix The transform matrix."
  },
  "api/AGS.API.IInventoryItem.html": {
    "href": "api/AGS.API.IInventoryItem.html",
    "title": "Interface IInventoryItem | MonoAGS Documentation",
    "keywords": "Interface IInventoryItem Represents an inventory item that a character can hold in his/her inventory. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IInventoryItem Properties | Improve this Doc View Source CursorGraphics Gets or sets the graphics that represents the inventory item when the mouse cursor is to be shaped like the inventory item (i.e when the character holds the inventory and wants to use it on something). The graphics can be a single image or an animation. This is only relevant when using a mouse cursor (in touch platforms it won't be used, unless we're simulating a mouse). Declaration IObject CursorGraphics { get; set; } Property Value Type Description IObject The cursor graphics. | Improve this Doc View Source Graphics Gets or sets the graphics that represents the inventory item when it sits in the inventory window. The graphics can be a single image or an animation. Declaration IObject Graphics { get; set; } Property Value Type Description IObject The graphics. | Improve this Doc View Source Qty Gets or sets the quantity of the item of the inventory. Most inventory items don't have quantity, they're either there or not. But, if the inventory item is money, for example, you can use the \"Qty\" variable to indicate how much money you currently have in your inventory. Declaration float Qty { get; set; } Property Value Type Description System.Single The item quantity. | Improve this Doc View Source ShouldInteract Gets or sets a value indicating whether this inventory item is an inventory item that you can only interact with but not combine with other items or objects in the room. Most items will have this as false, but it might be useful in rare cases. For example, if you have a trumpet, and you want the character to be able to play the trumpet at any given time, but don't actually want to use the trumpet on other items, you can assign ShouldInteract = true, and subscribe to the interact event, in order to play the music. Declaration bool ShouldInteract { get; set; } Property Value Type Description System.Boolean true if should use the interact events; otherwise, it will combine as normal. Methods | Improve this Doc View Source OnCombination(IInventoryItem) Called when one inventory item is combined with another. OnInventoryCombination Declaration IEvent<InventoryCombinationEventArgs> OnCombination(IInventoryItem otherItem) Parameters Type Name Description IInventoryItem otherItem The second inventory item, which is combined with this inventory item. Returns Type Description IEvent < InventoryCombinationEventArgs > The event to subscribe. Examples First, we subscribe to the event: iScissors.OnCombination(iRope).Subscribe(cutRope); //The \"cutRope\" will be called whether the scissors were used on the rope, or vice versa. Then, we define the event (we describe what happens when using the scissors and the rope together: private void cutRope(object sender, InventoryCombinationEventArgs args) { displayCutRopeAnimation(); cEgo.Inventory.Items.Remove(iRope); //No more rope for us! }"
  },
  "api/AGS.API.IInventoryFactory.html": {
    "href": "api/AGS.API.IInventoryFactory.html",
    "title": "Interface IInventoryFactory | MonoAGS Documentation",
    "keywords": "Interface IInventoryFactory A factory for creating inventory items and inventory windows. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IInventoryFactory Methods | Improve this Doc View Source GetInventoryItem(IObject, IObject, Boolean) Creates a new inventory item. Declaration IInventoryItem GetInventoryItem(IObject graphics, IObject cursorGraphics, bool playerStartsWithItem = false) Parameters Type Name Description IObject graphics Graphics object for the item. IObject cursorGraphics When the item is selected for using on other objects, the cursor will be using this graphics . System.Boolean playerStartsWithItem If set to true player will have the item at the beginning of the game. Returns Type Description IInventoryItem The inventory item. | Improve this Doc View Source GetInventoryItem(String, String, String, ILoadImageConfig, Boolean) Creates a new inventory item Declaration IInventoryItem GetInventoryItem(string hotspot, string graphicsFile, string cursorFile = null, ILoadImageConfig loadConfig = null, bool playerStartsWithItem = false) Parameters Type Name Description System.String hotspot The hotspot text (which will be shown when hovering the item if a hotspot label is in the game). System.String graphicsFile Graphics file to load the item graphics file. System.String cursorFile Cursor file to load the graphics for the cursor when the item is selected. ILoadImageConfig loadConfig A load configuration for the images. System.Boolean playerStartsWithItem If set to true player will have the item at the beginning of the game. Returns Type Description IInventoryItem The inventory item. | Improve this Doc View Source GetInventoryItemAsync(String, String, String, ILoadImageConfig, Boolean) Creates a new inventory item asynchronously Declaration Task<IInventoryItem> GetInventoryItemAsync(string hotspot, string graphicsFile, string cursorFile = null, ILoadImageConfig loadConfig = null, bool playerStartsWithItem = false) Parameters Type Name Description System.String hotspot The hotspot text (which will be shown when hovering the item if a hotspot label is in the game). System.String graphicsFile Graphics file to load the item graphics file. System.String cursorFile Cursor file to load the graphics for the cursor when the item is selected. ILoadImageConfig loadConfig A load configuration for the images. System.Boolean playerStartsWithItem If set to true player will have the item at the beginning of the game. Returns Type Description System.Threading.Tasks.Task < IInventoryItem > The inventory item. | Improve this Doc View Source GetInventoryWindow(String, IImage, Single, Single, IInventory) Creates a new inventory window Declaration IInventoryWindow GetInventoryWindow(string id, IImage image, float itemWidth, float itemHeight, IInventory inventory) Parameters Type Name Description System.String id A unique identifier for the window. IImage image A background image for the inventory window. System.Single itemWidth The width which will be allocated for each inventory item. System.Single itemHeight The height which will be allocated for each inventory item. IInventory inventory The inventory that the window will show on screen (usually the player's inventory). Returns Type Description IInventoryWindow The inventory window. | Improve this Doc View Source GetInventoryWindow(String, Single, Single, Single, Single, Single, Single, IInventory, Boolean) Creates a new inventory window Declaration IInventoryWindow GetInventoryWindow(string id, float width, float height, float itemWidth, float itemHeight, float x, float y, IInventory inventory = null, bool addToUi = true) Parameters Type Name Description System.String id A unique identifier for the window. System.Single width The width of the window. System.Single height The height of the window. System.Single itemWidth The width which will be allocated for each inventory item. System.Single itemHeight The height which will be allocated for each inventory item. System.Single x The x coordinate for the inventory window. System.Single y The y coordinate for the inventory window. IInventory inventory The inventory that the window will show on screen (usually the player's inventory). System.Boolean addToUi If set to true add to the window to the GUI list of the game. Returns Type Description IInventoryWindow The inventory window."
  },
  "api/AGS.API.IInventoryComponent.html": {
    "href": "api/AGS.API.IInventoryComponent.html",
    "title": "Interface IInventoryComponent | MonoAGS Documentation",
    "keywords": "Interface IInventoryComponent This component allows an entity to carry inventory. Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IInventoryComponent : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source Inventory Gets or sets the inventory which is held by the entity. Declaration IInventory Inventory { get; set; } Property Value Type Description IInventory The inventory. See Also IComponent"
  },
  "api/AGS.API.IInventory.html": {
    "href": "api/AGS.API.IInventory.html",
    "title": "Interface IInventory | MonoAGS Documentation",
    "keywords": "Interface IInventory The character's inventory. Those are the items that the character holds in his/her (usually) imaginary bag. It is composed of a list of inventory items, and one active item that the character holds in his/her hand. Inherited Members System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IInventory : INotifyPropertyChanged Properties | Improve this Doc View Source ActiveItem Gets/sets the character's current active inventory item (for example the item that character currently holds in his/her hand). Setting it will update the mouse cursor if appropriate. To deselect the current inventory, set it to null. Declaration IInventoryItem ActiveItem { get; set; } Property Value Type Description IInventoryItem The active inventory item. Examples cEgo.ActiveInventory = iKey; //The character is now \"holding\" the key. private async void onDoorClicked() { if (cEgo.ActiveInventory == iKey) openDoor(); else await cEgo.SayAsync(\"I can't open the door without holding the key!\"); } | Improve this Doc View Source Items Gets the list of inventory items the character has. Declaration IAGSBindingList<IInventoryItem> Items { get; } Property Value Type Description IAGSBindingList < IInventoryItem > The inventory items. Examples Do I have the key? if (Items.Any(item => item == iKey)) await cEgo.SayAsync(\"I have the key!\"); else await cEgo.SayAsync(\"I don't have the key!\");"
  },
  "api/AGS.API.IInTree-1.html": {
    "href": "api/AGS.API.IInTree-1.html",
    "title": "Interface IInTree<TItem> | MonoAGS Documentation",
    "keywords": "Interface IInTree<TItem> A component which adds the ability for an entity to be a part of an entity's tree. Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IInTree<TItem> : IComponent, IDisposable, INotifyPropertyChanged where TItem : class, IInTree<TItem> Type Parameters Name Description TItem Properties | Improve this Doc View Source TreeNode Gets the tree node, which allows to compose various entity together in a tree-like hierarchy. Declaration ITreeNode<TItem> TreeNode { get; } Property Value Type Description ITreeNode <TItem> The tree node. See Also IComponent"
  },
  "api/AGS.API.IInteractions.html": {
    "href": "api/AGS.API.IInteractions.html",
    "title": "Interface IInteractions | MonoAGS Documentation",
    "keywords": "Interface IInteractions Allows subscribing interaction events (to define what happens when an object is looked at/interacted with/etc). Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IInteractions Methods | Improve this Doc View Source OnInteract(String) The event for when interacting with an object. The available verbs depend on your control scheme. For example, you might have a separate icon for talk in your game which is different from the interact icon. There's also a \"Default\" event which will be used if no specific event was subscribed to. There's a chain of default behaviors that can be defined to allow for generic responses. The event handler lookup is as follows: Object's verb Object's default verb IGame.Events.DefaultInteractions verb IGame.Events.DefaultInteractions default verb Declaration IEvent<ObjectEventArgs> OnInteract(string verb) Parameters Type Name Description System.String verb Returns Type Description IEvent < ObjectEventArgs > The interaction event. Examples public void SubscribeEvents() { game.Events.DefaultInteractions.OnInteract(\"Talk\").Subscribe(onDefaultTalk); oTeapot.Interactions.OnInteract(AGSInteractions.Look).Subscribe(onTeapotLook); oTeapot.Interactions.OnInteract(AGSInteractions.Interact).SubscribeToAsync(onTeapotInteract); oTeapot.Interactions.OnInteract(\"Throw\").Subscribe(onTeapotThrow); oTeapot.Interactions.OnInteract(AGSInteractions.Default).Subscribe(onTeapotDefault); } private async void onDefaultTalk(ObjectEventArgs args) { await cEgo.SayAsync(string.Format(\"{0}? No, I don't think it's going to talk back.\", args.Object.Hotspot)); } private async void onTeapotLook(ObjectEventArgs args) { await cEgo.SayAsync(\"What a lovely looking teapot!\"); } private async Task onTeapotInteract(ObjectEventArgs args) { await cEgo.SayAsync(\"I'm going to pour some tea now.\"); oTeapot.StartAnimation(aPourTea); } private async void onTeapotThrow(ObjectEventArgs args) { await cEgo.SayAsync(\"No way, I'm not throwing the teapot.\"); } private async void onTeapotDefault(ObjectEventArgs args) { await cEgo.SayAsync(\"I'm not doing anything like that to the teapot.\"); } | Improve this Doc View Source OnInventoryInteract(String) The event for when using an inventory item on an object. The available verbs depend on your control scheme. For example, you might have a separate icon for give item in your game which is different from the interact icon. There's also a \"Default\" event which will be used if no specific event was subscribed to. There's a chain of default behaviors that can be defined to allow for generic responses. The event handler lookup is as follows: Object's verb Object's default verb IGame.Events.DefaultInteractions verb IGame.Events.DefaultInteractions default verb Declaration IEvent<InventoryInteractEventArgs> OnInventoryInteract(string verb) Parameters Type Name Description System.String verb Returns Type Description IEvent < InventoryInteractEventArgs > The inventory interaction event. Examples public void SubscribeEvents() { oTeapot.Interactions.OnInventoryInteract(AGSInteractions.Interact).Subscribe(onTeapotInventoryInteract); game.Events.DefaultInteractions.OnInventoryInteract(AGSInteractions.Interact).Subscribe(onDefaultInventoryInteract); } private async void onTeapotInventoryInteract(InventoryInteractEventArgs args) { if (args.Item == iCup) { await cEgo.SayAsync(\"Ok, I'm going to pour tea in the cup\"); oTeapot.StartAnimation(aPourTea); cEgo.Inventory.Items.Remove(iCup); cEgo.Inventory.Items.Add(iFullCup); } else if (args.Item == iFullCup) { await cEgo.SayAsync(\"The cup is already full.\"); } else { await cEgo.SayAsync(\"This is not what you'd usually use on a teapot...\"); } } private async void onDefaultInventoryInteract(InventoryInteractEventArgs args) { await cEgo.SayAsync(string.Format(\"Using {0} on {1}? No, I don't think so.\", args.Item.Graphics.Hotspot, args.Object.Hotspot)); }"
  },
  "api/AGS.API.IInputEvents.html": {
    "href": "api/AGS.API.IInputEvents.html",
    "title": "Interface IInputEvents | MonoAGS Documentation",
    "keywords": "Interface IInputEvents A collection of input events. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IInputEvents Properties | Improve this Doc View Source KeyDown An event which is triggered when the user presses down one of the keys on the keyboard. The event argumens specify which key was pressed. Declaration IEvent<KeyboardEventArgs> KeyDown { get; } Property Value Type Description IEvent < KeyboardEventArgs > The event. | Improve this Doc View Source KeyUp An event which is triggered when the user releases one of the keys on the keyboard (which was previously released). The event arguments specify which key was released. Declaration IEvent<KeyboardEventArgs> KeyUp { get; } Property Value Type Description IEvent < KeyboardEventArgs > The event. | Improve this Doc View Source MouseDown An event which is triggered when the user presses down one of the mouse buttons. The event arguments specify which mouse button was pressed and where on the screen. Declaration IEvent<MouseButtonEventArgs> MouseDown { get; } Property Value Type Description IEvent < MouseButtonEventArgs > The event. | Improve this Doc View Source MouseMove An event which is triggered every time the user moves the mouse. The event arguments specify the location that the mouse moved to. Declaration IEvent<MousePositionEventArgs> MouseMove { get; } Property Value Type Description IEvent < MousePositionEventArgs > The event. | Improve this Doc View Source MouseUp An event which is triggered when the user releases one of the mouse buttons (which was previously pressed). The event arguments specify which mouse button was released and where on the screen. Declaration IEvent<MouseButtonEventArgs> MouseUp { get; } Property Value Type Description IEvent < MouseButtonEventArgs > The event."
  },
  "api/AGS.API.IInput.html": {
    "href": "api/AGS.API.IInput.html",
    "title": "Interface IInput | MonoAGS Documentation",
    "keywords": "Interface IInput The entry point for getting input from the user (keyboard/mouse/touch). Inherited Members IInputEvents.MouseDown IInputEvents.MouseUp IInputEvents.MouseMove IInputEvents.KeyDown IInputEvents.KeyUp Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IInput : IInputEvents Properties | Improve this Doc View Source IsTouchDrag Is the user currently touching and dragging (for touch screens)? Declaration bool IsTouchDrag { get; } Property Value Type Description System.Boolean true if is touch drag; otherwise, false . | Improve this Doc View Source LeftMouseButtonDown Is the left mouse button currently pressed down? Declaration bool LeftMouseButtonDown { get; } Property Value Type Description System.Boolean true if left mouse button down; otherwise, false . | Improve this Doc View Source MousePosition Gets the mouse position in the room's co-ordinates (based on the game's virtual resolution), after adjusting for the viewport. Declaration MousePosition MousePosition { get; } Property Value Type Description MousePosition The mouse position. | Improve this Doc View Source RightMouseButtonDown Is the right mouse button currently pressed down? Declaration bool RightMouseButtonDown { get; } Property Value Type Description System.Boolean true if right mouse button down; otherwise, false . Methods | Improve this Doc View Source IsKeyDown(Key) Is the specified key on the keyboard currently pressed down? Declaration bool IsKeyDown(Key key) Parameters Type Name Description Key key Key. Returns Type Description System.Boolean true , if key down was ised, false otherwise."
  },
  "api/AGS.API.IHasImage.html": {
    "href": "api/AGS.API.IHasImage.html",
    "title": "Interface IHasImage | MonoAGS Documentation",
    "keywords": "Interface IHasImage A container for an image. Inherited Members System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IHasImage : INotifyPropertyChanged Properties | Improve this Doc View Source Brightness Gets or sets the brightness of the object. This is an additional modifier to the tint ( Tint ), which allows you to reach brighter colors than the original image. The brightness has 4 components to allow modifying each of the 4 RGBA components of the original color. By default it's (1,1,1,1), meaning no changes to the original image. To make the object twice as bright, set Brightness = new Vector4(2,2,2,2), or simply: new Vector4(2). Declaration Vector4 Brightness { get; set; } Property Value Type Description Vector4 The brightness. | Improve this Doc View Source Image Gets or sets the image. Declaration IImage Image { get; set; } Property Value Type Description IImage The image. | Improve this Doc View Source Opacity Gets or sets the opacity of the object. 0 for fully transparent, 255 for fully opaque. Declaration byte Opacity { get; set; } Property Value Type Description System.Byte The opacity. | Improve this Doc View Source Pivot Gets or sets the pivot point from which the position, scale and rotation are determined. For example, rotating an image from its center point will rotate it in place, while rotating it from its bottom-left point will rotate the entire image around the bottom-left. It might help to think of the pivot as the point on an image on which you place your finger on before rotating. The units of the pivot point is in relation to the image size, where (0f,0f) is the bottom-left corner, and (1f,1f) is the top-right corner. The default is (0.5f, 0f), which means the bottom-center point of the image. Declaration PointF Pivot { get; set; } Property Value Type Description PointF The pivot. Examples image.Pivot = new PointF(0.5f, 0.5f); //placing the pivot point in the middle of the image | Improve this Doc View Source Tint Gets or sets the tinting color for the object. cHero.Tint = Colors.Red; //will give our here a red tint. Declaration Color Tint { get; set; } Property Value Type Description Color The tint. See Also IComponent"
  },
  "api/AGS.API.IHasCursorComponent.html": {
    "href": "api/AGS.API.IHasCursorComponent.html",
    "title": "Interface IHasCursorComponent | MonoAGS Documentation",
    "keywords": "Interface IHasCursorComponent Allows setting a special cursor that will be shown when the mouse is hovering the entity. This can be useful for having special \"Exit\" cursors for doors (for example). Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IHasCursorComponent : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source SpecialCursor Gets or sets the special cursor the will be shown on hover. Declaration IObject SpecialCursor { get; set; } Property Value Type Description IObject The special cursor."
  },
  "api/AGS.API.IGraphicsFactory.html": {
    "href": "api/AGS.API.IGraphicsFactory.html",
    "title": "Interface IGraphicsFactory | MonoAGS Documentation",
    "keywords": "Interface IGraphicsFactory Factory to allow loading graphics (images/animations). Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IGraphicsFactory Properties | Improve this Doc View Source Borders Factory for creating borders. Declaration IBorderFactory Borders { get; } Property Value Type Description IBorderFactory The borders. | Improve this Doc View Source Brushes Factory for creating brushes. Declaration IBrushLoader Brushes { get; } Property Value Type Description IBrushLoader The brushes. | Improve this Doc View Source Icons Factory for creating icons. Declaration IIconFactory Icons { get; } Property Value Type Description IIconFactory The icons. Methods | Improve this Doc View Source GetBitmap(Int32, Int32) Creates an empty bitmap with the specified width and height (in pixels). Declaration IBitmap GetBitmap(int width, int height) Parameters Type Name Description System.Int32 width Width. System.Int32 height Height. Returns Type Description IBitmap The bitmap. | Improve this Doc View Source GetSprite() Creates a new sprite Declaration ISprite GetSprite() Returns Type Description ISprite The sprite. | Improve this Doc View Source LoadAnimationFromFiles(IAnimationConfiguration, ILoadImageConfig, String[]) Loads an animation from a list of resource/file paths ( IResourceLoader ). The order of the files/resources will decide the order of the animation. Declaration IAnimation LoadAnimationFromFiles(IAnimationConfiguration animationConfig = null, ILoadImageConfig loadConfig = null, params string[] files) Parameters Type Name Description IAnimationConfiguration animationConfig Animation configuration. ILoadImageConfig loadConfig Configuration for how to load the images. System.String [] files A list of resource/file paths. Returns Type Description IAnimation The animation. | Improve this Doc View Source LoadAnimationFromFilesAsync(IAnimationConfiguration, ILoadImageConfig, String[]) Loads an animation asynchronously from a list of resource/file paths ( IResourceLoader ). The order of the files/resources will decide the order of the animation. Declaration Task<IAnimation> LoadAnimationFromFilesAsync(IAnimationConfiguration animationConfig = null, ILoadImageConfig loadConfig = null, params string[] files) Parameters Type Name Description IAnimationConfiguration animationConfig Animation configuration. ILoadImageConfig loadConfig Configuration for how to load the images. System.String [] files A list of resource/file paths. Returns Type Description System.Threading.Tasks.Task < IAnimation > The animation. | Improve this Doc View Source LoadAnimationFromFolder(String, IAnimationConfiguration, ILoadImageConfig) Loads an animation from a resource/file folder ( IResourceLoader ). The files/resources will be loaded in an alphabetical order which will determine the order of the animation. So if you list your files in the folder, for example: walk1.png, walk2.png, walk3.png, the animation will be ordered accordingly. Declaration IAnimation LoadAnimationFromFolder(string folderPath, IAnimationConfiguration animationConfig = null, ILoadImageConfig loadConfig = null) Parameters Type Name Description System.String folderPath The resource/file folder path. IAnimationConfiguration animationConfig Animation configuration. ILoadImageConfig loadConfig Configuration for how to load the images. Returns Type Description IAnimation The animation. | Improve this Doc View Source LoadAnimationFromFolderAsync(String, IAnimationConfiguration, ILoadImageConfig) Loads an animation asynchronously from a resource/file folder ( IResourceLoader ). The files/resources will be loaded in an alphabetical order which will determine the order of the animation. So if you list your files in the folder, for example: walk1.png, walk2.png, walk3.png, the animation will be ordered accordingly. Declaration Task<IAnimation> LoadAnimationFromFolderAsync(string folderPath, IAnimationConfiguration animationConfig = null, ILoadImageConfig loadConfig = null) Parameters Type Name Description System.String folderPath The resource/file folder path. IAnimationConfiguration animationConfig Animation configuration. ILoadImageConfig loadConfig Configuration for how to load the images. Returns Type Description System.Threading.Tasks.Task < IAnimation > The animation. | Improve this Doc View Source LoadAnimationFromSpriteSheet(ISpriteSheet, IAnimationConfiguration, ILoadImageConfig) Loads an animation from a sprite sheet. Declaration IAnimation LoadAnimationFromSpriteSheet(ISpriteSheet spriteSheet, IAnimationConfiguration animationConfig = null, ILoadImageConfig loadConfig = null) Parameters Type Name Description ISpriteSheet spriteSheet Sprite sheet. IAnimationConfiguration animationConfig Animation configuration. ILoadImageConfig loadConfig Configuration for how to load the images. Returns Type Description IAnimation The animation. | Improve this Doc View Source LoadAnimationFromSpriteSheetAsync(ISpriteSheet, IAnimationConfiguration, ILoadImageConfig) Loads an animation asynchronously from a sprite sheet. Declaration Task<IAnimation> LoadAnimationFromSpriteSheetAsync(ISpriteSheet spriteSheet, IAnimationConfiguration animationConfig = null, ILoadImageConfig loadConfig = null) Parameters Type Name Description ISpriteSheet spriteSheet Sprite sheet. IAnimationConfiguration animationConfig Animation configuration. ILoadImageConfig loadConfig Configuration for how to load the images. Returns Type Description System.Threading.Tasks.Task < IAnimation > The animation. | Improve this Doc View Source LoadBitmap(String) Loads a raw bitmap from a resource/file path ( IResourceLoader ). Declaration IBitmap LoadBitmap(string filePath) Parameters Type Name Description System.String filePath File/resource path. Returns Type Description IBitmap The bitmap. | Improve this Doc View Source LoadBitmapAsync(String) Loads a raw bitmap asynchronously from a resource/file path ( IResourceLoader ). Declaration Task<IBitmap> LoadBitmapAsync(string filePath) Parameters Type Name Description System.String filePath File/resource path. Returns Type Description System.Threading.Tasks.Task < IBitmap > The bitmap. | Improve this Doc View Source LoadDirectionalAnimationFromFolders(String, String, String, String, String, IAnimationConfiguration, ILoadImageConfig) Loads a directional animation from file/resource folders ( IResourceLoader . Declaration IDirectionalAnimation LoadDirectionalAnimationFromFolders(string baseFolder, string leftFolder = null, string rightFolder = null, string downFolder = null, string upFolder = null, IAnimationConfiguration animationConfig = null, ILoadImageConfig loadConfig = null) Parameters Type Name Description System.String baseFolder A base folder, from which all other folders will be relative to. System.String leftFolder Left animation folder (null to not have a left animation). System.String rightFolder Right animation folder (null to not have a right animation). System.String downFolder Down animation folder (null to not have a down animation). System.String upFolder Up animation folder (null to not have an up animation). IAnimationConfiguration animationConfig Animation configuration (will be applied to all directions). ILoadImageConfig loadConfig Configuration for loading the images (will be applied to all loaded images). Returns Type Description IDirectionalAnimation The directional animation. | Improve this Doc View Source LoadDirectionalAnimationFromFoldersAsync(String, String, String, String, String, IAnimationConfiguration, ILoadImageConfig) Loads a directional animation asynchronously from file/resource folders ( IResourceLoader . Declaration Task<IDirectionalAnimation> LoadDirectionalAnimationFromFoldersAsync(string baseFolder, string leftFolder = null, string rightFolder = null, string downFolder = null, string upFolder = null, IAnimationConfiguration animationConfig = null, ILoadImageConfig loadConfig = null) Parameters Type Name Description System.String baseFolder A base folder, from which all other folders will be relative to. System.String leftFolder Left animation folder (null to not have a left animation). System.String rightFolder Right animation folder (null to not have a right animation). System.String downFolder Down animation folder (null to not have a down animation). System.String upFolder Up animation folder (null to not have an up animation). IAnimationConfiguration animationConfig Animation configuration (will be applied to all directions). ILoadImageConfig loadConfig Configuration for loading the images (will be applied to all loaded images). Returns Type Description System.Threading.Tasks.Task < IDirectionalAnimation > The directional animation. | Improve this Doc View Source LoadImage(IBitmap, ILoadImageConfig, String) Loads an image from a bitmap. Declaration IImage LoadImage(IBitmap bitmap, ILoadImageConfig loadConfig = null, string id = null) Parameters Type Name Description IBitmap bitmap The bitmap. ILoadImageConfig loadConfig Configuration on how to load the image. System.String id An optional unique id for the image (if not given, the engine will generate one automatically). Returns Type Description IImage The image. | Improve this Doc View Source LoadImage(String, ILoadImageConfig) Loads an image from a resource/file path ( IResourceLoader ). Declaration IImage LoadImage(string filePath, ILoadImageConfig loadConfig = null) Parameters Type Name Description System.String filePath File/resource path. ILoadImageConfig loadConfig Configuration on how to load the image. Returns Type Description IImage The image. | Improve this Doc View Source LoadImageAsync(String, ILoadImageConfig) Loads an image asynchronously from a resource/file path ( IResourceLoader ). Declaration Task<IImage> LoadImageAsync(string filePath, ILoadImageConfig loadConfig = null) Parameters Type Name Description System.String filePath File/resource path. ILoadImageConfig loadConfig Configuration on how to load the image. Returns Type Description System.Threading.Tasks.Task < IImage > The image. | Improve this Doc View Source LoadSprite(IBitmap, ILoadImageConfig, String) Loads a sprite from a bitmap. Declaration ISprite LoadSprite(IBitmap bitmap, ILoadImageConfig loadConfig = null, string id = null) Parameters Type Name Description IBitmap bitmap The bitmap. ILoadImageConfig loadConfig Configuration on how to load the image. System.String id An optional unique id for the image (if not given, the engine will generate one automatically). Returns Type Description ISprite The image. | Improve this Doc View Source LoadSprite(String, ILoadImageConfig) Loads a sprite from a resource/file path ( IResourceLoader ). Declaration ISprite LoadSprite(string path, ILoadImageConfig loadConfig = null) Parameters Type Name Description System.String path File/resource path. ILoadImageConfig loadConfig Configuration on how to load the image. Returns Type Description ISprite The sprite. | Improve this Doc View Source LoadSpriteAsync(String, ILoadImageConfig) Loads a sprite asynchronously from a resource/file path ( IResourceLoader ). Declaration Task<ISprite> LoadSpriteAsync(string path, ILoadImageConfig loadConfig = null) Parameters Type Name Description System.String path File/resource path. ILoadImageConfig loadConfig Configuration on how to load the image. Returns Type Description System.Threading.Tasks.Task < ISprite > The sprite."
  },
  "api/AGS.API.IGameState.html": {
    "href": "api/AGS.API.IGameState.html",
    "title": "Interface IGameState | MonoAGS Documentation",
    "keywords": "Interface IGameState The game state. This is the entry point for all \"changing\" things in the game. Inherited Members IRoomProvider.Room Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IGameState : IRoomProvider Properties | Improve this Doc View Source Cursor Gets or sets the mouse cursor. Declaration IObject Cursor { get; set; } Property Value Type Description IObject The mouse cursor. | Improve this Doc View Source Cutscene Controls the cutscenes. Declaration ICutscene Cutscene { get; } Property Value Type Description ICutscene The cutscene. | Improve this Doc View Source DuringRoomTransition Gets a value indicating whether there is an on-going room transition. Declaration bool DuringRoomTransition { get; } Property Value Type Description System.Boolean true if during room transition; otherwise, false . | Improve this Doc View Source FocusedUI Gets the UI controls which are currently getting focus (for example if a yes/no dialog pops up, it's focused and \"takes\" away the input from the game. If a text box is currently in use, it's focused and \"takes\" away keyboard input from the game. Declaration IFocusedUI FocusedUI { get; } Property Value Type Description IFocusedUI The focused user interface. | Improve this Doc View Source GlobalVariables Custom properties that you can use for the entire game, to set custom behaviors. For example, you can add a \"Score\" variable here, to keep the game score. Declaration ICustomProperties GlobalVariables { get; } Property Value Type Description ICustomProperties The global variables. | Improve this Doc View Source Paused Pause or resume the game. If the game is paused the state of the game will not update. Declaration bool Paused { get; set; } Property Value Type Description System.Boolean true if paused; otherwise, false . | Improve this Doc View Source Player The player character. Declaration ICharacter Player { get; set; } Property Value Type Description ICharacter The player. | Improve this Doc View Source Rooms All of the rooms in the game. Declaration IAGSBindingList<IRoom> Rooms { get; } Property Value Type Description IAGSBindingList < IRoom > The rooms. | Improve this Doc View Source RoomTransitions Controls the room transitions (animation effects when moving between rooms). Declaration IRoomTransitions RoomTransitions { get; } Property Value Type Description IRoomTransitions The room transitions. | Improve this Doc View Source SecondaryViewports Allows adding multiple viewports to the game (so you can have split-screen functionality, for example, or having a TV in one room showing things happenning in another room). Declaration IAGSBindingList<IViewport> SecondaryViewports { get; } Property Value Type Description IAGSBindingList < IViewport > The secondary viewports. | Improve this Doc View Source Speed The speed of the game's updates. This is listed in percentage from 60 FPS. By default, this is 100, so 100% of 60 FPS which is 60 FPS. For 30 FPS, put 50 as your speed. Note that this is the target FPS, the target which the engine will attempt to accomplish, there is no guarantee that it will actually succeed, though (that depends on the hardware and on how much resource-heavy is your game. Declaration int Speed { get; set; } Property Value Type Description System.Int32 The speed. | Improve this Doc View Source UI All of the non-room objects in the game. Those are usually GUIs which stay on the screen even if you switch between rooms (like the top bar, a hotspot label, inventory window, menus, etc). Declaration IConcurrentHashSet<IObject> UI { get; } Property Value Type Description IConcurrentHashSet < IObject > The user interface. | Improve this Doc View Source Viewport The viewport decides what part of the room is actually seen on screen, and also where it's projected on the screen.. Declaration IViewport Viewport { get; } Property Value Type Description IViewport The viewport. Methods | Improve this Doc View Source All<TEntity>() Returns all entities of the specified type. Declaration IEnumerable<TEntity> All<TEntity>() where TEntity : class, IEntity Returns Type Description System.Collections.Generic.IEnumerable <TEntity> All entities of the specified type. Type Parameters Name Description TEntity The entity type. | Improve this Doc View Source ChangeRoomAsync(IRoom, Action) Changes the game's room to a new room. This will trigger the room transition, and then switch the camera to render the new room. Declaration Task ChangeRoomAsync(IRoom newRoom, Action afterTransitionFadeOut = null) Parameters Type Name Description IRoom newRoom New room. System.Action afterTransitionFadeOut A possible callback which triggers after the fade out of the old room, but before the fade in of the new room. Returns Type Description System.Threading.Tasks.Task A task that can be awaited for the room switch to complete. | Improve this Doc View Source Clean() Disposes resources for all current rooms and objects. This is called by the engine when loading a new game. Declaration void Clean() | Improve this Doc View Source CopyFrom(IGameState) Overrides this state from another state. This is called by the engine when loading a new game. Declaration void CopyFrom(IGameState state) Parameters Type Name Description IGameState state State. | Improve this Doc View Source Find<TEntity>(String) Find the entity with the specified id and type. Declaration TEntity Find<TEntity>(string id) where TEntity : class, IEntity Parameters Type Name Description System.String id The entity's unique identifier. Returns Type Description TEntity The entity if found, null if no entity exists with that id. Type Parameters Name Description TEntity The entity's type. | Improve this Doc View Source GetSortedViewports() Gets the viewports sorted (in ascending order) by their Z index. Declaration List<IViewport> GetSortedViewports() Returns Type Description System.Collections.Generic.List < IViewport > The sorted viewports."
  },
  "api/AGS.API.IGameStarter.html": {
    "href": "api/AGS.API.IGameStarter.html",
    "title": "Interface IGameStarter | MonoAGS Documentation",
    "keywords": "Interface IGameStarter The game starter interface is the interface that a game project should implement so that it can be loaded by the editor. When loading a game from the editor, the editor searches for an implementation of this interface in the game, and calls the \"StartGame\" method with the game it created so that the editor and the game will have a shared interface to the game. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IGameStarter Examples An implementation of the game starter interface will look like this in its most basic form: public class MyGameStarter : IGameStarter { IGameSettings Settings => new AGSGameSettings(\"My Game\", new Size(1280, 800)); public void StartGame(IGame game) { game.Events.OnLoad.Subscribe(onGameLoaded); //Here is where you create all of the rooms, characters, etc in the game. } } Properties | Improve this Doc View Source Settings Gets the settings for the game. Declaration IGameSettings Settings { get; } Property Value Type Description IGameSettings The settings. Methods | Improve this Doc View Source StartGame(IGame) Creates the game. Declaration void StartGame(IGame game) Parameters Type Name Description IGame game"
  },
  "api/AGS.API.IGameSettings.html": {
    "href": "api/AGS.API.IGameSettings.html",
    "title": "Interface IGameSettings | MonoAGS Documentation",
    "keywords": "Interface IGameSettings Game settings (those can be set only once). Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IGameSettings Properties | Improve this Doc View Source Backend The graphics backend that renders the game. Declaration GraphicsBackend Backend { get; } Property Value Type Description GraphicsBackend The backend. | Improve this Doc View Source Defaults The settings for various defaults. Declaration IDefaultsSettings Defaults { get; } Property Value Type Description IDefaultsSettings The defaults. | Improve this Doc View Source PreserveAspectRatio If the game is configured to preserve the aspect ratio, then in case the window is resized and the aspect ratio is changed, the screen will be letterboxed or pillarboxed so the aspect ratio for the actual content will remain the same (preserve aspect ratio is on by default). Declaration bool PreserveAspectRatio { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Title Gets the title (the name of the game): would appear on the game window's title bar. Declaration string Title { get; } Property Value Type Description System.String The title. | Improve this Doc View Source VirtualResolution Gets the virtual resolution of the game. This is the resolution in which you write your co-ordinates and sizes, and those will be scaled appropriately to match the actual screen size. For example: let's say your virtual resolution is (320,200) and you have an object with width = 20, draw with bottom left (x,y) = (100,50). If the actual screen size is currently (640,400) that would render the object at actual screen (x,y) = (200,100) and the object will be scaled x2 to have width = 40. Note: you can override this resolution for specific layers, so you can have (as an example) hi-res UI in a low-res game. Declaration Size VirtualResolution { get; } Property Value Type Description Size The virtual resolution. | Improve this Doc View Source Vsync Gets the vsync mode (synchronization of the frame update rate with screen refresh rate to prevent tearing). To read about how this works: https://hardforum.com/threads/how-vsync-works-and-why-people-loathe-it.928593/ Declaration VsyncMode Vsync { get; } Property Value Type Description VsyncMode The vsync. | Improve this Doc View Source WindowBorder Gets the style of the window's border. Declaration WindowBorder WindowBorder { get; } Property Value Type Description WindowBorder The window border. | Improve this Doc View Source WindowSize Gets the size of the window (the size of the actual window on screen). Declaration Size WindowSize { get; } Property Value Type Description Size The size of the window. | Improve this Doc View Source WindowState Gets the state of the window (minimized/maximized/etc). Declaration WindowState WindowState { get; } Property Value Type Description WindowState The state of the window."
  },
  "api/AGS.API.IGameLoop.html": {
    "href": "api/AGS.API.IGameLoop.html",
    "title": "Interface IGameLoop | MonoAGS Documentation",
    "keywords": "Interface IGameLoop The game loop, which updates the game state on every tick. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IGameLoop Methods | Improve this Doc View Source Update(Boolean) Updates the state (this trigger animation moves, walking, etc). This is called repeatedly by the engine, and usually should not be used by the user. Declaration void Update(bool resetCamera) Parameters Type Name Description System.Boolean resetCamera Should the camera be reset to its starting position?"
  },
  "api/AGS.API.IGameFactory.html": {
    "href": "api/AGS.API.IGameFactory.html",
    "title": "Interface IGameFactory | MonoAGS Documentation",
    "keywords": "Interface IGameFactory The game factory. This factory contains all of the other factories. Factories are used to offer convience methods for creating game objects. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IGameFactory Properties | Improve this Doc View Source Dialog Gets the dialog factory (for creating dialogs and dialog options). Declaration IDialogFactory Dialog { get; } Property Value Type Description IDialogFactory The dialog factory. | Improve this Doc View Source Fonts Gets the fonts factory (for loading fonts). Declaration IFontFactory Fonts { get; } Property Value Type Description IFontFactory The fonts factory. | Improve this Doc View Source Graphics Gets the graphics factory (for loading images/animations). Declaration IGraphicsFactory Graphics { get; } Property Value Type Description IGraphicsFactory The graphics factory. | Improve this Doc View Source Inventory Gets the inventory factory (for creating the inventory window and inventory items). Declaration IInventoryFactory Inventory { get; } Property Value Type Description IInventoryFactory The inventory factory. | Improve this Doc View Source Masks Gets the masks factory (for loading masks from bitmaps). Declaration IMaskLoader Masks { get; } Property Value Type Description IMaskLoader The masks. | Improve this Doc View Source Object Gets the object factory (for creating objects and characters). Declaration IObjectFactory Object { get; } Property Value Type Description IObjectFactory The object factory. | Improve this Doc View Source Outfit Gets the outfit factory (for creating animation outfits for characters). Declaration IOutfitFactory Outfit { get; } Property Value Type Description IOutfitFactory The outfit. | Improve this Doc View Source Resources Gets the resources factory (for loading resources). Declaration IResourceLoader Resources { get; } Property Value Type Description IResourceLoader The resources. | Improve this Doc View Source Room Gets the room factory (for creating the rooms and their edges) Declaration IRoomFactory Room { get; } Property Value Type Description IRoomFactory The room factory. | Improve this Doc View Source Shaders Gets the shaders factory (for loading graphics hardware rendering shaders). Declaration IShaderFactory Shaders { get; } Property Value Type Description IShaderFactory The shaders. | Improve this Doc View Source Sound Gets the audio factory (for loading sounds). Declaration IAudioFactory Sound { get; } Property Value Type Description IAudioFactory The sound factory. | Improve this Doc View Source UI Gets the UI factory (for creating UI controls like buttons, checkboxes, etc). Declaration IUIFactory UI { get; } Property Value Type Description IUIFactory The user interface factory."
  },
  "api/AGS.API.IFollowComponent.html": {
    "href": "api/AGS.API.IFollowComponent.html",
    "title": "Interface IFollowComponent | MonoAGS Documentation",
    "keywords": "Interface IFollowComponent This component adds the ability for a character to follow another entity (i.e to keep walking to where the entity is. The follow settings can be configured to set how aggressive that follow is). Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax [RequiredComponent(typeof(IWalkComponent), true)] [RequiredComponent(typeof(IHasRoomComponent), true)] [RequiredComponent(typeof(ITranslateComponent), true)] public interface IFollowComponent : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source TargetBeingFollowed Gets the target that is currently being followed (or null if not currently following anybody). Declaration IObject TargetBeingFollowed { get; } Property Value Type Description IObject The target being followed. Methods | Improve this Doc View Source Follow(IObject, IFollowSettings) Starts following the specified object throughout the game. The character will walk to where the object is at, where the follow settings can be configured to say how aggressively to follow, and to what distance from the target. Calling Follow with another object will stop following the current object and start following the new object. To stop following altogether, call the Follow again with null as the target object. Note however, that the character will not stop its current walk. If you want to also stop the current walk, you should use StopFollowingAsync() . Declaration void Follow(IObject obj, IFollowSettings settings = null) Parameters Type Name Description IObject obj Object. IFollowSettings settings Settings. | Improve this Doc View Source StopFollowingAsync() Stops following the current target (and also stops the current walk). Declaration Task StopFollowingAsync() Returns Type Description System.Threading.Tasks.Task The following async."
  },
  "api/AGS.API.AGSListChangedEventArgs-1.html": {
    "href": "api/AGS.API.AGSListChangedEventArgs-1.html",
    "title": "Class AGSListChangedEventArgs<TItem> | MonoAGS Documentation",
    "keywords": "Class AGSListChangedEventArgs<TItem> Event arguments for a list change. Inheritance System.Object AGSListChangedEventArgs<TItem> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AGS.API Assembly : AGS.API.dll Syntax public class AGSListChangedEventArgs<TItem> Type Parameters Name Description TItem Constructors | Improve this Doc View Source AGSListChangedEventArgs(ListChangeType, AGSListItem<TItem>) Initializes a new instance of the AGSListChangedEventArgs<TItem> class. Declaration public AGSListChangedEventArgs(ListChangeType changeType, AGSListItem<TItem> item) Parameters Type Name Description ListChangeType changeType Change type. AGSListItem <TItem> item Item. | Improve this Doc View Source AGSListChangedEventArgs(ListChangeType, IEnumerable<AGSListItem<TItem>>) Initializes a new instance of the AGSListChangedEventArgs<TItem> class. Declaration public AGSListChangedEventArgs(ListChangeType changeType, IEnumerable<AGSListItem<TItem>> items) Parameters Type Name Description ListChangeType changeType Change type. System.Collections.Generic.IEnumerable < AGSListItem <TItem>> items Items. Properties | Improve this Doc View Source ChangeType How was the list changed? Declaration public ListChangeType ChangeType { get; } Property Value Type Description ListChangeType The type of the change. | Improve this Doc View Source Items Gets the items which were involved in the change (either added or removed depending on ChangeType ). Declaration public IEnumerable<AGSListItem<TItem>> Items { get; } Property Value Type Description System.Collections.Generic.IEnumerable < AGSListItem <TItem>> The item."
  },
  "api/AGS.API.AGSCropInfo.html": {
    "href": "api/AGS.API.AGSCropInfo.html",
    "title": "Struct AGSCropInfo | MonoAGS Documentation",
    "keywords": "Struct AGSCropInfo Information about how to crop entities. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : AGS.API Assembly : AGS.API.dll Syntax public struct AGSCropInfo Constructors | Improve this Doc View Source AGSCropInfo(AGSBoundingBox, FourCorners<Vector2>, CropFrom) Initializes a new instance of the AGSCropInfo struct. Declaration public AGSCropInfo(AGSBoundingBox boundingBox, FourCorners<Vector2> textureBox, CropFrom cropFrom) Parameters Type Name Description AGSBoundingBox boundingBox Bounding box. FourCorners < Vector2 > textureBox Texture box. CropFrom cropFrom The direction the item was cropped from, if fully cropped. Properties | Improve this Doc View Source BoundingBox Gets the bounding box for rendering the texture in. Declaration public AGSBoundingBox BoundingBox { get; } Property Value Type Description AGSBoundingBox The bounding box. | Improve this Doc View Source CropFrom If the item was completely cropped, gets the direction the item was cropped from. Declaration public CropFrom CropFrom { get; } Property Value Type Description CropFrom The direction it was cropped from | Improve this Doc View Source TextureBox Gets the texture box ((0,0) - (1,1) is the entire texture, meaning will not be cropped). Declaration public FourCorners<Vector2> TextureBox { get; } Property Value Type Description FourCorners < Vector2 > The texture box."
  },
  "api/AGS.API.AGSBoundingBox.html": {
    "href": "api/AGS.API.AGSBoundingBox.html",
    "title": "Struct AGSBoundingBox | MonoAGS Documentation",
    "keywords": "Struct AGSBoundingBox A bounding box (a square that bounds something)- used for rendering and hit-tests. Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : AGS.API Assembly : AGS.API.dll Syntax public struct AGSBoundingBox Constructors | Improve this Doc View Source AGSBoundingBox(Vector2, Vector2, Vector2, Vector2) Initializes a new instance of the AGSBoundingBox struct. Declaration public AGSBoundingBox(Vector2 bottomLeft, Vector2 bottomRight, Vector2 topLeft, Vector2 topRight) Parameters Type Name Description Vector2 bottomLeft Bottom left. Vector2 bottomRight Bottom right. Vector2 topLeft Top left. Vector2 topRight Top right. | Improve this Doc View Source AGSBoundingBox(Vector3, Vector3, Vector3, Vector3) Initializes a new instance of the AGSBoundingBox struct. Declaration public AGSBoundingBox(Vector3 bottomLeft, Vector3 bottomRight, Vector3 topLeft, Vector3 topRight) Parameters Type Name Description Vector3 bottomLeft Bottom left. Vector3 bottomRight Bottom right. Vector3 topLeft Top left. Vector3 topRight Top right. | Improve this Doc View Source AGSBoundingBox(Single, Single, Single, Single) Declaration public AGSBoundingBox(float minX, float maxX, float minY, float maxY) Parameters Type Name Description System.Single minX System.Single maxX System.Single minY System.Single maxY Properties | Improve this Doc View Source BottomLeft Gets the bottom left point. Declaration public Vector3 BottomLeft { get; } Property Value Type Description Vector3 The bottom left point. | Improve this Doc View Source BottomRight Gets the bottom right point. Declaration public Vector3 BottomRight { get; } Property Value Type Description Vector3 The bottom right point. | Improve this Doc View Source Height Gets the height. Declaration public float Height { get; } Property Value Type Description System.Single The height. | Improve this Doc View Source IsValid Gets a value indicating whether this AGSBoundingBox is invalid (i.e max is not bigger than min). Declaration public bool IsValid { get; } Property Value Type Description System.Boolean true if is empty; otherwise, false . | Improve this Doc View Source MaxX Gets the maximum x of the square. Declaration public float MaxX { get; } Property Value Type Description System.Single The max x. | Improve this Doc View Source MaxY Gets the maximum y of the square. Declaration public float MaxY { get; } Property Value Type Description System.Single The max y. | Improve this Doc View Source MinX Gets the minimum x of the square. Declaration public float MinX { get; } Property Value Type Description System.Single The minimum x. | Improve this Doc View Source MinY Gets the minimum y of the square. Declaration public float MinY { get; } Property Value Type Description System.Single The minimum y. | Improve this Doc View Source TopLeft Gets the top left point. Declaration public Vector3 TopLeft { get; } Property Value Type Description Vector3 The top left point. | Improve this Doc View Source TopRight Gets the top right point. Declaration public Vector3 TopRight { get; } Property Value Type Description Vector3 The top right point. | Improve this Doc View Source Width Gets the width. Declaration public float Width { get; } Property Value Type Description System.Single The width. Methods | Improve this Doc View Source Contains(Vector2) Is the specified point contained in the square? Declaration public bool Contains(Vector2 point) Parameters Type Name Description Vector2 point Point. Returns Type Description System.Boolean True if the point is in the square, false otherwise. | Improve this Doc View Source Crop(BoundingBoxType, ICropSelfComponent, PointF) Create a cropped bounding box. Declaration public AGSCropInfo Crop(BoundingBoxType boundingBoxType, ICropSelfComponent crop, PointF adjustedScale) Parameters Type Name Description BoundingBoxType boundingBoxType The type of the bounding box to be cropped. ICropSelfComponent crop Crop. PointF adjustedScale Adjusted scale. Returns Type Description AGSCropInfo The crop info. | Improve this Doc View Source Equals(AGSBoundingBox) Declaration public bool Equals(AGSBoundingBox square) Parameters Type Name Description AGSBoundingBox square Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source FlipHorizontal() Create a new square which is flipped horizontally from the current square. Declaration public AGSBoundingBox FlipHorizontal() Returns Type Description AGSBoundingBox The new flipped square. | Improve this Doc View Source FlipVertical() Create a new square which is flipped vertically from the current square. Declaration public AGSBoundingBox FlipVertical() Returns Type Description AGSBoundingBox The new flipped square. | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source Multiply(Single, Single) Multiply the box limits with the specified factorX and factorY. Declaration public AGSBoundingBox Multiply(float factorX, float factorY) Parameters Type Name Description System.Single factorX Factor x. System.Single factorY Factor y. Returns Type Description AGSBoundingBox The new multiplied box. | Improve this Doc View Source SameSize(AGSBoundingBox) Is the given box the same size as this box? Declaration public bool SameSize(AGSBoundingBox box) Parameters Type Name Description AGSBoundingBox box Box. Returns Type Description System.Boolean true , if size is the same, false otherwise. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString()"
  },
  "api/AGS.API.html": {
    "href": "api/AGS.API.html",
    "title": "Namespace AGS.API | MonoAGS Documentation",
    "keywords": "Namespace AGS.API Classes AGSBoundingBoxes The bounding boxes used for the entity. AGSHashSetChangedEventArgs<TItem> Event arguments for a hash set change event. AGSListChangedEventArgs<TItem> Event arguments for a list change. AnimationCompletedEventArgs Event arguments for when an animation completes. BeforeSayEventArgs Event arguments which allows you to modify how/where the text is rendered and control how the speech is skipped (assuming you configure External in your ISayConfig ). ButtonAnimation Allows changing properties of the button to \"animate\" it as it moves between states (idle, hover, pushed). Each ButtonAnimation represents one of this states, and can have a different animation (or image), border, background color (tint) or text rendering configuration (font, shadows, etc- ITextConfig ). CheckBoxEventArgs Event arguments for a checkbox check change. Colors A list of colors to choose from. ConcreteImplementationAttribute This attribute can be assigned to concrete implementations of interfaces. This affects the inspector, when selecting implementations for interfaces (for example, when selecting a border you'd want to look of implmentations of IBorderStyle ). CustomStringValueAttribute An attribute to be placed on a method that will be used instead of ToString() to supply the string display value to the inspector. The method must accept no arguments and return a string. DisplayListEventArgs Event arguments for retrieiving (and possibly modifying) the display list before rendering it. FourCorners<TValue> Represents four values of \"something\" that matches four corners of a bounding box (for example, four colors for a gradient border). HasFactoryAttribute This attribute can be associated to an interface, to allow specifying factory methods that can be used to create a possible implementation. This is used by the inspector when selecting an implementation for an interface. For example, when selecting a border via IBorderStyle , it can refer you to various methods in IBorderFactory . InventoryCombinationEventArgs The event arguments for the inventory combination events. The arguments contain the two combined items. InventoryInteractEventArgs Event arguments for inventory interaction KeyboardEventArgs Event arguments for keyboard key press/release. ListboxItemArgs Event arguments for when a selected item changes in a listbox/combobox. ListboxItemChangingArgs Event arguments for when a selected item is in the process of changing (before actually being changed) in a listbox/combobox. The event gives the ability to cancel the selection by settings ShouldCancel to true. MathHelper Contains common mathematical functions and constants. MathUtils MethodParamAttribute An attribute to configure parameters for a method wizard ( MethodWizardAttribute ). MethodWizardAttribute An attribute to mark methods that can act as wizards in the editor (can show a window to let the user set the parameters for the method). MouseButtonEventArgs Mouse button down/up event arguments. MouseClickEventArgs Mouse click/double-click event arguments. MousePositionEventArgs Event arguments for mouse move to indicate the mouse's position. NamedColorsMap NodeEventArgs Event arguments which contain a tree node. NumberEditorSliderAttribute Allows controlling the \"suggested\" minimum and maximum values that will be assigned to a slider of a number editor in the inspector. NumberValueChangedArgs Event arguments for when the number editor's value changed. ObjectEventArgs Event arguments for interacting with an object. PropertyAttribute Allows attaching an attribute to a property which controls various aspects on how it will look when shown via the inspector. PropertyFolderAttribute Allows declaring a class as a folder of properties which can be expanded in the inspector. QueryLayoutEventArgs Event arguments used by ITreeTableLayout when querying the rows for the layout. Each row should set a new column size for each column with a size smaller than what the row needs. RequiredComponentAttribute A decorator for components, to hint that this component requires other components in order to function. For example, a walk component needs a translate (x,y,z) component to move x and y when the character moves. The walk component also needs an animation component to animate the walk. So a walk component will have a required component attribute with translate compnent, and another attribute with the animation component. SliderValueEventArgs Event arguments for slider value change. TextBoxKeyPressingEventArgs Event arguments for when a key is pressed on the textbox. TextboxState Represents the state in which the textbox is currently in. Structs AGSBoundingBox A bounding box (a square that bounds something)- used for rendering and hit-tests. AGSCropInfo Information about how to crop entities. AGSListItem<TItem> Represents an item in a list BeforeCropEventArgs Event arguments for the \"before crop\" event. ClaimEventToken This is a token that can be used when you want to claim an event, so that other subscribers which follow you on the subscriber list will not get that event. ClaimableCallback Color Represents a color. Matrix3 Represents a 3x3 matrix containing 3D rotation and scale. Matrix4 Represents a 4x4 matrix containing 3D rotation, scale, transform, and projection. ModelMatrices The model matrix is used for rendering and hit-testing the object. MousePosition Represents a mouse position on the screen. Allows to get the position in either window coordinates or viewport coordinates. Point Represents an integer point in 2D space. PointF Represents a float point in 2D space. Position A 3D location in the world. Quaternion Represents a Quaternion. Rectangle Represents a rectangle in 2D space. RectangleF Represents a rectangle in 2D space. ResourcePack A resource pack to be registered with the resource loader. It carries both the resource pack implementation, and a priority which used to decide which resource pack takes precedence in the resource loader (higher is better). ShaderVarsBuffer A buffer containing shader variables. Size Represents an integer size (width and height). SizeF Represents a float size (width and height). Vector2 Represents a 2D vector using two single-precision floating-point numbers. Vector3 Represents a 3D vector using three single-precision floating-point numbers. Vector4 Represents a 4D vector using four single-precision floating-point numbers. Interfaces IAGSBindingList<TItem> A binding list is a list which notifies on each list change IAnimation Represents an animation. This allows you to configure an animation, and also to query/control animation when it's running. IAnimationComponent An animation container. This gives access to the animation, and allows to start a new animation which will replace the old animation. IAnimationConfiguration Allows to configure various aspects of the animation. IAnimationFrame An animation frame (an animation is composed from a list of frames, which change all the time to make the object looks like it's animated). IAnimationState Control and query the animation current state. IApproachComponent Allows a character to approach a hotspot. When an interaction event is triggered for a hotspot, if this component is available for the player (which it is by default), then the character will approach the hotspot before the interaction logic code is triggered. IApproachStyle How to approach hotspots? Can be configured per verb. IArea Areas are specific regions in a room that provide additional behaviors that apply only within that region. IAreaComponent Areas are specific regions in a room that provide additional behaviors that apply only within that region. IAreaRestriction Adds the ability to restrict certain entities from being affected by the area. IAudioClip An audio clip that can be played multiple times during the game. The audio clip should be loaded from a file using IAudioFactory . You can then set its properties (volume, pitch, panning) which will be used for all sounds played from this clip. Note that an audio clip is the template for the sound, whereas ISound is the actual playing sound instance. IAudioFactory A factory to load audio clips from files. IAudioRule You can implement an audio rule and add it to AudioRules , to modify properties of playing sounds. It gets callbacks from the engines whenever a sound has played and completed, and can add a ISoundModifier to the sound ( SoundModifiers ) to modify its properties. Note: the audio rule is a conviency interface for interacting all the sounds in the system. You don't have to use it, though, there's nothing stopping you from adding sound modifiers to sounds outside this system. IAudioSettings Allows to set global audio settings IAudioSystem The entry point for interacting with the audio system. IBitmap A low level bitmap which can be manipulated. IBitmapLoader This interface allows creating bitmaps. IBitmapTextDraw This interface allows drawing text on a bitmap. IBlend IBlockingEvent Represents an event which can be subscribed and invoked synchronously. An event is a notification for something that has happened. Interested parties can subscribe to the event and be notified when it triggers ( https://en.wikipedia.org/wiki/Event-driven_programming ). IBlockingEvent<TEventArgs> Represents an event which can be subscribed and invoked synchronously. An event is a notification for something that has happened. Interested parties can subscribe to the event and be notified when it triggers ( https://en.wikipedia.org/wiki/Event-driven_programming ). IBorderComponent Allows drawing a border around the entity. IBorderFactory A factory for creating borders ( IBorderStyle ). IBorderStyle A border style will draw a border around an entity. It can draw both behind and in front of the entity. There are several borders that come built in: A solid color border (use SolidColor(Color, Single, Boolean) ): allows to set a color, line width and optional rounded corners. A gradient color border (use ): allows to set 4 colors for the 4 corners which will be interpolated across, a line width and optional rounded corners. A 9-slice image border (use AGSSlicedImageBorder): this allows you to use an image, slice it to 9 pieces, and spread it in various ways to create a border. The 9-slice image border is heavily inspired by the border image used by CSS, so you can look at an example in CSS, to see what can be done with a 9-slice image: https://css-tricks.com/almanac/properties/b/border-image/ You can also implement your own custom border style by implementing this interface, which can then be used for all objects. IBoundingBoxComponent A component that calculates the bounding box of the entity. This is for both the bounding box used to render the entity, and for collision checks. IBoundingBoxWithChildrenComponent Allows to query the size of the entity combined with all its children (i.e the size of the minimal bounding box that surrounds them all). IBrush A brush which can be used to draw. IBrushLoader Loads a brush IButton A pre-set entity with all of the UI control components, plus a button component and a text component. IButtonComponent A button component allows having the entity behave like a button. ICamera The camera is a script that is executed each game tick, and manipulates the viewport. The default camera tracks the target (usually the player) by slowly moving the viewport (in a smooth transition) so the target is at the center, while also adjusting the zoom if the target is standing in a IZoomArea . You can however implement your own camera, where each room can have a different camera if desired. ICharacter A character is an entity with pre-set components (like talk, walk, and inventory) which is useful to depict adventure game characters. ICheckBox A pre-set entity with all of the UI control components, plus a checkbox component. ICheckboxComponent The checkbox component allows having an entity behave like a checkbox (can be checked an unchecked). IChildrenCollection A collection of children (to be used in a tree like structure). IClippingPlane A clipping plane allows clipping objects (i.e hiding objects) if they're on the wrong side of the plane. A near clipping plane is for clipping objects which are too close to the camera, and a far clipping plane is for clipping objects which are too far from the camera. IColliderComponent Adds the ability for an entity to check collisions (i.e check whether it collides with a point in the room). The collision is checked via either the entity's bounding box, or via a pixel perfect collision if the IPixelPerfectComponent exists and enabled. IColorBlend IComboBox A pre-set entity with all of the UI control components, plus a combo box component (a drop-down). IComboBoxComponent The combo box component allows having the entity behave like a drop-down for selecting an item from a list. IComponent A component can be added to an entity (object/character/button/etc), and add additional behavior to it. IComponentBinding Represents binding of actions to be performed when a component is added/removed. IComponentsCollection A collection of componenets: allows you to add, remove, get and iterate components. IConcurrentHashSet<TItem> A hashed set which can be write/read concurrently. ICoordinates Utility methods to help convert between different coordinate systems: Window coordinates: those are the coordinates of the window which hosts the game (the units are based on the number of pixels the window has on your screen- determined from your screen resolution and display size). World coordinates: those are the coordinates of your game world (the units are based on your virtual resolution). Viewport coordinates: the game might have multiple viewports on the screen (for example, in a split-screen game). Each viewport can have its own coordinates. The world coordinates are actually the main viewport coordinates. Object coordinates: each object in the game can have its own coordinates. First, it can be using a IRenderLayer which has a different resolution than your world's resolution. Secondly, if the object is a child of another object, then the coordinate system is relative to the parent. ICropChildrenComponent This component allows cropping all children to the parent's size. For example, you can have an object to represent a TV, then crop all of its children entities, so the entities will not get out of the boundaries of the TV (giving the appearance that it's really a TV). ICropSelfComponent Adds the ability to crop the shown image (only show part of the image). ICrossFading Allows to set how cross fading audio clips between rooms behaves. ICustomProperties Custom properties that you can attach to entities and can be used to get/set values during the game. ICustomPropertiesComponent ICustomPropertiesPerType<TValue> Custom properties that you can attach to entities and can be used to get/set values during the game. ICustomSearchItem Allows providing behavior for custom searching text in tree view or list box. ICustomSerializable ICustomSerializableData ICutscene A cutscene is used to wrap a portion of the game together. This portion can then be skipped by the user. This is useful for things like introduction sequences, where you want the player to be able to skip over an intro that they've seen before. IDefaultFonts Allows to set the default fonts to be used in the game. IDefaultInteractions Default interactions (when no specific interaction callback is subscribed) are defined here. This is where you define generic responses (like the famous \"this doesn't work\") that cover all of the interactions for which you didn't code a specific response. IDefaultsSettings Gets or sets settings for various defaults. IDepthClipping Depth clipping allows clipping objects (i.e hiding objects) if they're either too close or too far from the camera. A near clipping plane is for clipping objects which are too close to the camera, and a far clipping plane is for clipping objects which are too far from the camera. IDialog Represents a dialog (an on-going conversation) between two (or more) characters. The dialog is structured as a sequence of actions (usually the characters talking), followed by a list of choices for the player, where each choice branches to another sequence of actions, followed by another list of choices, and so on. IDialogAction A dialog action. This is usually text spoken by one of the characters, but it can be any action, which will run in the sequence. IDialogActions Represents a sequence of actions that can be performed after a dialog choice. IDialogFactory A factory to create dialogs and dialog options. IDialogLayout Allows customizing how the dialog options will be layed out on the screen. The default will show them at the bottom of the screen. IDialogOption Represents a dialog option that is shown on the screen as part of a list of options, where the user needs to choose one of the options. IDialogSettings Allows to set default settings to control how dialogs look and behave. IDirectionalAnimation Allows grouping animations for different directions together (for example, walking left and right). This is used by the character when choosing a directional animation: if you don't assign all of the directions, the engine will attempt to choose the best direction based on what you have assigned. So, for example, if you only assign Left and Right animations for your walk animation, and the player is attempting to walk down-right, the engine will use the Right animation. IDisplayList Represents an ordered list of objects that will be displayed on screen. IDisplayListSettings Controls what is shown on screen for this display list. IDraggableComponent Adds the ability for an entity to be dragged on the screen with the mouse/touch. IDrawableInfoComponent Adds the ability for an entity to configure various aspects of how it is rendered. IEdge Room edges are a convenient way for scripting a room change once a player walks beyond an edge. Each room has 4 edges, and this interface represents any of those edges. IEdges Room edges are a convenient way for scripting a room change once a player walks beyond an edge. You can set the 'X' for the left and right edge, and the 'Y' for the top and bottom edge and subscribe to events when the player crosses the edge to change the room. IEnabledComponent Adds the ability for an entity to be disabled/enabled. Only enabled entities can be interacted with by the player. IEntity An entity is the most basic unit for composition. On itself it doesn't do anything except be a collection of components. Each added component adds more abilities to the entity. For example, adding a \"talk\" component to the entity, will give the entity the ability to talk. IEvent Represents an event which can be subscribed both synchronously or asynchorously, and is invoked asynchronously. An event is a notification for something that has happened. Interested parties can subscribe to the event and be notified when it triggers ( https://en.wikipedia.org/wiki/Event-driven_programming ). IEvent<TEventArgs> Represents an event which can be subscribed both synchronously or asynchorously, and is invoked asynchronously. An event is a notification for something that has happened. Interested parties can subscribe to the event and be notified when it triggers ( https://en.wikipedia.org/wiki/Event-driven_programming ). IFaceDirectionComponent Gives the ability for a character to change the direction he/she is facing. IFocusedUI Contains information about UI controls which have focus (and thus block input from other controls). IFollowComponent This component adds the ability for a character to follow another entity (i.e to keep walking to where the entity is. The follow settings can be configured to set how aggressive that follow is). IFollowSettings Configures how the character follow component behaves. IFont Represents a font which is used when drawing text. IFontFactory IFontLoader Allows loading fonts. IForm A form (a panel with a header). IFrameBuffer Allows rendering into a texture instead of rendering to screen IGame A top-level interface to interact with the game. IGameEvents The game events, allows you to subscribe to important events that happen in the game. IGameFactory The game factory. This factory contains all of the other factories. Factories are used to offer convience methods for creating game objects. IGameLoop The game loop, which updates the game state on every tick. IGameSettings Game settings (those can be set only once). IGameStarter The game starter interface is the interface that a game project should implement so that it can be loaded by the editor. When loading a game from the editor, the editor searches for an implementation of this interface in the game, and calls the \"StartGame\" method with the game it created so that the editor and the game will have a shared interface to the game. IGameState The game state. This is the entry point for all \"changing\" things in the game. IGraphicsFactory Factory to allow loading graphics (images/animations). IHasCursorComponent Allows setting a special cursor that will be shown when the mouse is hovering the entity. This can be useful for having special \"Exit\" cursors for doors (for example). IHasImage A container for an image. IHasModelMatrix An interface representing an entity which has a model matrix and can be rendered on screen. IHasRoomComponent This component associates an entity with the game's room system. It means that the entity can be belong to a room and moved between rooms. IHitTest Responsible for returning the current object that is located under the mouse position. IHotspotComponent Allows an entity to act as a hotspot (i.e can be interacted with). IIconFactory A factory for creating icons. IImage Represents an image that can be rendered on screen (usually as part of an animation). IImageComponent A component which allows setting an image to the entity. IInObjectTreeComponent A component which adds the ability for an entity to be a part of an object's tree. IInput The entry point for getting input from the user (keyboard/mouse/touch). IInputEvents A collection of input events. IInteractions Allows subscribing interaction events (to define what happens when an object is looked at/interacted with/etc). IInTree<TItem> A component which adds the ability for an entity to be a part of an entity's tree. IInventory The character's inventory. Those are the items that the character holds in his/her (usually) imaginary bag. It is composed of a list of inventory items, and one active item that the character holds in his/her hand. IInventoryComponent This component allows an entity to carry inventory. IInventoryFactory A factory for creating inventory items and inventory windows. IInventoryItem Represents an inventory item that a character can hold in his/her inventory. IInventoryWindow A pre-set entity with all of the UI control components, plus an inventory window component, for displaying inventory items in a window. IInventoryWindowComponent An inventory window allows displaying inventory items in a window. IJumpOffsetComponent Jump offset allows changing the position of the entity without affecting its X,Y and Z co-ordinates. This means that it won't affect the rendering order, collision tests, etc. This can be used for having a character jump in the air, for example, without causing it to appear behind objects which shouldn't be in front. This is also used by the engine for scrolling contents inside a scrolling panel. ILabel A pre-set entity with all of the UI control components, plus a text component for displaying text. IListbox Represents a listbox (a GUI view of a list of items). IListboxComponent A component for displaying a list of items (as text), and allowing selecting an item from the list. ILoadImageConfig Configuration to be used when loading images. ILockStep A mechanism to lock changes for various components, to ensure multiple changes happen at once. IMask A mask is basically a 2D array of booleans, usually representing an area on the screen. IMaskLoader Allows loading a mask from an image. IMessageBoxSettings Settings for creating message boxes. Those are created from the \"AGSMessageBox\" class. IModalWindowComponent Adds the ability for a window to be modal (blocks input from other windows). For example, if you create a \"Save Game\" dialog, you wouldn't want to be able to open the inventory when the dialog is showing, so you'll make the dialog a modal window, then you can grab focus when the window is shown, and lose focus when the window is closed. IModelMatrixComponent A component to calculate the matrix used to render/hit-test the object. The matrix includes transormations, rotations and scale. INumberEditorComponent A component that acts as a control to edit numbers. IObject An object is an entity with pre-set components (like location, scale, rotation, animation, etc) which is useful to depict all adventure game objects. Both characters and UI controls are also objects (with additional components). IObjectFactory A factory for creating objects, characters, and masked hotspots. IOutfit An outfit is a collection of animations that are associated with a character. The collection can be swapped with another collection when the character changes his look. IOutfitComponent Gives an entity the ability to have an outfit (and be able to change outfits). IOutfitFactory A factory for creating animation outfits for characters. The factory conveniently allows for idle, walk and speak animations, where other animations can be added to the outfit manually. IPanel A panel is a UI control which hosts other UI controls. Note: the panel is in fact completely unnecessary, as any other UI control can host UI controls as well, but it's here as it provides a clear intent on its use. IPathFinder This implements a path finder, to find a walking path from a position in 2D space to another position, while a mask implies where the character is allowed to walk on the 2D space. IPixelPerfectCollidable Adds the ability for pixel perfect collision checks ( https://wiki.allegro.cc/index.php?title=Pixel_Perfect_Collision ) IPixelPerfectComponent Adds the ability for an entity to have pixel perfect collision checks (as opposed to bounding box collision checks). See: https://wiki.allegro.cc/index.php?title=Pixel_Perfect_Collision IPortraitConfig Configuration for how the speech portrait is rendered. IRadioGroup Used to group multiple checkboxes together to guarantee that only one will be checked at any given time. IRenderer A renderer is an object which passes on drawing instructions on demand. All renderers which are subcribed to the rendering pipeline (for entities which are to be displayed), are requested to pass on the drawing instructions on each game tick. The rendering loop then uses those instructions to draw on the screen. IRendererLoop Represents the render loop of the game. All drawing to the screen is performed from the render loop. IRenderInstruction A render instruction represents an instruction to draw something. It is created on demand by renderers, and used by the rendering loop to draw on the screen on each game tick. IRenderLayer A render layer is an abstract grouping of objects with similar rendering properties. A render layer has a \"Z\" property for sorting which takes precedence over specific objects \"Z\" property. This means that if you have a UI render layer which is configured to be in front of a Background render layer, all objects which are associated with the UI layer will always be in front of the objects that are associated with the background layer. In addition, render layers add support for assigning different parallax speeds, to create beautiful parallax effects. AGS comes with a few built in layers that are used by default (Background, Foreground, UI and Speech). Speech layer is in front to ensure that displayed text can always be seen. This is the default layer used for Character.Say. UI layer is next, to ensure that it can always be seen (unless obstructed by text). This is the default layer used for all UI controls. This is followed by the Foreground layer, which is the default for all non UI objects. And lastly the Background layer, which is the default for the room's background graphics. You can assign those layers yourself, using AGSLayers static class: cEgo.RenderLayer = AGSLayers.UI; //The player is now on the UI layer! IRenderPipeline The render pipeline is responsible for collecting all of the rendering information and passing it on to the render loop. It allows entities to subscribe their own renderers and pass on custom drawing instructions. IRepeatedlyExecuteEventArgs Event arguments for the OnRepeatedlyExecute event. IResolver The resolver is an object that allows you to retrieve various systems from the engine. It uses an inversion of control container ( https://en.wikipedia.org/wiki/Inversion_of_control ) in order to allow you to replace the built-in engine system implementations with your own implementations. For more details, see: https://tzachshabtay.github.io/MonoAGS/articles/customizations.html IResource A resource is any asset which is loaded from a stream of data (could be from a file, or embedded in memory, or network stream, or any other stream). IResourceLoader The resource loader is the go-to place for retrieving resources. It does so by querying various resources packs for the resource you require until it is found. Each resource pack has a priority which determines the order of precedence in which the packs are queried (higher priority gets precedence). There are currently 2 built-in resource packs in the engine, which allow for 2 ways you can have resources in your game: They can be embedded in the project or loaded from the file system. This interface allows for loading resource either from the embedded project files or from the file system. The advantage of having the resources embedded is that you can rest assured the resources will be distributed with your game and cannot be touched from outside, which is why it's the recommended method. Loading from file system might be useful if you need the resources to be loaded dynamically, for example you might want to download resources from the internet, or if you give the user the option to choose her/his avatar. To embed resources in your game project, first add the resource files to the \"Assets\" folder in your shared game project(it doesn't have to be in the root \"Assets\" folder, you can have any structure you want in there). Then, in the solution explorer, right click the \"Assets\" folder and \"Add Existing\" (there are options for adding files or complete folders, depending on what you want to do) and add those resources to the project. You should then see those resources in the tree. Lastly, right click those resources and select \"Embedded Resource\" as your \"Build Option\". Note that even the resource is embedded, it's only embedded when compiling the game, so you cannot delete the file before deploying your game, and if you replace the file, it will be automatically replaced in the game on your next run. The path used by the loading methods has to be structured as so: if the resource is to be loaded from a file in the file system, then put the absolute path of the file. If the resource is embedded then put the relative path of the file (when the current folder is the \"Assets\" folder). So, for example, if you have an audio file called \"trumpet.ogg\" sitting under a \"Sounds\" folder in \"Assets\", your path would be \"Sounds/trumpet.ogg\". Note that this would work even if the file is sitting in that folder but not embedded. This is because (assuming the resource loader is configured with both an embedded resource pack and a file system resource pack) ResourceLoader will search for both an embedded resource and for a file from the file system. The order of the search depends on the configured priority for each resource pack. IResourcePack A resource pack is an abstract representation of a storage space for retrieving resources. There can be a resource pack that's based on the file system, a resource pack which retrieves embedded resource in the game file itself, a resource pack that downloads resources from the web, a resource pack based on a zip file, etc. IResourceLoader IRestrictionList Adds the ability to restrict certain entities from being affected by \"something\". That \"something\" can be an area, for example, or a display list for a viewport. IRoom The rooms are where the game takes place. A room can be a room in a house, or an outdoor location, or anything in between. The game can show only one room at a time.This would usually be the room where the player is, though you can change to a different room than the one the player is in if you want. Note: this is different than \"Classic\" AGS in which the room is explicitly tied to where the player is. IRoomEvents Each room has specific events which you can subscribe to and code stuff to happen on those events. IRoomFactory Factory for creating rooms and room specifics. IRoomLimitsProvider Allow providing custom room limits. The room limits are used to limit the camera from moving too much to the left or to the right. By default the room limits are bound to the room background size and start from (0,0), however this can be changed by setting a custom room limits provider to a room. IRoomProvider Provides a room. IRoomTransition This interface allows you to create custom room transitions, to build all kinds of special effects when transitioning from room to room. IRoomTransitions Allows to set the room transitions (and to get some information on the transitions) IRotate Allows rotating an entity/sprite. IRotateComponent A component which allows rotating an entity. IRuntimeSettings Game settings. ISaturationEffectComponent Allows adjusting the saturation of an entity/screen. If added as a component to an entity, the saturation property will control the entity's saturation. If created separately (and initialized with a null entity), this can be use to control the saturation of the entire screen. //to adjust saturation for an object: myObj.AddComponent<ISaturationEffectComponent>().Saturation = 0.5f; //to adjust saturation for the screen: var effect = new SaturationEffect(game.Factory.Shaders, game.Events); effect.Init(null); effect.Saturation = 0.5f; ISaveLoad Allows saving/loading a game. ISayComponent A component which adds the ability to speak for an entity. ISayConfig Configuration for how speech is rendered. ISayLocation Represents a location of where to render said text, and where to render a portrait (if a portrait should be rendered). ISayLocationProvider This is called every time a character speaks to determine the location on the screen on which the text (and the portrait, if portrait rendering is desired) will be rendered. IScale Allows scaling (changing the size of) entities/sprites. IScaleComponent Allows scaling (changing the size of) an entity. IScalingArea This component adds the ability for an area to automatically scale each object/character within it (and also 'scale' the volume of sounds coming from that object). The most common use is for faking perspective, so that when a character walks to the top of the screen (closer to the horizon), he will appear smaller and make quieter sounds. For that common use case, you'll want to scale on the Y axis (which is why Y axis is the default), and scale both the object x && y (to keep the aspect ration in tact). IScrollbar A scrollbar is a ISlider with 2 buttons (left + right or up + down depending on which SliderDirection is used) that can be clicked to modify the slider. IScrollingComponent This component gives the ability to attach scrollbars to an entity, which will then scroll the content (i.e the children) of the entity. ISelectableIcon An icon which has two modes: selected and not selected. IShader Represents a shader which is a user defined program that can be written to directly affect what's rendered on the screen. See here: https://www.opengl.org/wiki/Shader We're currently supporting vertex & fragment shaders. IShaderComponent This component provides a way to attach a shader to your entities IShaderFactory Factory for creating shaders ( IShader ). IShouldBlockInput This interface is used when processing input to determine whether input should be allowed and processed. For example, when the room is in transition, input is not allowed. You can change the behavior of when input is allowed or not by overriding this interface and hooking it up with the Resolver. ISkin Allows skinning (providing a common custom theme to) an entity. ISkinComponent Allows skinning (providing a common custom theme to) an entity. It's usually used for GUIs. For example, you might have a blue themed skin which gives all controls a common blue-ish look. ISlider A pre-set entity with all of the UI control components, plus a slider component, for selecting a numeric value within an allowed range. ISliderComponent A slider component allows selecting a numeric value between an allowed range, by dragging a handle across a line (usually). ISound An instance of a playing sound. You'll usually use an IAudioClip to play a sound, and control the playing sound from this interface. ISoundEmitter A sound emitter allows to bind an audio clip to an entity which is moving on a screen. Playing a sound from the emitter will pan it or set the volume (both can be turned off) to sound like it coming from the same location the entity is in. You can also assign the emitter to automatically play the sound on specific animation frames (so it's a perfect fit for footsteps, for example). ISoundModifier A sound modifier can be implemented in order to modify one or more properties of a sound on-the-fly. For example, the engine has an audio rule ( IAudioRule ) that adds a modifier to all non-speech sounds, which reduces the volume of those sounds when a speech sound plays. ISoundPlayer Allows to play a sound. ISoundProperties Allows to read or adjust the properties (volume, pitch, gain) of a sound/clip. ISpeechCache The speech cache is responsible for providing the correct audio clips to play for a specific text that's being said. ISpeechLine Represents a line of speech (text and sound). ISprite A sprite is an image which can be manipulated (scaled, rotated or translated in space). ISpriteProvider Interface of a single sprite source. ISpriteSheet Represents a sprite sheet: An image that contains multiple sprites in it, with some rules on how to read the sprites to perform an animation (usually). IStackLayoutComponent The stack layout component organizes its children in a one-dimensional line (\"stack\"), either horizontally, or vertically. The default is a simple vertical layout (top to bottom). IStringItem A textual item to be shown on GUI controls (like combobox, listbox or tree). ITextBox A pre-set entity with all of the UI control components, plus a text and textbox component, for allowing editing/inserting text. ITextBoxComponent This component allows us to create a textbox control (a UI control which allows keyboard input to print text on screen). ITextComponent A text component allows displaying text on the screen. ITextConfig Configuration which is used when rendering text. ITexture ITextureCache A single cache which stores all of the textures in a single place. ITextureConfig Various configurations for a texture. ITextureFactory A factory for creating textures. ITextureOffsetComponent Allows changing the starting offset from which the texture will be rendered. This can be useful, for example, when dealing with a tiled texture (i.e when the ITextureConfig has either wrapX or wrapY as Repeat or MirroredRepeat ) when you want to animate the tile. ITransformMatrix ITranslate Allows changing the position of entities/sprites. ITranslateComponent Allows changing the position of an entity. ITreeNode<TItem> A node in a tree. A tree is a structure in which every node can have one parent (or no parent if it's the root) and several children (or no children, which will make it a leaf in the tree). ITreeNodeView Encapsulates all the UI controls needed to show a tree node in a ITreeViewComponent . Each node has a parent panel with two additional panels: a horizontal stack layout panel with an expand/collapse button and the text label, and a vertical panel for holding the children of the node. ITreeNodeViewProvider The tree node view provider is responsible for displaying a node in a ITreeViewComponent control. ITreeStringNode A string tree node, which will be shown in a ITreeViewComponent . ITreeTableLayout Represents a layout of columns that is shared between nodes in a tree view, using a ITreeTableRowLayoutComponent . By sharing the interaces different nodes on the list can align the columns together. ITreeTableRowLayoutComponent Represents a row in a tree view that aligns its columns with other rows, based on ITreeTableLayout . ITreeViewComponent A component for displaying a hierarchical collection of text labels. Each label is a node in the tree which can be collapsed/expanded to hide/show its children. IUIControl A UI control is an object which has events like mouse click, to help the user interact with it. A UI control also has a skin component, for customing its look. All other GUIs (buttons, checkboxes, textboxes, etc) are also a UI control. IUIEvents The UI events component adds the ability to subscribe to multiple events which are needed by GUIs \\ (like mouse click, enter, leave). IUIFactory Factory for creating UI controls (buttons, textboxes, etc). IViewport It might be that not all of the room is shown on the screen at once (for example, a scrolling room). A viewport to the room instructs the engine on what parts of the room to show. IVisibleComponent Adds the ability to show/hide an entity. IWalkableArea These are the areas that indicate where the characters can walk. IWalkBehindArea These are areas that indicate that the background graphic of the room should be in front of the characters/objects. When rendering the engine will actually crop those up and render them on top. IWalkComponent Gives an entity the ability to walk around the room. IWindowInfo Information about the application window and the sub-window containing the game. Usually, the window hosting the game IS the application window, but for some scenarios (like for the editor which is hosting the game) the game can be configured to only use part of the window (a \"sub window\"). IWorldPositionComponent Allows getting the world position for entities. IZoomArea These are areas that indicate the camera should automatically zoom when the player (or whatever other target was chosen for the camera) is in that area. This works along nicely with a vertical scaling area, to zoom the camera as the player moves farther away from the camera. Enums Alignment ApproachHotspots How to approach hotspots? ArrowDirection AutoFit Allows for a label and its text to fit together in various way. BoundingBoxType Bounding box type. BrushType CallbackPriority In a scenario where an event has multiple subscribers, the callback priority affects which subscriber gets the callback first. High priority subscribers will receive the event before normal priority (the default) subscribers, and low priority will receive the event last. Note: For 2 subscribers with the same callback priority, there's no guarantee regarding who gets the event first. ComboSuggest Which mode to apply when typing text in the combo box's textbox? CropFrom If the item was completely cropped, gets the direction the item was cropped from. CustomStringApplyWhen Indicates when to apply a custom display string instead of using ToString(). Direction A general direction to which a character can face. FontStyle Font style (regular, bold, italic, underline or strikeout). GraphicsBackend The graphics backend used to render the game. HatchStyle Key The keyboard keys. LayoutDirection ListChangeType How did the list change? LoopingStyle Determines how the animation will run. MouseButton Mouse buttons. PortraitPositioning Configures how the portraits will be positioned. RestrictionListType Defines how a restriction list ( IRestrictionList ) is interpreted. ScaleDownFilters The filter to be used when scaling down the texture. ScaleUpFilters The filter to be used when scaling up the texture. ScalingAxis Scaling axis on which the scaling takes place. SelectionType ShaderMode Shader mode (currently only fragment and vertex shaders are supported). SkipCutsceneTrigger Different options of how to trigger skipping a cutscene. SkipText How to skip the text? SliderDirection The direction in which the slider moves from minimum to maximum. SpriteSheetOrder Determines the order in which a sprite sheet is read. TextureWrap How a texture is wrapped to fill an image. ITextureOffsetComponent VsyncMode Vsync mode- how the FPS and screen refresh rate are synchronized. WindowBorder Window border- resizable, fixed or hidden. WindowState Window state (minimized, maximized, full screen, floating). WrapMode Delegates ClaimableCallback This allows you to subscribe to an event with the option of claiming the event, so that other subscribers in the list will not receive the event. myEvent.Subscribe(onEvent1); myEvent.Subscribe(onEvent2); void onEvent1(ref ClaimEventToken token) { token.Claimed = true; //We claimed the event, \"onEvent2\" will not get called. } ClaimableCallbackWithArgs<TEventArgs> This allows you to subscribe to an event with the option of claiming the event, so that other subscribers in the list will not receive the event. For an example- ClaimableCallback ."
  },
  "api/AGS.API.WrapMode.html": {
    "href": "api/AGS.API.WrapMode.html",
    "title": "Enum WrapMode | MonoAGS Documentation",
    "keywords": "Enum WrapMode Namespace : AGS.API Assembly : AGS.API.dll Syntax public enum WrapMode Fields Name Description Clamp Tile TileFlipX TileFlipXY TileFlipY"
  },
  "api/AGS.API.WindowState.html": {
    "href": "api/AGS.API.WindowState.html",
    "title": "Enum WindowState | MonoAGS Documentation",
    "keywords": "Enum WindowState Window state (minimized, maximized, full screen, floating). Namespace : AGS.API Assembly : AGS.API.dll Syntax public enum WindowState Fields Name Description FullScreen The window will in full screen mode, meaning the game will take over the computer and change the resolution to fit. No border will be shown regardless of the window border configuration. Maximized The window will be maximized. Unlike FullScreen mode, the computer's resolution will remain untouched and switching to other applications is easier. The window's border will still be seen (unless you set the window border to be hidden). Minimized The window will be minimized. Normal The window will be a normal floating window (will be floating on devices that support that). This is the default."
  },
  "api/AGS.API.WindowBorder.html": {
    "href": "api/AGS.API.WindowBorder.html",
    "title": "Enum WindowBorder | MonoAGS Documentation",
    "keywords": "Enum WindowBorder Window border- resizable, fixed or hidden. Namespace : AGS.API Assembly : AGS.API.dll Syntax public enum WindowBorder Fields Name Description Fixed The window border will be visible but the user will not be able to resize it. Hidden The window border will be hidden (recommended if you want to have your game at full screen, but without using the FullScreen mode that changes the computer's resolution). Resizable The window border will be visible and the user will be able to resize the window by dragging the border (the default)."
  },
  "api/AGS.API.VsyncMode.html": {
    "href": "api/AGS.API.VsyncMode.html",
    "title": "Enum VsyncMode | MonoAGS Documentation",
    "keywords": "Enum VsyncMode Vsync mode- how the FPS and screen refresh rate are synchronized. Namespace : AGS.API Assembly : AGS.API.dll Syntax public enum VsyncMode Fields Name Description Off Vsync is off, so no synchronization is made between the FPS and the screen refresh rate. This means you will get tearing if frame rate is above your refresh rate. On Vsync is on, so you will get no vertical tearing. However if your frame rate is below the screen refresh rate, you can get much lower FPS than you really should (unless you run with triple buffering, then this would not be a problem- triple buffering can be configured in the hardware driver, though using triple buffers mean more VRAM is being used)."
  },
  "api/AGS.API.Vector4.html": {
    "href": "api/AGS.API.Vector4.html",
    "title": "Struct Vector4 | MonoAGS Documentation",
    "keywords": "Struct Vector4 Represents a 4D vector using four single-precision floating-point numbers. Implements System.IEquatable < Vector4 > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : AGS.API Assembly : AGS.API.dll Syntax public struct Vector4 : IEquatable<Vector4> Remarks The Vector4 structure is suitable for interoperation with unmanaged code requiring four consecutive floats. Constructors | Improve this Doc View Source Vector4(Vector2) Constructs a new Vector4 from the given Vector2. Declaration public Vector4(Vector2 v) Parameters Type Name Description Vector2 v The Vector2 to copy components from. | Improve this Doc View Source Vector4(Vector3) Constructs a new Vector4 from the given Vector3. The w component is initialized to 0. Declaration public Vector4(Vector3 v) Parameters Type Name Description Vector3 v The Vector3 to copy components from. Remarks Vector4(Vector3, Single) | Improve this Doc View Source Vector4(Vector3, Single) Constructs a new Vector4 from the specified Vector3 and w component. Declaration public Vector4(Vector3 v, float w) Parameters Type Name Description Vector3 v The Vector3 to copy components from. System.Single w The w component of the new Vector4. | Improve this Doc View Source Vector4(Vector4) Constructs a new Vector4 from the given Vector4. Declaration public Vector4(Vector4 v) Parameters Type Name Description Vector4 v The Vector4 to copy components from. | Improve this Doc View Source Vector4(Single) Constructs a new instance. Declaration public Vector4(float value) Parameters Type Name Description System.Single value The value that will initialize this instance. | Improve this Doc View Source Vector4(Single, Single, Single, Single) Constructs a new Vector4. Declaration public Vector4(float x, float y, float z, float w) Parameters Type Name Description System.Single x The x component of the Vector4. System.Single y The y component of the Vector4. System.Single z The z component of the Vector4. System.Single w The w component of the Vector4. Fields | Improve this Doc View Source One Defines an instance with all components set to 1. Declaration public static readonly Vector4 One Field Value Type Description Vector4 | Improve this Doc View Source SizeInBytes Defines the size of the Vector4 struct in bytes. Declaration public static readonly int SizeInBytes Field Value Type Description System.Int32 | Improve this Doc View Source UnitW Defines a unit-length Vector4 that points towards the W-axis. Declaration public static readonly Vector4 UnitW Field Value Type Description Vector4 | Improve this Doc View Source UnitX Defines a unit-length Vector4 that points towards the X-axis. Declaration public static readonly Vector4 UnitX Field Value Type Description Vector4 | Improve this Doc View Source UnitY Defines a unit-length Vector4 that points towards the Y-axis. Declaration public static readonly Vector4 UnitY Field Value Type Description Vector4 | Improve this Doc View Source UnitZ Defines a unit-length Vector4 that points towards the Z-axis. Declaration public static readonly Vector4 UnitZ Field Value Type Description Vector4 | Improve this Doc View Source W The W component of the Vector4. Declaration public float W Field Value Type Description System.Single | Improve this Doc View Source X The X component of the Vector4. Declaration public float X Field Value Type Description System.Single | Improve this Doc View Source Y The Y component of the Vector4. Declaration public float Y Field Value Type Description System.Single | Improve this Doc View Source Z The Z component of the Vector4. Declaration public float Z Field Value Type Description System.Single | Improve this Doc View Source Zero Defines a zero-length Vector4. Declaration public static readonly Vector4 Zero Field Value Type Description Vector4 Properties | Improve this Doc View Source Item[Int32] Gets or sets the value at the index of the Vector. Declaration public float this[int index] { get; set; } Parameters Type Name Description System.Int32 index Property Value Type Description System.Single | Improve this Doc View Source Length Gets the length (magnitude) of the vector. Declaration public float Length { get; } Property Value Type Description System.Single See Also LengthSquared | Improve this Doc View Source LengthFast Gets an approximation of the vector length (magnitude). Declaration public float LengthFast { get; } Property Value Type Description System.Single Remarks This property uses an approximation of the square root function to calculate vector magnitude, with an upper error bound of 0.001. See Also LengthSquared | Improve this Doc View Source LengthSquared Gets the square of the vector length (magnitude). Declaration public float LengthSquared { get; } Property Value Type Description System.Single Remarks This property avoids the costly square root operation required by the Length property. This makes it more suitable for comparisons. See Also LengthFast | Improve this Doc View Source Wx Gets or sets an OpenTK.Vector2 with the W and X components of this instance. Declaration public Vector2 Wx { get; set; } Property Value Type Description Vector2 | Improve this Doc View Source Wxy Gets or sets an OpenTK.Vector3 with the W, X, and Y components of this instance. Declaration public Vector3 Wxy { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Wxyz Gets or sets an OpenTK.Vector4 with the W, X, Y, and Z components of this instance. Declaration public Vector4 Wxyz { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Wxz Gets or sets an OpenTK.Vector3 with the W, X, and Z components of this instance. Declaration public Vector3 Wxz { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Wxzy Gets or sets an OpenTK.Vector4 with the W, X, Z, and Y components of this instance. Declaration public Vector4 Wxzy { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Wy Gets or sets an OpenTK.Vector2 with the W and Y components of this instance. Declaration public Vector2 Wy { get; set; } Property Value Type Description Vector2 | Improve this Doc View Source Wyx Gets or sets an OpenTK.Vector3 with the W, Y, and X components of this instance. Declaration public Vector3 Wyx { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Wyxz Gets or sets an OpenTK.Vector4 with the W, Y, X, and Z components of this instance. Declaration public Vector4 Wyxz { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Wyz Gets or sets an OpenTK.Vector3 with the W, Y, and Z components of this instance. Declaration public Vector3 Wyz { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Wyzx Gets or sets an OpenTK.Vector4 with the W, Y, Z, and X components of this instance. Declaration public Vector4 Wyzx { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Wz Gets or sets an OpenTK.Vector2 with the W and Z components of this instance. Declaration public Vector2 Wz { get; set; } Property Value Type Description Vector2 | Improve this Doc View Source Wzx Gets or sets an OpenTK.Vector3 with the W, Z, and X components of this instance. Declaration public Vector3 Wzx { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Wzxy Gets or sets an OpenTK.Vector4 with the W, Z, X, and Y components of this instance. Declaration public Vector4 Wzxy { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Wzy Gets or sets an OpenTK.Vector3 with the W, Z, and Y components of this instance. Declaration public Vector3 Wzy { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Wzyw Gets an OpenTK.Vector4 with the W, Z, Y, and W components of this instance. Declaration public Vector4 Wzyw { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Wzyx Gets or sets an OpenTK.Vector4 with the W, Z, Y, and X components of this instance. Declaration public Vector4 Wzyx { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Xw Gets or sets an OpenTK.Vector2 with the X and W components of this instance. Declaration public Vector2 Xw { get; set; } Property Value Type Description Vector2 | Improve this Doc View Source Xwy Gets or sets an OpenTK.Vector3 with the X, W, and Y components of this instance. Declaration public Vector3 Xwy { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Xwyz Gets or sets an OpenTK.Vector4 with the X, W, Y, and Z components of this instance. Declaration public Vector4 Xwyz { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Xwz Gets or sets an OpenTK.Vector3 with the X, W, and Z components of this instance. Declaration public Vector3 Xwz { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Xwzy Gets or sets an OpenTK.Vector4 with the X, W, Z, and Y components of this instance. Declaration public Vector4 Xwzy { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Xy Gets or sets an OpenTK.Vector2 with the X and Y components of this instance. Declaration public Vector2 Xy { get; set; } Property Value Type Description Vector2 | Improve this Doc View Source Xyw Gets or sets an OpenTK.Vector3 with the X, Y, and Z components of this instance. Declaration public Vector3 Xyw { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Xywz Gets or sets an OpenTK.Vector4 with the X, Y, W, and Z components of this instance. Declaration public Vector4 Xywz { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Xyz Gets or sets an OpenTK.Vector3 with the X, Y, and Z components of this instance. Declaration public Vector3 Xyz { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Xz Gets or sets an OpenTK.Vector2 with the X and Z components of this instance. Declaration public Vector2 Xz { get; set; } Property Value Type Description Vector2 | Improve this Doc View Source Xzw Gets or sets an OpenTK.Vector3 with the X, Z, and W components of this instance. Declaration public Vector3 Xzw { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Xzwy Gets or sets an OpenTK.Vector4 with the X, Z, W, and Y components of this instance. Declaration public Vector4 Xzwy { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Xzy Gets or sets an OpenTK.Vector3 with the X, Z, and Y components of this instance. Declaration public Vector3 Xzy { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Xzyw Gets or sets an OpenTK.Vector4 with the X, Z, Y, and W components of this instance. Declaration public Vector4 Xzyw { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Yw Gets or sets an OpenTK.Vector2 with the Y and W components of this instance. Declaration public Vector2 Yw { get; set; } Property Value Type Description Vector2 | Improve this Doc View Source Ywx Gets or sets an OpenTK.Vector3 with the Y, W, and X components of this instance. Declaration public Vector3 Ywx { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Ywxz Gets or sets an OpenTK.Vector4 with the Y, W, X, and Z components of this instance. Declaration public Vector4 Ywxz { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Ywz Gets an OpenTK.Vector3 with the Y, W, and Z components of this instance. Declaration public Vector3 Ywz { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Ywzx Gets or sets an OpenTK.Vector4 with the Y, W, Z, and X components of this instance. Declaration public Vector4 Ywzx { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Yx Gets or sets an OpenTK.Vector2 with the Y and X components of this instance. Declaration public Vector2 Yx { get; set; } Property Value Type Description Vector2 | Improve this Doc View Source Yxw Gets or sets an OpenTK.Vector3 with the Y, X, and W components of this instance. Declaration public Vector3 Yxw { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Yxwz Gets or sets an OpenTK.Vector4 with the Y, X, W, and Z components of this instance. Declaration public Vector4 Yxwz { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Yxz Gets or sets an OpenTK.Vector3 with the Y, X, and Z components of this instance. Declaration public Vector3 Yxz { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Yxzw Gets or sets an OpenTK.Vector4 with the Y, X, Z, and W components of this instance. Declaration public Vector4 Yxzw { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Yywz Gets an OpenTK.Vector4 with the Y, Y, W, and Z components of this instance. Declaration public Vector4 Yywz { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Yyzw Gets an OpenTK.Vector4 with the Y, Y, Z, and W components of this instance. Declaration public Vector4 Yyzw { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Yz Gets or sets an OpenTK.Vector2 with the Y and Z components of this instance. Declaration public Vector2 Yz { get; set; } Property Value Type Description Vector2 | Improve this Doc View Source Yzw Gets or sets an OpenTK.Vector3 with the Y, Z, and W components of this instance. Declaration public Vector3 Yzw { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Yzwx Gets or sets an OpenTK.Vector4 with the Y, Z, W, and X components of this instance. Declaration public Vector4 Yzwx { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Yzx Gets or sets an OpenTK.Vector3 with the Y, Z, and X components of this instance. Declaration public Vector3 Yzx { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Yzxw Gets or sets an OpenTK.Vector4 with the Y, Z, X, and W components of this instance. Declaration public Vector4 Yzxw { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Zw Gets an OpenTK.Vector2 with the Z and W components of this instance. Declaration public Vector2 Zw { get; set; } Property Value Type Description Vector2 | Improve this Doc View Source Zwx Gets or sets an OpenTK.Vector3 with the Z, W, and X components of this instance. Declaration public Vector3 Zwx { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Zwxy Gets or sets an OpenTK.Vector4 with the Z, W, X, and Y components of this instance. Declaration public Vector4 Zwxy { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Zwy Gets or sets an OpenTK.Vector3 with the Z, W, and Y components of this instance. Declaration public Vector3 Zwy { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Zwyx Gets or sets an OpenTK.Vector4 with the Z, W, Y, and X components of this instance. Declaration public Vector4 Zwyx { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Zwzy Gets an OpenTK.Vector4 with the Z, W, Z, and Y components of this instance. Declaration public Vector4 Zwzy { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Zx Gets or sets an OpenTK.Vector2 with the Z and X components of this instance. Declaration public Vector2 Zx { get; set; } Property Value Type Description Vector2 | Improve this Doc View Source Zxw Gets or sets an OpenTK.Vector3 with the Z, X, and W components of this instance. Declaration public Vector3 Zxw { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Zxwy Gets or sets an OpenTK.Vector4 with the Z, X, W, and Y components of this instance. Declaration public Vector4 Zxwy { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Zxy Gets or sets an OpenTK.Vector3 with the Z, X, and Y components of this instance. Declaration public Vector3 Zxy { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Zxyw Gets or sets an OpenTK.Vector4 with the Z, X, Y, and Z components of this instance. Declaration public Vector4 Zxyw { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Zy Gets or sets an OpenTK.Vector2 with the Z and Y components of this instance. Declaration public Vector2 Zy { get; set; } Property Value Type Description Vector2 | Improve this Doc View Source Zyw Gets or sets an OpenTK.Vector3 with the Z, Y, and W components of this instance. Declaration public Vector3 Zyw { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Zywx Gets or sets an OpenTK.Vector4 with the Z, Y, W, and X components of this instance. Declaration public Vector4 Zywx { get; set; } Property Value Type Description Vector4 | Improve this Doc View Source Zyx Gets or sets an OpenTK.Vector3 with the Z, Y, and X components of this instance. Declaration public Vector3 Zyx { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Zyxw Gets or sets an OpenTK.Vector4 with the Z, Y, X, and W components of this instance. Declaration public Vector4 Zyxw { get; set; } Property Value Type Description Vector4 Methods | Improve this Doc View Source Add(Vector4) Add the Vector passed as parameter to this instance. Declaration [CLSCompliant(false)] [Obsolete(\"Use static Add() method instead.\")] public void Add(Vector4 right) Parameters Type Name Description Vector4 right Right operand. This parameter is only read from. | Improve this Doc View Source Add(Vector4, Vector4) Adds two vectors. Declaration public static Vector4 Add(Vector4 a, Vector4 b) Parameters Type Name Description Vector4 a Left operand. Vector4 b Right operand. Returns Type Description Vector4 Result of operation. | Improve this Doc View Source Add(ref Vector4) Add the Vector passed as parameter to this instance. Declaration [CLSCompliant(false)] [Obsolete(\"Use static Add() method instead.\")] public void Add(ref Vector4 right) Parameters Type Name Description Vector4 right Right operand. This parameter is only read from. | Improve this Doc View Source Add(ref Vector4, ref Vector4, out Vector4) Adds two vectors. Declaration public static void Add(ref Vector4 a, ref Vector4 b, out Vector4 result) Parameters Type Name Description Vector4 a Left operand. Vector4 b Right operand. Vector4 result Result of operation. | Improve this Doc View Source BaryCentric(Vector4, Vector4, Vector4, Single, Single) Interpolate 3 Vectors using Barycentric coordinates Declaration public static Vector4 BaryCentric(Vector4 a, Vector4 b, Vector4 c, float u, float v) Parameters Type Name Description Vector4 a First input Vector Vector4 b Second input Vector Vector4 c Third input Vector System.Single u First Barycentric Coordinate System.Single v Second Barycentric Coordinate Returns Type Description Vector4 a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise | Improve this Doc View Source BaryCentric(ref Vector4, ref Vector4, ref Vector4, Single, Single, out Vector4) Interpolate 3 Vectors using Barycentric coordinates Declaration public static void BaryCentric(ref Vector4 a, ref Vector4 b, ref Vector4 c, float u, float v, out Vector4 result) Parameters Type Name Description Vector4 a First input Vector. Vector4 b Second input Vector. Vector4 c Third input Vector. System.Single u First Barycentric Coordinate. System.Single v Second Barycentric Coordinate. Vector4 result Output Vector. a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise | Improve this Doc View Source Clamp(Vector4, Vector4, Vector4) Clamp a vector to the given minimum and maximum vectors Declaration public static Vector4 Clamp(Vector4 vec, Vector4 min, Vector4 max) Parameters Type Name Description Vector4 vec Input vector Vector4 min Minimum vector Vector4 max Maximum vector Returns Type Description Vector4 The clamped vector | Improve this Doc View Source Clamp(ref Vector4, ref Vector4, ref Vector4, out Vector4) Clamp a vector to the given minimum and maximum vectors Declaration public static void Clamp(ref Vector4 vec, ref Vector4 min, ref Vector4 max, out Vector4 result) Parameters Type Name Description Vector4 vec Input vector Vector4 min Minimum vector Vector4 max Maximum vector Vector4 result The clamped vector | Improve this Doc View Source Div(Vector4, Single) Divide a vector by a scalar Declaration public static Vector4 Div(Vector4 a, float f) Parameters Type Name Description Vector4 a Vector operand System.Single f Scalar operand Returns Type Description Vector4 Result of the division | Improve this Doc View Source Div(ref Vector4, Single, out Vector4) Divide a vector by a scalar Declaration public static void Div(ref Vector4 a, float f, out Vector4 result) Parameters Type Name Description Vector4 a Vector operand System.Single f Scalar operand Vector4 result Result of the division | Improve this Doc View Source Div(Single) Divide this instance by a scalar. Declaration [Obsolete(\"Use static Divide() method instead.\")] public void Div(float f) Parameters Type Name Description System.Single f Scalar operand. | Improve this Doc View Source Divide(Vector4, Vector4) Divides a vector by the components of a vector (scale). Declaration public static Vector4 Divide(Vector4 vector, Vector4 scale) Parameters Type Name Description Vector4 vector Left operand. Vector4 scale Right operand. Returns Type Description Vector4 Result of the operation. | Improve this Doc View Source Divide(Vector4, Single) Divides a vector by a scalar. Declaration public static Vector4 Divide(Vector4 vector, float scale) Parameters Type Name Description Vector4 vector Left operand. System.Single scale Right operand. Returns Type Description Vector4 Result of the operation. | Improve this Doc View Source Divide(ref Vector4, ref Vector4, out Vector4) Divide a vector by the components of a vector (scale). Declaration public static void Divide(ref Vector4 vector, ref Vector4 scale, out Vector4 result) Parameters Type Name Description Vector4 vector Left operand. Vector4 scale Right operand. Vector4 result Result of the operation. | Improve this Doc View Source Divide(ref Vector4, Single, out Vector4) Divides a vector by a scalar. Declaration public static void Divide(ref Vector4 vector, float scale, out Vector4 result) Parameters Type Name Description Vector4 vector Left operand. System.Single scale Right operand. Vector4 result Result of the operation. | Improve this Doc View Source Dot(Vector4, Vector4) Calculate the dot product of two vectors Declaration public static float Dot(Vector4 left, Vector4 right) Parameters Type Name Description Vector4 left First operand Vector4 right Second operand Returns Type Description System.Single The dot product of the two inputs | Improve this Doc View Source Dot(ref Vector4, ref Vector4, out Single) Calculate the dot product of two vectors Declaration public static void Dot(ref Vector4 left, ref Vector4 right, out float result) Parameters Type Name Description Vector4 left First operand Vector4 right Second operand System.Single result The dot product of the two inputs | Improve this Doc View Source Equals(Vector4) Indicates whether the current vector is equal to another vector. Declaration public bool Equals(Vector4 other) Parameters Type Name Description Vector4 other A vector to compare with this vector. Returns Type Description System.Boolean true if the current vector is equal to the vector parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare to. Returns Type Description System.Boolean True if the instances are equal; false otherwise. Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Returns the hashcode for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A System.Int32 containing the unique hashcode for this instance. Overrides System.ValueType.GetHashCode() | Improve this Doc View Source Lerp(Vector4, Vector4, Single) Returns a new Vector that is the linear blend of the 2 given Vectors Declaration public static Vector4 Lerp(Vector4 a, Vector4 b, float blend) Parameters Type Name Description Vector4 a First input vector Vector4 b Second input vector System.Single blend The blend factor. a when blend=0, b when blend=1. Returns Type Description Vector4 a when blend=0, b when blend=1, and a linear combination otherwise | Improve this Doc View Source Lerp(ref Vector4, ref Vector4, Single, out Vector4) Returns a new Vector that is the linear blend of the 2 given Vectors Declaration public static void Lerp(ref Vector4 a, ref Vector4 b, float blend, out Vector4 result) Parameters Type Name Description Vector4 a First input vector Vector4 b Second input vector System.Single blend The blend factor. a when blend=0, b when blend=1. Vector4 result a when blend=0, b when blend=1, and a linear combination otherwise | Improve this Doc View Source Max(Vector4, Vector4) Calculate the component-wise maximum of two vectors Declaration public static Vector4 Max(Vector4 a, Vector4 b) Parameters Type Name Description Vector4 a First operand Vector4 b Second operand Returns Type Description Vector4 The component-wise maximum | Improve this Doc View Source Max(ref Vector4, ref Vector4, out Vector4) Calculate the component-wise maximum of two vectors Declaration public static void Max(ref Vector4 a, ref Vector4 b, out Vector4 result) Parameters Type Name Description Vector4 a First operand Vector4 b Second operand Vector4 result The component-wise maximum | Improve this Doc View Source Min(Vector4, Vector4) Calculate the component-wise minimum of two vectors Declaration public static Vector4 Min(Vector4 a, Vector4 b) Parameters Type Name Description Vector4 a First operand Vector4 b Second operand Returns Type Description Vector4 The component-wise minimum | Improve this Doc View Source Min(ref Vector4, ref Vector4, out Vector4) Calculate the component-wise minimum of two vectors Declaration public static void Min(ref Vector4 a, ref Vector4 b, out Vector4 result) Parameters Type Name Description Vector4 a First operand Vector4 b Second operand Vector4 result The component-wise minimum | Improve this Doc View Source Mult(Vector4, Single) Multiply a vector and a scalar Declaration public static Vector4 Mult(Vector4 a, float f) Parameters Type Name Description Vector4 a Vector operand System.Single f Scalar operand Returns Type Description Vector4 Result of the multiplication | Improve this Doc View Source Mult(ref Vector4, Single, out Vector4) Multiply a vector and a scalar Declaration public static void Mult(ref Vector4 a, float f, out Vector4 result) Parameters Type Name Description Vector4 a Vector operand System.Single f Scalar operand Vector4 result Result of the multiplication | Improve this Doc View Source Mult(Single) Multiply this instance by a scalar. Declaration [Obsolete(\"Use static Multiply() method instead.\")] public void Mult(float f) Parameters Type Name Description System.Single f Scalar operand. | Improve this Doc View Source Multiply(Vector4, Vector4) Multiplies a vector by the components a vector (scale). Declaration public static Vector4 Multiply(Vector4 vector, Vector4 scale) Parameters Type Name Description Vector4 vector Left operand. Vector4 scale Right operand. Returns Type Description Vector4 Result of the operation. | Improve this Doc View Source Multiply(Vector4, Single) Multiplies a vector by a scalar. Declaration public static Vector4 Multiply(Vector4 vector, float scale) Parameters Type Name Description Vector4 vector Left operand. System.Single scale Right operand. Returns Type Description Vector4 Result of the operation. | Improve this Doc View Source Multiply(ref Vector4, ref Vector4, out Vector4) Multiplies a vector by the components of a vector (scale). Declaration public static void Multiply(ref Vector4 vector, ref Vector4 scale, out Vector4 result) Parameters Type Name Description Vector4 vector Left operand. Vector4 scale Right operand. Vector4 result Result of the operation. | Improve this Doc View Source Multiply(ref Vector4, Single, out Vector4) Multiplies a vector by a scalar. Declaration public static void Multiply(ref Vector4 vector, float scale, out Vector4 result) Parameters Type Name Description Vector4 vector Left operand. System.Single scale Right operand. Vector4 result Result of the operation. | Improve this Doc View Source Normalize() Scales the Vector4 to unit length. Declaration public void Normalize() | Improve this Doc View Source Normalize(Vector4) Scale a vector to unit length Declaration public static Vector4 Normalize(Vector4 vec) Parameters Type Name Description Vector4 vec The input vector Returns Type Description Vector4 The normalized vector | Improve this Doc View Source Normalize(ref Vector4, out Vector4) Scale a vector to unit length Declaration public static void Normalize(ref Vector4 vec, out Vector4 result) Parameters Type Name Description Vector4 vec The input vector Vector4 result The normalized vector | Improve this Doc View Source Normalized() Returns a copy of the Vector4 scaled to unit length. Declaration public Vector4 Normalized() Returns Type Description Vector4 | Improve this Doc View Source NormalizeFast() Scales the Vector4 to approximately unit length. Declaration public void NormalizeFast() | Improve this Doc View Source NormalizeFast(Vector4) Scale a vector to approximately unit length Declaration public static Vector4 NormalizeFast(Vector4 vec) Parameters Type Name Description Vector4 vec The input vector Returns Type Description Vector4 The normalized vector | Improve this Doc View Source NormalizeFast(ref Vector4, out Vector4) Scale a vector to approximately unit length Declaration public static void NormalizeFast(ref Vector4 vec, out Vector4 result) Parameters Type Name Description Vector4 vec The input vector Vector4 result The normalized vector | Improve this Doc View Source Scale(Vector4) Scales this instance by the given parameter. Declaration [CLSCompliant(false)] [Obsolete(\"Use static Multiply() method instead.\")] public void Scale(Vector4 scale) Parameters Type Name Description Vector4 scale The scaling of the individual components. | Improve this Doc View Source Scale(ref Vector4) Scales this instance by the given parameter. Declaration [CLSCompliant(false)] [Obsolete(\"Use static Multiply() method instead.\")] public void Scale(ref Vector4 scale) Parameters Type Name Description Vector4 scale The scaling of the individual components. | Improve this Doc View Source Scale(Single, Single, Single, Single) Scales the current Vector4 by the given amounts. Declaration [Obsolete(\"Use static Multiply() method instead.\")] public void Scale(float sx, float sy, float sz, float sw) Parameters Type Name Description System.Single sx The scale of the X component. System.Single sy The scale of the Y component. System.Single sz The scale of the Z component. System.Single sw The scale of the Z component. | Improve this Doc View Source Sub(Vector4) Subtract the Vector passed as parameter from this instance. Declaration [CLSCompliant(false)] [Obsolete(\"Use static Subtract() method instead.\")] public void Sub(Vector4 right) Parameters Type Name Description Vector4 right Right operand. This parameter is only read from. | Improve this Doc View Source Sub(Vector4, Vector4) Subtract one Vector from another Declaration public static Vector4 Sub(Vector4 a, Vector4 b) Parameters Type Name Description Vector4 a First operand Vector4 b Second operand Returns Type Description Vector4 Result of subtraction | Improve this Doc View Source Sub(ref Vector4) Subtract the Vector passed as parameter from this instance. Declaration [CLSCompliant(false)] [Obsolete(\"Use static Subtract() method instead.\")] public void Sub(ref Vector4 right) Parameters Type Name Description Vector4 right Right operand. This parameter is only read from. | Improve this Doc View Source Sub(ref Vector4, ref Vector4, out Vector4) Subtract one Vector from another Declaration public static void Sub(ref Vector4 a, ref Vector4 b, out Vector4 result) Parameters Type Name Description Vector4 a First operand Vector4 b Second operand Vector4 result Result of subtraction | Improve this Doc View Source Subtract(Vector4, Vector4) Subtract one Vector from another Declaration public static Vector4 Subtract(Vector4 a, Vector4 b) Parameters Type Name Description Vector4 a First operand Vector4 b Second operand Returns Type Description Vector4 Result of subtraction | Improve this Doc View Source Subtract(ref Vector4, ref Vector4, out Vector4) Subtract one Vector from another Declaration public static void Subtract(ref Vector4 a, ref Vector4 b, out Vector4 result) Parameters Type Name Description Vector4 a First operand Vector4 b Second operand Vector4 result Result of subtraction | Improve this Doc View Source ToString() Returns a System.String that represents the current Vector4. Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() | Improve this Doc View Source Transform(Matrix4, Vector4) Transform a Vector by the given Matrix using right-handed notation Declaration public static Vector4 Transform(Matrix4 mat, Vector4 vec) Parameters Type Name Description Matrix4 mat The desired transformation Vector4 vec The vector to transform Returns Type Description Vector4 | Improve this Doc View Source Transform(ref Matrix4, ref Vector4, out Vector4) Transform a Vector by the given Matrix using right-handed notation Declaration public static void Transform(ref Matrix4 mat, ref Vector4 vec, out Vector4 result) Parameters Type Name Description Matrix4 mat The desired transformation Vector4 vec The vector to transform Vector4 result The transformed vector | Improve this Doc View Source Transform(Vector4, Matrix4) Transform a Vector by the given Matrix Declaration public static Vector4 Transform(Vector4 vec, Matrix4 mat) Parameters Type Name Description Vector4 vec The vector to transform Matrix4 mat The desired transformation Returns Type Description Vector4 The transformed vector | Improve this Doc View Source Transform(Vector4, Quaternion) Transforms a vector by a quaternion rotation. Declaration public static Vector4 Transform(Vector4 vec, Quaternion quat) Parameters Type Name Description Vector4 vec The vector to transform. Quaternion quat The quaternion to rotate the vector by. Returns Type Description Vector4 The result of the operation. | Improve this Doc View Source Transform(ref Vector4, ref Matrix4, out Vector4) Transform a Vector by the given Matrix Declaration public static void Transform(ref Vector4 vec, ref Matrix4 mat, out Vector4 result) Parameters Type Name Description Vector4 vec The vector to transform Matrix4 mat The desired transformation Vector4 result The transformed vector | Improve this Doc View Source Transform(ref Vector4, ref Quaternion, out Vector4) Transforms a vector by a quaternion rotation. Declaration public static void Transform(ref Vector4 vec, ref Quaternion quat, out Vector4 result) Parameters Type Name Description Vector4 vec The vector to transform. Quaternion quat The quaternion to rotate the vector by. Vector4 result The result of the operation. Operators | Improve this Doc View Source Addition(Vector4, Vector4) Adds two instances. Declaration public static Vector4 operator +(Vector4 left, Vector4 right) Parameters Type Name Description Vector4 left The first instance. Vector4 right The second instance. Returns Type Description Vector4 The result of the calculation. | Improve this Doc View Source Division(Vector4, Single) Divides an instance by a scalar. Declaration public static Vector4 operator /(Vector4 vec, float scale) Parameters Type Name Description Vector4 vec The instance. System.Single scale The scalar. Returns Type Description Vector4 The result of the calculation. | Improve this Doc View Source Equality(Vector4, Vector4) Compares two instances for equality. Declaration public static bool operator ==(Vector4 left, Vector4 right) Parameters Type Name Description Vector4 left The first instance. Vector4 right The second instance. Returns Type Description System.Boolean True, if left equals right; false otherwise. | Improve this Doc View Source Explicit(Vector4 to IntPtr) Returns a pointer to the first element of the specified instance. Declaration public static explicit operator IntPtr(Vector4 v) Parameters Type Name Description Vector4 v The instance. Returns Type Description System.IntPtr A pointer to the first element of v. | Improve this Doc View Source Explicit(Vector4 to Single*) Returns a pointer to the first element of the specified instance. Declaration [CLSCompliant(false)] public static explicit operator float *(Vector4 v) Parameters Type Name Description Vector4 v The instance. Returns Type Description System.Single * A pointer to the first element of v. | Improve this Doc View Source Inequality(Vector4, Vector4) Compares two instances for inequality. Declaration public static bool operator !=(Vector4 left, Vector4 right) Parameters Type Name Description Vector4 left The first instance. Vector4 right The second instance. Returns Type Description System.Boolean True, if left does not equa lright; false otherwise. | Improve this Doc View Source Multiply(Matrix4, Vector4) Transform a Vector by the given Matrix using right-handed notation Declaration public static Vector4 operator *(Matrix4 mat, Vector4 vec) Parameters Type Name Description Matrix4 mat The desired transformation Vector4 vec The vector to transform Returns Type Description Vector4 The transformed vector | Improve this Doc View Source Multiply(Quaternion, Vector4) Transforms a vector by a quaternion rotation. Declaration public static Vector4 operator *(Quaternion quat, Vector4 vec) Parameters Type Name Description Quaternion quat The quaternion to rotate the vector by. Vector4 vec The vector to transform. Returns Type Description Vector4 The transformed vector | Improve this Doc View Source Multiply(Vector4, Matrix4) Transform a Vector by the given Matrix. Declaration public static Vector4 operator *(Vector4 vec, Matrix4 mat) Parameters Type Name Description Vector4 vec The vector to transform Matrix4 mat The desired transformation Returns Type Description Vector4 The transformed vector | Improve this Doc View Source Multiply(Vector4, Vector4) Component-wise multiplication between the specified instance by a scale vector. Declaration public static Vector4 operator *(Vector4 vec, Vector4 scale) Parameters Type Name Description Vector4 vec Right operand. Vector4 scale Left operand. Returns Type Description Vector4 Result of multiplication. | Improve this Doc View Source Multiply(Vector4, Single) Multiplies an instance by a scalar. Declaration public static Vector4 operator *(Vector4 vec, float scale) Parameters Type Name Description Vector4 vec The instance. System.Single scale The scalar. Returns Type Description Vector4 The result of the calculation. | Improve this Doc View Source Multiply(Single, Vector4) Multiplies an instance by a scalar. Declaration public static Vector4 operator *(float scale, Vector4 vec) Parameters Type Name Description System.Single scale The scalar. Vector4 vec The instance. Returns Type Description Vector4 The result of the calculation. | Improve this Doc View Source Subtraction(Vector4, Vector4) Subtracts two instances. Declaration public static Vector4 operator -(Vector4 left, Vector4 right) Parameters Type Name Description Vector4 left The first instance. Vector4 right The second instance. Returns Type Description Vector4 The result of the calculation. | Improve this Doc View Source UnaryNegation(Vector4) Negates an instance. Declaration public static Vector4 operator -(Vector4 vec) Parameters Type Name Description Vector4 vec The instance. Returns Type Description Vector4 The result of the calculation. Implements System.IEquatable<T>"
  },
  "api/AGS.API.Vector3.html": {
    "href": "api/AGS.API.Vector3.html",
    "title": "Struct Vector3 | MonoAGS Documentation",
    "keywords": "Struct Vector3 Represents a 3D vector using three single-precision floating-point numbers. Implements System.IEquatable < Vector3 > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : AGS.API Assembly : AGS.API.dll Syntax public struct Vector3 : IEquatable<Vector3> Remarks The Vector3 structure is suitable for interoperation with unmanaged code requiring three consecutive floats. Constructors | Improve this Doc View Source Vector3(Vector2) Constructs a new Vector3 from the given Vector2. Declaration public Vector3(Vector2 v) Parameters Type Name Description Vector2 v The Vector2 to copy components from. | Improve this Doc View Source Vector3(Vector3) Constructs a new Vector3 from the given Vector3. Declaration public Vector3(Vector3 v) Parameters Type Name Description Vector3 v The Vector3 to copy components from. | Improve this Doc View Source Vector3(Vector4) Constructs a new Vector3 from the given Vector4. Declaration public Vector3(Vector4 v) Parameters Type Name Description Vector4 v The Vector4 to copy components from. | Improve this Doc View Source Vector3(Single) Constructs a new instance. Declaration public Vector3(float value) Parameters Type Name Description System.Single value The value that will initialize this instance. | Improve this Doc View Source Vector3(Single, Single, Single) Constructs a new Vector3. Declaration public Vector3(float x, float y, float z) Parameters Type Name Description System.Single x The x component of the Vector3. System.Single y The y component of the Vector3. System.Single z The z component of the Vector3. Fields | Improve this Doc View Source One Defines an instance with all components set to 1. Declaration public static readonly Vector3 One Field Value Type Description Vector3 | Improve this Doc View Source SizeInBytes Defines the size of the Vector3 struct in bytes. Declaration public static readonly int SizeInBytes Field Value Type Description System.Int32 | Improve this Doc View Source UnitX Defines a unit-length Vector3 that points towards the X-axis. Declaration public static readonly Vector3 UnitX Field Value Type Description Vector3 | Improve this Doc View Source UnitY Defines a unit-length Vector3 that points towards the Y-axis. Declaration public static readonly Vector3 UnitY Field Value Type Description Vector3 | Improve this Doc View Source UnitZ /// Defines a unit-length Vector3 that points towards the Z-axis. Declaration public static readonly Vector3 UnitZ Field Value Type Description Vector3 | Improve this Doc View Source X The X component of the Vector3. Declaration public float X Field Value Type Description System.Single | Improve this Doc View Source Y The Y component of the Vector3. Declaration public float Y Field Value Type Description System.Single | Improve this Doc View Source Z The Z component of the Vector3. Declaration public float Z Field Value Type Description System.Single | Improve this Doc View Source Zero Defines a zero-length Vector3. Declaration public static readonly Vector3 Zero Field Value Type Description Vector3 Properties | Improve this Doc View Source Item[Int32] Gets or sets the value at the index of the Vector. Declaration public float this[int index] { get; set; } Parameters Type Name Description System.Int32 index Property Value Type Description System.Single | Improve this Doc View Source Length Gets the length (magnitude) of the vector. Declaration public float Length { get; } Property Value Type Description System.Single See Also LengthSquared | Improve this Doc View Source LengthFast Gets an approximation of the vector length (magnitude). Declaration public float LengthFast { get; } Property Value Type Description System.Single Remarks This property uses an approximation of the square root function to calculate vector magnitude, with an upper error bound of 0.001. See Also LengthSquared | Improve this Doc View Source LengthSquared Gets the square of the vector length (magnitude). Declaration public float LengthSquared { get; } Property Value Type Description System.Single Remarks This property avoids the costly square root operation required by the Length property. This makes it more suitable for comparisons. See Also LengthFast | Improve this Doc View Source Xy Gets or sets an OpenTK.Vector2 with the X and Y components of this instance. Declaration public Vector2 Xy { get; set; } Property Value Type Description Vector2 | Improve this Doc View Source Xz Gets or sets an OpenTK.Vector2 with the X and Z components of this instance. Declaration public Vector2 Xz { get; set; } Property Value Type Description Vector2 | Improve this Doc View Source Xzy Gets or sets an OpenTK.Vector3 with the X, Z, and Y components of this instance. Declaration public Vector3 Xzy { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Yx Gets or sets an OpenTK.Vector2 with the Y and X components of this instance. Declaration public Vector2 Yx { get; set; } Property Value Type Description Vector2 | Improve this Doc View Source Yxz Gets or sets an OpenTK.Vector3 with the Y, X, and Z components of this instance. Declaration public Vector3 Yxz { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Yz Gets or sets an OpenTK.Vector2 with the Y and Z components of this instance. Declaration public Vector2 Yz { get; set; } Property Value Type Description Vector2 | Improve this Doc View Source Yzx Gets or sets an OpenTK.Vector3 with the Y, Z, and X components of this instance. Declaration public Vector3 Yzx { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Zx Gets or sets an OpenTK.Vector2 with the Z and X components of this instance. Declaration public Vector2 Zx { get; set; } Property Value Type Description Vector2 | Improve this Doc View Source Zxy Gets or sets an OpenTK.Vector3 with the Z, X, and Y components of this instance. Declaration public Vector3 Zxy { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Zy Gets or sets an OpenTK.Vector2 with the Z and Y components of this instance. Declaration public Vector2 Zy { get; set; } Property Value Type Description Vector2 | Improve this Doc View Source Zyx Gets or sets an OpenTK.Vector3 with the Z, Y, and X components of this instance. Declaration public Vector3 Zyx { get; set; } Property Value Type Description Vector3 Methods | Improve this Doc View Source Add(Vector3) Add the Vector passed as parameter to this instance. Declaration [CLSCompliant(false)] [Obsolete(\"Use static Add() method instead.\")] public void Add(Vector3 right) Parameters Type Name Description Vector3 right Right operand. This parameter is only read from. | Improve this Doc View Source Add(Vector3, Vector3) Adds two vectors. Declaration public static Vector3 Add(Vector3 a, Vector3 b) Parameters Type Name Description Vector3 a Left operand. Vector3 b Right operand. Returns Type Description Vector3 Result of operation. | Improve this Doc View Source Add(ref Vector3) Add the Vector passed as parameter to this instance. Declaration [CLSCompliant(false)] [Obsolete(\"Use static Add() method instead.\")] public void Add(ref Vector3 right) Parameters Type Name Description Vector3 right Right operand. This parameter is only read from. | Improve this Doc View Source Add(ref Vector3, ref Vector3, out Vector3) Adds two vectors. Declaration public static void Add(ref Vector3 a, ref Vector3 b, out Vector3 result) Parameters Type Name Description Vector3 a Left operand. Vector3 b Right operand. Vector3 result Result of operation. | Improve this Doc View Source BaryCentric(Vector3, Vector3, Vector3, Single, Single) Interpolate 3 Vectors using Barycentric coordinates Declaration public static Vector3 BaryCentric(Vector3 a, Vector3 b, Vector3 c, float u, float v) Parameters Type Name Description Vector3 a First input Vector Vector3 b Second input Vector Vector3 c Third input Vector System.Single u First Barycentric Coordinate System.Single v Second Barycentric Coordinate Returns Type Description Vector3 a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise | Improve this Doc View Source BaryCentric(ref Vector3, ref Vector3, ref Vector3, Single, Single, out Vector3) Interpolate 3 Vectors using Barycentric coordinates Declaration public static void BaryCentric(ref Vector3 a, ref Vector3 b, ref Vector3 c, float u, float v, out Vector3 result) Parameters Type Name Description Vector3 a First input Vector. Vector3 b Second input Vector. Vector3 c Third input Vector. System.Single u First Barycentric Coordinate. System.Single v Second Barycentric Coordinate. Vector3 result Output Vector. a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise | Improve this Doc View Source CalculateAngle(Vector3, Vector3) Calculates the angle (in radians) between two vectors. Declaration public static float CalculateAngle(Vector3 first, Vector3 second) Parameters Type Name Description Vector3 first The first vector. Vector3 second The second vector. Returns Type Description System.Single Angle (in radians) between the vectors. Remarks Note that the returned angle is never bigger than the constant Pi. | Improve this Doc View Source CalculateAngle(ref Vector3, ref Vector3, out Single) Calculates the angle (in radians) between two vectors. Declaration public static void CalculateAngle(ref Vector3 first, ref Vector3 second, out float result) Parameters Type Name Description Vector3 first The first vector. Vector3 second The second vector. System.Single result Angle (in radians) between the vectors. Remarks Note that the returned angle is never bigger than the constant Pi. | Improve this Doc View Source Clamp(Vector3, Vector3, Vector3) Clamp a vector to the given minimum and maximum vectors Declaration public static Vector3 Clamp(Vector3 vec, Vector3 min, Vector3 max) Parameters Type Name Description Vector3 vec Input vector Vector3 min Minimum vector Vector3 max Maximum vector Returns Type Description Vector3 The clamped vector | Improve this Doc View Source Clamp(ref Vector3, ref Vector3, ref Vector3, out Vector3) Clamp a vector to the given minimum and maximum vectors Declaration public static void Clamp(ref Vector3 vec, ref Vector3 min, ref Vector3 max, out Vector3 result) Parameters Type Name Description Vector3 vec Input vector Vector3 min Minimum vector Vector3 max Maximum vector Vector3 result The clamped vector | Improve this Doc View Source ComponentMax(Vector3, Vector3) Calculate the component-wise maximum of two vectors Declaration public static Vector3 ComponentMax(Vector3 a, Vector3 b) Parameters Type Name Description Vector3 a First operand Vector3 b Second operand Returns Type Description Vector3 The component-wise maximum | Improve this Doc View Source ComponentMax(ref Vector3, ref Vector3, out Vector3) Calculate the component-wise maximum of two vectors Declaration public static void ComponentMax(ref Vector3 a, ref Vector3 b, out Vector3 result) Parameters Type Name Description Vector3 a First operand Vector3 b Second operand Vector3 result The component-wise maximum | Improve this Doc View Source ComponentMin(Vector3, Vector3) Calculate the component-wise minimum of two vectors Declaration public static Vector3 ComponentMin(Vector3 a, Vector3 b) Parameters Type Name Description Vector3 a First operand Vector3 b Second operand Returns Type Description Vector3 The component-wise minimum | Improve this Doc View Source ComponentMin(ref Vector3, ref Vector3, out Vector3) Calculate the component-wise minimum of two vectors Declaration public static void ComponentMin(ref Vector3 a, ref Vector3 b, out Vector3 result) Parameters Type Name Description Vector3 a First operand Vector3 b Second operand Vector3 result The component-wise minimum | Improve this Doc View Source Cross(Vector3, Vector3) Caclulate the cross (vector) product of two vectors Declaration public static Vector3 Cross(Vector3 left, Vector3 right) Parameters Type Name Description Vector3 left First operand Vector3 right Second operand Returns Type Description Vector3 The cross product of the two inputs | Improve this Doc View Source Cross(ref Vector3, ref Vector3, out Vector3) Caclulate the cross (vector) product of two vectors Declaration public static void Cross(ref Vector3 left, ref Vector3 right, out Vector3 result) Parameters Type Name Description Vector3 left First operand Vector3 right Second operand Vector3 result The cross product of the two inputs | Improve this Doc View Source Div(Vector3, Single) Divide a vector by a scalar Declaration [Obsolete(\"Use static Divide() method instead.\")] public static Vector3 Div(Vector3 a, float f) Parameters Type Name Description Vector3 a Vector operand System.Single f Scalar operand Returns Type Description Vector3 Result of the division | Improve this Doc View Source Div(ref Vector3, Single, out Vector3) Divide a vector by a scalar Declaration [Obsolete(\"Use static Divide() method instead.\")] public static void Div(ref Vector3 a, float f, out Vector3 result) Parameters Type Name Description Vector3 a Vector operand System.Single f Scalar operand Vector3 result Result of the division | Improve this Doc View Source Div(Single) Divide this instance by a scalar. Declaration [Obsolete(\"Use static Divide() method instead.\")] public void Div(float f) Parameters Type Name Description System.Single f Scalar operand. | Improve this Doc View Source Divide(Vector3, Vector3) Divides a vector by the components of a vector (scale). Declaration public static Vector3 Divide(Vector3 vector, Vector3 scale) Parameters Type Name Description Vector3 vector Left operand. Vector3 scale Right operand. Returns Type Description Vector3 Result of the operation. | Improve this Doc View Source Divide(Vector3, Single) Divides a vector by a scalar. Declaration public static Vector3 Divide(Vector3 vector, float scale) Parameters Type Name Description Vector3 vector Left operand. System.Single scale Right operand. Returns Type Description Vector3 Result of the operation. | Improve this Doc View Source Divide(ref Vector3, ref Vector3, out Vector3) Divide a vector by the components of a vector (scale). Declaration public static void Divide(ref Vector3 vector, ref Vector3 scale, out Vector3 result) Parameters Type Name Description Vector3 vector Left operand. Vector3 scale Right operand. Vector3 result Result of the operation. | Improve this Doc View Source Divide(ref Vector3, Single, out Vector3) Divides a vector by a scalar. Declaration public static void Divide(ref Vector3 vector, float scale, out Vector3 result) Parameters Type Name Description Vector3 vector Left operand. System.Single scale Right operand. Vector3 result Result of the operation. | Improve this Doc View Source Dot(Vector3, Vector3) Calculate the dot (scalar) product of two vectors Declaration public static float Dot(Vector3 left, Vector3 right) Parameters Type Name Description Vector3 left First operand Vector3 right Second operand Returns Type Description System.Single The dot product of the two inputs | Improve this Doc View Source Dot(ref Vector3, ref Vector3, out Single) Calculate the dot (scalar) product of two vectors Declaration public static void Dot(ref Vector3 left, ref Vector3 right, out float result) Parameters Type Name Description Vector3 left First operand Vector3 right Second operand System.Single result The dot product of the two inputs | Improve this Doc View Source Equals(Vector3) Indicates whether the current vector is equal to another vector. Declaration public bool Equals(Vector3 other) Parameters Type Name Description Vector3 other A vector to compare with this vector. Returns Type Description System.Boolean true if the current vector is equal to the vector parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare to. Returns Type Description System.Boolean True if the instances are equal; false otherwise. Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Returns the hashcode for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A System.Int32 containing the unique hashcode for this instance. Overrides System.ValueType.GetHashCode() | Improve this Doc View Source Lerp(Vector3, Vector3, Single) Returns a new Vector that is the linear blend of the 2 given Vectors Declaration public static Vector3 Lerp(Vector3 a, Vector3 b, float blend) Parameters Type Name Description Vector3 a First input vector Vector3 b Second input vector System.Single blend The blend factor. a when blend=0, b when blend=1. Returns Type Description Vector3 a when blend=0, b when blend=1, and a linear combination otherwise | Improve this Doc View Source Lerp(ref Vector3, ref Vector3, Single, out Vector3) Returns a new Vector that is the linear blend of the 2 given Vectors Declaration public static void Lerp(ref Vector3 a, ref Vector3 b, float blend, out Vector3 result) Parameters Type Name Description Vector3 a First input vector Vector3 b Second input vector System.Single blend The blend factor. a when blend=0, b when blend=1. Vector3 result a when blend=0, b when blend=1, and a linear combination otherwise | Improve this Doc View Source Max(Vector3, Vector3) Returns the Vector3 with the minimum magnitude Declaration public static Vector3 Max(Vector3 left, Vector3 right) Parameters Type Name Description Vector3 left Left operand Vector3 right Right operand Returns Type Description Vector3 The minimum Vector3 | Improve this Doc View Source Min(Vector3, Vector3) Returns the Vector3 with the minimum magnitude Declaration public static Vector3 Min(Vector3 left, Vector3 right) Parameters Type Name Description Vector3 left Left operand Vector3 right Right operand Returns Type Description Vector3 The minimum Vector3 | Improve this Doc View Source Mult(Vector3, Single) Multiply a vector and a scalar Declaration [Obsolete(\"Use static Multiply() method instead.\")] public static Vector3 Mult(Vector3 a, float f) Parameters Type Name Description Vector3 a Vector operand System.Single f Scalar operand Returns Type Description Vector3 Result of the multiplication | Improve this Doc View Source Mult(ref Vector3, Single, out Vector3) Multiply a vector and a scalar Declaration [Obsolete(\"Use static Multiply() method instead.\")] public static void Mult(ref Vector3 a, float f, out Vector3 result) Parameters Type Name Description Vector3 a Vector operand System.Single f Scalar operand Vector3 result Result of the multiplication | Improve this Doc View Source Mult(Single) Multiply this instance by a scalar. Declaration [Obsolete(\"Use static Multiply() method instead.\")] public void Mult(float f) Parameters Type Name Description System.Single f Scalar operand. | Improve this Doc View Source Multiply(Vector3, Vector3) Multiplies a vector by the components a vector (scale). Declaration public static Vector3 Multiply(Vector3 vector, Vector3 scale) Parameters Type Name Description Vector3 vector Left operand. Vector3 scale Right operand. Returns Type Description Vector3 Result of the operation. | Improve this Doc View Source Multiply(Vector3, Single) Multiplies a vector by a scalar. Declaration public static Vector3 Multiply(Vector3 vector, float scale) Parameters Type Name Description Vector3 vector Left operand. System.Single scale Right operand. Returns Type Description Vector3 Result of the operation. | Improve this Doc View Source Multiply(ref Vector3, ref Vector3, out Vector3) Multiplies a vector by the components of a vector (scale). Declaration public static void Multiply(ref Vector3 vector, ref Vector3 scale, out Vector3 result) Parameters Type Name Description Vector3 vector Left operand. Vector3 scale Right operand. Vector3 result Result of the operation. | Improve this Doc View Source Multiply(ref Vector3, Single, out Vector3) Multiplies a vector by a scalar. Declaration public static void Multiply(ref Vector3 vector, float scale, out Vector3 result) Parameters Type Name Description Vector3 vector Left operand. System.Single scale Right operand. Vector3 result Result of the operation. | Improve this Doc View Source Normalize() Scales the Vector3 to unit length. Declaration public void Normalize() | Improve this Doc View Source Normalize(Vector3) Scale a vector to unit length Declaration public static Vector3 Normalize(Vector3 vec) Parameters Type Name Description Vector3 vec The input vector Returns Type Description Vector3 The normalized vector | Improve this Doc View Source Normalize(ref Vector3, out Vector3) Scale a vector to unit length Declaration public static void Normalize(ref Vector3 vec, out Vector3 result) Parameters Type Name Description Vector3 vec The input vector Vector3 result The normalized vector | Improve this Doc View Source Normalized() Returns a copy of the Vector3 scaled to unit length. Declaration public Vector3 Normalized() Returns Type Description Vector3 | Improve this Doc View Source NormalizeFast() Scales the Vector3 to approximately unit length. Declaration public void NormalizeFast() | Improve this Doc View Source NormalizeFast(Vector3) Scale a vector to approximately unit length Declaration public static Vector3 NormalizeFast(Vector3 vec) Parameters Type Name Description Vector3 vec The input vector Returns Type Description Vector3 The normalized vector | Improve this Doc View Source NormalizeFast(ref Vector3, out Vector3) Scale a vector to approximately unit length Declaration public static void NormalizeFast(ref Vector3 vec, out Vector3 result) Parameters Type Name Description Vector3 vec The input vector Vector3 result The normalized vector | Improve this Doc View Source Project(Vector3, Single, Single, Single, Single, Single, Single, Matrix4) Projects a vector from object space into screen space. Declaration public static Vector3 Project(Vector3 vector, float x, float y, float width, float height, float minZ, float maxZ, Matrix4 worldViewProjection) Parameters Type Name Description Vector3 vector The vector to project. System.Single x The X coordinate of the viewport. System.Single y The Y coordinate of the viewport. System.Single width The width of the viewport. System.Single height The height of the viewport. System.Single minZ The minimum depth of the viewport. System.Single maxZ The maximum depth of the viewport. Matrix4 worldViewProjection The world-view-projection matrix. Returns Type Description Vector3 The vector in screen space. Remarks To project to normalized device coordinates (NDC) use the following parameters: Project(vector, -1, -1, 2, 2, -1, 1, worldViewProjection). | Improve this Doc View Source Scale(Vector3) Scales this instance by the given parameter. Declaration [CLSCompliant(false)] [Obsolete(\"Use static Multiply() method instead.\")] public void Scale(Vector3 scale) Parameters Type Name Description Vector3 scale The scaling of the individual components. | Improve this Doc View Source Scale(ref Vector3) Scales this instance by the given parameter. Declaration [CLSCompliant(false)] [Obsolete(\"Use static Multiply() method instead.\")] public void Scale(ref Vector3 scale) Parameters Type Name Description Vector3 scale The scaling of the individual components. | Improve this Doc View Source Scale(Single, Single, Single) Scales the current Vector3 by the given amounts. Declaration [Obsolete(\"Use static Multiply() method instead.\")] public void Scale(float sx, float sy, float sz) Parameters Type Name Description System.Single sx The scale of the X component. System.Single sy The scale of the Y component. System.Single sz The scale of the Z component. | Improve this Doc View Source Sub(Vector3) Subtract the Vector passed as parameter from this instance. Declaration [CLSCompliant(false)] [Obsolete(\"Use static Subtract() method instead.\")] public void Sub(Vector3 right) Parameters Type Name Description Vector3 right Right operand. This parameter is only read from. | Improve this Doc View Source Sub(Vector3, Vector3) Subtract one Vector from another Declaration [Obsolete(\"Use static Subtract() method instead.\")] public static Vector3 Sub(Vector3 a, Vector3 b) Parameters Type Name Description Vector3 a First operand Vector3 b Second operand Returns Type Description Vector3 Result of subtraction | Improve this Doc View Source Sub(ref Vector3) Subtract the Vector passed as parameter from this instance. Declaration [CLSCompliant(false)] [Obsolete(\"Use static Subtract() method instead.\")] public void Sub(ref Vector3 right) Parameters Type Name Description Vector3 right Right operand. This parameter is only read from. | Improve this Doc View Source Sub(ref Vector3, ref Vector3, out Vector3) Subtract one Vector from another Declaration [Obsolete(\"Use static Subtract() method instead.\")] public static void Sub(ref Vector3 a, ref Vector3 b, out Vector3 result) Parameters Type Name Description Vector3 a First operand Vector3 b Second operand Vector3 result Result of subtraction | Improve this Doc View Source Subtract(Vector3, Vector3) Subtract one Vector from another Declaration public static Vector3 Subtract(Vector3 a, Vector3 b) Parameters Type Name Description Vector3 a First operand Vector3 b Second operand Returns Type Description Vector3 Result of subtraction | Improve this Doc View Source Subtract(ref Vector3, ref Vector3, out Vector3) Subtract one Vector from another Declaration public static void Subtract(ref Vector3 a, ref Vector3 b, out Vector3 result) Parameters Type Name Description Vector3 a First operand Vector3 b Second operand Vector3 result Result of subtraction | Improve this Doc View Source ToString() Returns a System.String that represents the current Vector3. Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() | Improve this Doc View Source Transform(Matrix3, Vector3) Transform a Vector by the given Matrix using right-handed notation Declaration public static Vector3 Transform(Matrix3 mat, Vector3 vec) Parameters Type Name Description Matrix3 mat The desired transformation Vector3 vec The vector to transform Returns Type Description Vector3 | Improve this Doc View Source Transform(ref Matrix3, ref Vector3, out Vector3) Transform a Vector by the given Matrix using right-handed notation Declaration public static void Transform(ref Matrix3 mat, ref Vector3 vec, out Vector3 result) Parameters Type Name Description Matrix3 mat The desired transformation Vector3 vec The vector to transform Vector3 result The transformed vector | Improve this Doc View Source Transform(Vector3, Matrix3) Transform a Vector by the given Matrix Declaration public static Vector3 Transform(Vector3 vec, Matrix3 mat) Parameters Type Name Description Vector3 vec The vector to transform Matrix3 mat The desired transformation Returns Type Description Vector3 The transformed vector | Improve this Doc View Source Transform(Vector3, Matrix4) Transform a direction vector by the given Matrix Assumes the matrix has a bottom row of (0,0,0,1), that is the translation part is ignored. Declaration public static Vector3 Transform(Vector3 vec, Matrix4 mat) Parameters Type Name Description Vector3 vec The vector to transform Matrix4 mat The desired transformation Returns Type Description Vector3 The transformed vector | Improve this Doc View Source Transform(Vector3, Quaternion) Transforms a vector by a quaternion rotation. Declaration public static Vector3 Transform(Vector3 vec, Quaternion quat) Parameters Type Name Description Vector3 vec The vector to transform. Quaternion quat The quaternion to rotate the vector by. Returns Type Description Vector3 The result of the operation. | Improve this Doc View Source Transform(ref Vector3, ref Matrix3, out Vector3) Transform a Vector by the given Matrix Declaration public static void Transform(ref Vector3 vec, ref Matrix3 mat, out Vector3 result) Parameters Type Name Description Vector3 vec The vector to transform Matrix3 mat The desired transformation Vector3 result The transformed vector | Improve this Doc View Source Transform(ref Vector3, ref Matrix4, out Vector3) Declaration public static void Transform(ref Vector3 vec, ref Matrix4 mat, out Vector3 result) Parameters Type Name Description Vector3 vec Matrix4 mat Vector3 result | Improve this Doc View Source Transform(ref Vector3, ref Quaternion, out Vector3) Transforms a vector by a quaternion rotation. Declaration public static void Transform(ref Vector3 vec, ref Quaternion quat, out Vector3 result) Parameters Type Name Description Vector3 vec The vector to transform. Quaternion quat The quaternion to rotate the vector by. Vector3 result The result of the operation. | Improve this Doc View Source TransformNormal(Vector3, Matrix4) Transform a Normal by the given Matrix Declaration public static Vector3 TransformNormal(Vector3 norm, Matrix4 mat) Parameters Type Name Description Vector3 norm The normal to transform Matrix4 mat The desired transformation Returns Type Description Vector3 The transformed normal Remarks This calculates the inverse of the given matrix, use TransformNormalInverse if you already have the inverse to avoid this extra calculation | Improve this Doc View Source TransformNormal(ref Vector3, ref Matrix4, out Vector3) Transform a Normal by the given Matrix Declaration public static void TransformNormal(ref Vector3 norm, ref Matrix4 mat, out Vector3 result) Parameters Type Name Description Vector3 norm The normal to transform Matrix4 mat The desired transformation Vector3 result The transformed normal Remarks This calculates the inverse of the given matrix, use TransformNormalInverse if you already have the inverse to avoid this extra calculation | Improve this Doc View Source TransformNormalInverse(Vector3, Matrix4) Transform a Normal by the (transpose of the) given Matrix Declaration public static Vector3 TransformNormalInverse(Vector3 norm, Matrix4 invMat) Parameters Type Name Description Vector3 norm The normal to transform Matrix4 invMat The inverse of the desired transformation Returns Type Description Vector3 The transformed normal Remarks This version doesn't calculate the inverse matrix. Use this version if you already have the inverse of the desired transform to hand | Improve this Doc View Source TransformNormalInverse(ref Vector3, ref Matrix4, out Vector3) Transform a Normal by the (transpose of the) given Matrix Declaration public static void TransformNormalInverse(ref Vector3 norm, ref Matrix4 invMat, out Vector3 result) Parameters Type Name Description Vector3 norm The normal to transform Matrix4 invMat The inverse of the desired transformation Vector3 result The transformed normal Remarks This version doesn't calculate the inverse matrix. Use this version if you already have the inverse of the desired transform to hand | Improve this Doc View Source TransformPerspective(Vector3, Matrix4) Transform a Vector3 by the given Matrix, and project the resulting Vector4 back to a Vector3 Declaration public static Vector3 TransformPerspective(Vector3 vec, Matrix4 mat) Parameters Type Name Description Vector3 vec The vector to transform Matrix4 mat The desired transformation Returns Type Description Vector3 The transformed vector | Improve this Doc View Source TransformPerspective(ref Vector3, ref Matrix4, out Vector3) Transform a Vector3 by the given Matrix, and project the resulting Vector4 back to a Vector3 Declaration public static void TransformPerspective(ref Vector3 vec, ref Matrix4 mat, out Vector3 result) Parameters Type Name Description Vector3 vec The vector to transform Matrix4 mat The desired transformation Vector3 result The transformed vector | Improve this Doc View Source TransformPosition(Vector3, Matrix4) Transform a Position by the given Matrix Declaration public static Vector3 TransformPosition(Vector3 pos, Matrix4 mat) Parameters Type Name Description Vector3 pos The position to transform Matrix4 mat The desired transformation Returns Type Description Vector3 The transformed position | Improve this Doc View Source TransformPosition(ref Vector3, ref Matrix4, out Vector3) Transform a Position by the given Matrix Declaration public static void TransformPosition(ref Vector3 pos, ref Matrix4 mat, out Vector3 result) Parameters Type Name Description Vector3 pos The position to transform Matrix4 mat The desired transformation Vector3 result The transformed position | Improve this Doc View Source TransformVector(Vector3, Matrix4) Transform a direction vector by the given Matrix Assumes the matrix has a bottom row of (0,0,0,1), that is the translation part is ignored. Declaration public static Vector3 TransformVector(Vector3 vec, Matrix4 mat) Parameters Type Name Description Vector3 vec The vector to transform Matrix4 mat The desired transformation Returns Type Description Vector3 The transformed vector | Improve this Doc View Source TransformVector(ref Vector3, ref Matrix4, out Vector3) Transform a direction vector by the given Matrix Assumes the matrix has a bottom row of (0,0,0,1), that is the translation part is ignored. Declaration public static void TransformVector(ref Vector3 vec, ref Matrix4 mat, out Vector3 result) Parameters Type Name Description Vector3 vec The vector to transform Matrix4 mat The desired transformation Vector3 result The transformed vector | Improve this Doc View Source Unproject(Vector3, Single, Single, Single, Single, Single, Single, Matrix4) Projects a vector from screen space into object space. Declaration public static Vector3 Unproject(Vector3 vector, float x, float y, float width, float height, float minZ, float maxZ, Matrix4 inverseWorldViewProjection) Parameters Type Name Description Vector3 vector The vector to project. System.Single x The X coordinate of the viewport. System.Single y The Y coordinate of the viewport. System.Single width The width of the viewport. System.Single height The height of the viewport. System.Single minZ The minimum depth of the viewport. System.Single maxZ The maximum depth of the viewport. Matrix4 inverseWorldViewProjection Returns Type Description Vector3 The vector in object space. Remarks To project from normalized device coordinates (NDC) use the following parameters: Project(vector, -1, -1, 2, 2, -1, 1, inverseWorldViewProjection). Operators | Improve this Doc View Source Addition(Vector3, Vector3) Adds two instances. Declaration public static Vector3 operator +(Vector3 left, Vector3 right) Parameters Type Name Description Vector3 left The first instance. Vector3 right The second instance. Returns Type Description Vector3 The result of the calculation. | Improve this Doc View Source Division(Vector3, Single) Divides an instance by a scalar. Declaration public static Vector3 operator /(Vector3 vec, float scale) Parameters Type Name Description Vector3 vec The instance. System.Single scale The scalar. Returns Type Description Vector3 The result of the calculation. | Improve this Doc View Source Equality(Vector3, Vector3) Compares two instances for equality. Declaration public static bool operator ==(Vector3 left, Vector3 right) Parameters Type Name Description Vector3 left The first instance. Vector3 right The second instance. Returns Type Description System.Boolean True, if left equals right; false otherwise. | Improve this Doc View Source Inequality(Vector3, Vector3) Compares two instances for inequality. Declaration public static bool operator !=(Vector3 left, Vector3 right) Parameters Type Name Description Vector3 left The first instance. Vector3 right The second instance. Returns Type Description System.Boolean True, if left does not equa lright; false otherwise. | Improve this Doc View Source Multiply(Matrix3, Vector3) Transform a Vector by the given Matrix using right-handed notation Declaration public static Vector3 operator *(Matrix3 mat, Vector3 vec) Parameters Type Name Description Matrix3 mat The desired transformation Vector3 vec The vector to transform Returns Type Description Vector3 The transformed vector | Improve this Doc View Source Multiply(Quaternion, Vector3) Transforms a vector by a quaternion rotation. Declaration public static Vector3 operator *(Quaternion quat, Vector3 vec) Parameters Type Name Description Quaternion quat The quaternion to rotate the vector by. Vector3 vec The vector to transform. Returns Type Description Vector3 | Improve this Doc View Source Multiply(Vector3, Matrix3) Transform a Vector by the given Matrix. Declaration public static Vector3 operator *(Vector3 vec, Matrix3 mat) Parameters Type Name Description Vector3 vec The vector to transform Matrix3 mat The desired transformation Returns Type Description Vector3 The transformed vector | Improve this Doc View Source Multiply(Vector3, Vector3) Component-wise multiplication between the specified instance by a scale vector. Declaration public static Vector3 operator *(Vector3 vec, Vector3 scale) Parameters Type Name Description Vector3 vec Right operand. Vector3 scale Left operand. Returns Type Description Vector3 Result of multiplication. | Improve this Doc View Source Multiply(Vector3, Single) Multiplies an instance by a scalar. Declaration public static Vector3 operator *(Vector3 vec, float scale) Parameters Type Name Description Vector3 vec The instance. System.Single scale The scalar. Returns Type Description Vector3 The result of the calculation. | Improve this Doc View Source Multiply(Single, Vector3) Multiplies an instance by a scalar. Declaration public static Vector3 operator *(float scale, Vector3 vec) Parameters Type Name Description System.Single scale The scalar. Vector3 vec The instance. Returns Type Description Vector3 The result of the calculation. | Improve this Doc View Source Subtraction(Vector3, Vector3) Subtracts two instances. Declaration public static Vector3 operator -(Vector3 left, Vector3 right) Parameters Type Name Description Vector3 left The first instance. Vector3 right The second instance. Returns Type Description Vector3 The result of the calculation. | Improve this Doc View Source UnaryNegation(Vector3) Negates an instance. Declaration public static Vector3 operator -(Vector3 vec) Parameters Type Name Description Vector3 vec The instance. Returns Type Description Vector3 The result of the calculation. Implements System.IEquatable<T>"
  },
  "api/AGS.API.Vector2.html": {
    "href": "api/AGS.API.Vector2.html",
    "title": "Struct Vector2 | MonoAGS Documentation",
    "keywords": "Struct Vector2 Represents a 2D vector using two single-precision floating-point numbers. Implements System.IEquatable < Vector2 > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : AGS.API Assembly : AGS.API.dll Syntax public struct Vector2 : IEquatable<Vector2> Remarks The Vector2 structure is suitable for interoperation with unmanaged code requiring two consecutive floats. Constructors | Improve this Doc View Source Vector2(Vector2) Constructs a new Vector2 from the given Vector2. Declaration [Obsolete] public Vector2(Vector2 v) Parameters Type Name Description Vector2 v The Vector2 to copy components from. | Improve this Doc View Source Vector2(Vector3) Constructs a new Vector2 from the given Vector3. Declaration [Obsolete] public Vector2(Vector3 v) Parameters Type Name Description Vector3 v The Vector3 to copy components from. Z is discarded. | Improve this Doc View Source Vector2(Single) Constructs a new instance. Declaration public Vector2(float value) Parameters Type Name Description System.Single value The value that will initialize this instance. | Improve this Doc View Source Vector2(Single, Single) Constructs a new Vector2. Declaration public Vector2(float x, float y) Parameters Type Name Description System.Single x The x coordinate of the net Vector2. System.Single y The y coordinate of the net Vector2. Fields | Improve this Doc View Source One Defines an instance with all components set to 1. Declaration public static readonly Vector2 One Field Value Type Description Vector2 | Improve this Doc View Source SizeInBytes Defines the size of the Vector2 struct in bytes. Declaration public static readonly int SizeInBytes Field Value Type Description System.Int32 | Improve this Doc View Source UnitX Defines a unit-length Vector2 that points towards the X-axis. Declaration public static readonly Vector2 UnitX Field Value Type Description Vector2 | Improve this Doc View Source UnitY Defines a unit-length Vector2 that points towards the Y-axis. Declaration public static readonly Vector2 UnitY Field Value Type Description Vector2 | Improve this Doc View Source X The X component of the Vector2. Declaration public float X Field Value Type Description System.Single | Improve this Doc View Source Y The Y component of the Vector2. Declaration public float Y Field Value Type Description System.Single | Improve this Doc View Source Zero Defines a zero-length Vector2. Declaration public static readonly Vector2 Zero Field Value Type Description Vector2 Properties | Improve this Doc View Source Item[Int32] Gets or sets the value at the index of the Vector. Declaration public float this[int index] { get; set; } Parameters Type Name Description System.Int32 index Property Value Type Description System.Single | Improve this Doc View Source Length Gets the length (magnitude) of the vector. Declaration public float Length { get; } Property Value Type Description System.Single See Also LengthSquared | Improve this Doc View Source LengthFast Gets an approximation of the vector length (magnitude). Declaration public float LengthFast { get; } Property Value Type Description System.Single Remarks This property uses an approximation of the square root function to calculate vector magnitude, with an upper error bound of 0.001. See Also LengthSquared | Improve this Doc View Source LengthSquared Gets the square of the vector length (magnitude). Declaration public float LengthSquared { get; } Property Value Type Description System.Single Remarks This property avoids the costly square root operation required by the Length property. This makes it more suitable for comparisons. See Also LengthFast | Improve this Doc View Source PerpendicularLeft Gets the perpendicular vector on the left side of this vector. Declaration public Vector2 PerpendicularLeft { get; } Property Value Type Description Vector2 | Improve this Doc View Source PerpendicularRight Gets the perpendicular vector on the right side of this vector. Declaration public Vector2 PerpendicularRight { get; } Property Value Type Description Vector2 | Improve this Doc View Source Yx Gets or sets an OpenTK.Vector2 with the Y and X components of this instance. Declaration public Vector2 Yx { get; set; } Property Value Type Description Vector2 Methods | Improve this Doc View Source Add(Vector2) Add the Vector passed as parameter to this instance. Declaration [CLSCompliant(false)] [Obsolete(\"Use static Add() method instead.\")] public void Add(Vector2 right) Parameters Type Name Description Vector2 right Right operand. This parameter is only read from. | Improve this Doc View Source Add(Vector2, Vector2) Adds two vectors. Declaration public static Vector2 Add(Vector2 a, Vector2 b) Parameters Type Name Description Vector2 a Left operand. Vector2 b Right operand. Returns Type Description Vector2 Result of operation. | Improve this Doc View Source Add(ref Vector2) Add the Vector passed as parameter to this instance. Declaration [CLSCompliant(false)] [Obsolete(\"Use static Add() method instead.\")] public void Add(ref Vector2 right) Parameters Type Name Description Vector2 right Right operand. This parameter is only read from. | Improve this Doc View Source Add(ref Vector2, ref Vector2, out Vector2) Adds two vectors. Declaration public static void Add(ref Vector2 a, ref Vector2 b, out Vector2 result) Parameters Type Name Description Vector2 a Left operand. Vector2 b Right operand. Vector2 result Result of operation. | Improve this Doc View Source BaryCentric(Vector2, Vector2, Vector2, Single, Single) Interpolate 3 Vectors using Barycentric coordinates Declaration public static Vector2 BaryCentric(Vector2 a, Vector2 b, Vector2 c, float u, float v) Parameters Type Name Description Vector2 a First input Vector Vector2 b Second input Vector Vector2 c Third input Vector System.Single u First Barycentric Coordinate System.Single v Second Barycentric Coordinate Returns Type Description Vector2 a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise | Improve this Doc View Source BaryCentric(ref Vector2, ref Vector2, ref Vector2, Single, Single, out Vector2) Interpolate 3 Vectors using Barycentric coordinates Declaration public static void BaryCentric(ref Vector2 a, ref Vector2 b, ref Vector2 c, float u, float v, out Vector2 result) Parameters Type Name Description Vector2 a First input Vector. Vector2 b Second input Vector. Vector2 c Third input Vector. System.Single u First Barycentric Coordinate. System.Single v Second Barycentric Coordinate. Vector2 result Output Vector. a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise | Improve this Doc View Source Clamp(Vector2, Vector2, Vector2) Clamp a vector to the given minimum and maximum vectors Declaration public static Vector2 Clamp(Vector2 vec, Vector2 min, Vector2 max) Parameters Type Name Description Vector2 vec Input vector Vector2 min Minimum vector Vector2 max Maximum vector Returns Type Description Vector2 The clamped vector | Improve this Doc View Source Clamp(ref Vector2, ref Vector2, ref Vector2, out Vector2) Clamp a vector to the given minimum and maximum vectors Declaration public static void Clamp(ref Vector2 vec, ref Vector2 min, ref Vector2 max, out Vector2 result) Parameters Type Name Description Vector2 vec Input vector Vector2 min Minimum vector Vector2 max Maximum vector Vector2 result The clamped vector | Improve this Doc View Source ComponentMax(Vector2, Vector2) Calculate the component-wise maximum of two vectors Declaration public static Vector2 ComponentMax(Vector2 a, Vector2 b) Parameters Type Name Description Vector2 a First operand Vector2 b Second operand Returns Type Description Vector2 The component-wise maximum | Improve this Doc View Source ComponentMax(ref Vector2, ref Vector2, out Vector2) Calculate the component-wise maximum of two vectors Declaration public static void ComponentMax(ref Vector2 a, ref Vector2 b, out Vector2 result) Parameters Type Name Description Vector2 a First operand Vector2 b Second operand Vector2 result The component-wise maximum | Improve this Doc View Source ComponentMin(Vector2, Vector2) Calculate the component-wise minimum of two vectors Declaration public static Vector2 ComponentMin(Vector2 a, Vector2 b) Parameters Type Name Description Vector2 a First operand Vector2 b Second operand Returns Type Description Vector2 The component-wise minimum | Improve this Doc View Source ComponentMin(ref Vector2, ref Vector2, out Vector2) Calculate the component-wise minimum of two vectors Declaration public static void ComponentMin(ref Vector2 a, ref Vector2 b, out Vector2 result) Parameters Type Name Description Vector2 a First operand Vector2 b Second operand Vector2 result The component-wise minimum | Improve this Doc View Source Div(Vector2, Single) Divide a vector by a scalar Declaration [Obsolete(\"Use static Divide() method instead.\")] public static Vector2 Div(Vector2 a, float f) Parameters Type Name Description Vector2 a Vector operand System.Single f Scalar operand Returns Type Description Vector2 Result of the division | Improve this Doc View Source Div(ref Vector2, Single, out Vector2) Divide a vector by a scalar Declaration [Obsolete(\"Use static Divide() method instead.\")] public static void Div(ref Vector2 a, float f, out Vector2 result) Parameters Type Name Description Vector2 a Vector operand System.Single f Scalar operand Vector2 result Result of the division | Improve this Doc View Source Div(Single) Divide this instance by a scalar. Declaration [Obsolete(\"Use static Divide() method instead.\")] public void Div(float f) Parameters Type Name Description System.Single f Scalar operand. | Improve this Doc View Source Divide(Vector2, Vector2) Divides a vector by the components of a vector (scale). Declaration public static Vector2 Divide(Vector2 vector, Vector2 scale) Parameters Type Name Description Vector2 vector Left operand. Vector2 scale Right operand. Returns Type Description Vector2 Result of the operation. | Improve this Doc View Source Divide(Vector2, Single) Divides a vector by a scalar. Declaration public static Vector2 Divide(Vector2 vector, float scale) Parameters Type Name Description Vector2 vector Left operand. System.Single scale Right operand. Returns Type Description Vector2 Result of the operation. | Improve this Doc View Source Divide(ref Vector2, ref Vector2, out Vector2) Divide a vector by the components of a vector (scale). Declaration public static void Divide(ref Vector2 vector, ref Vector2 scale, out Vector2 result) Parameters Type Name Description Vector2 vector Left operand. Vector2 scale Right operand. Vector2 result Result of the operation. | Improve this Doc View Source Divide(ref Vector2, Single, out Vector2) Divides a vector by a scalar. Declaration public static void Divide(ref Vector2 vector, float scale, out Vector2 result) Parameters Type Name Description Vector2 vector Left operand. System.Single scale Right operand. Vector2 result Result of the operation. | Improve this Doc View Source Dot(Vector2, Vector2) Calculate the dot (scalar) product of two vectors Declaration public static float Dot(Vector2 left, Vector2 right) Parameters Type Name Description Vector2 left First operand Vector2 right Second operand Returns Type Description System.Single The dot product of the two inputs | Improve this Doc View Source Dot(ref Vector2, ref Vector2, out Single) Calculate the dot (scalar) product of two vectors Declaration public static void Dot(ref Vector2 left, ref Vector2 right, out float result) Parameters Type Name Description Vector2 left First operand Vector2 right Second operand System.Single result The dot product of the two inputs | Improve this Doc View Source Equals(Vector2) Indicates whether the current vector is equal to another vector. Declaration public bool Equals(Vector2 other) Parameters Type Name Description Vector2 other A vector to compare with this vector. Returns Type Description System.Boolean true if the current vector is equal to the vector parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare to. Returns Type Description System.Boolean True if the instances are equal; false otherwise. Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Returns the hashcode for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A System.Int32 containing the unique hashcode for this instance. Overrides System.ValueType.GetHashCode() | Improve this Doc View Source Lerp(Vector2, Vector2, Single) Returns a new Vector that is the linear blend of the 2 given Vectors Declaration public static Vector2 Lerp(Vector2 a, Vector2 b, float blend) Parameters Type Name Description Vector2 a First input vector Vector2 b Second input vector System.Single blend The blend factor. a when blend=0, b when blend=1. Returns Type Description Vector2 a when blend=0, b when blend=1, and a linear combination otherwise | Improve this Doc View Source Lerp(ref Vector2, ref Vector2, Single, out Vector2) Returns a new Vector that is the linear blend of the 2 given Vectors Declaration public static void Lerp(ref Vector2 a, ref Vector2 b, float blend, out Vector2 result) Parameters Type Name Description Vector2 a First input vector Vector2 b Second input vector System.Single blend The blend factor. a when blend=0, b when blend=1. Vector2 result a when blend=0, b when blend=1, and a linear combination otherwise | Improve this Doc View Source Max(Vector2, Vector2) Returns the Vector3 with the minimum magnitude Declaration public static Vector2 Max(Vector2 left, Vector2 right) Parameters Type Name Description Vector2 left Left operand Vector2 right Right operand Returns Type Description Vector2 The minimum Vector3 | Improve this Doc View Source Min(Vector2, Vector2) Returns the Vector3 with the minimum magnitude Declaration public static Vector2 Min(Vector2 left, Vector2 right) Parameters Type Name Description Vector2 left Left operand Vector2 right Right operand Returns Type Description Vector2 The minimum Vector3 | Improve this Doc View Source Mult(Vector2, Single) Multiply a vector and a scalar Declaration [Obsolete(\"Use static Multiply() method instead.\")] public static Vector2 Mult(Vector2 a, float f) Parameters Type Name Description Vector2 a Vector operand System.Single f Scalar operand Returns Type Description Vector2 Result of the multiplication | Improve this Doc View Source Mult(ref Vector2, Single, out Vector2) Multiply a vector and a scalar Declaration [Obsolete(\"Use static Multiply() method instead.\")] public static void Mult(ref Vector2 a, float f, out Vector2 result) Parameters Type Name Description Vector2 a Vector operand System.Single f Scalar operand Vector2 result Result of the multiplication | Improve this Doc View Source Mult(Single) Multiply this instance by a scalar. Declaration [Obsolete(\"Use static Multiply() method instead.\")] public void Mult(float f) Parameters Type Name Description System.Single f Scalar operand. | Improve this Doc View Source Multiply(Vector2, Vector2) Multiplies a vector by the components a vector (scale). Declaration public static Vector2 Multiply(Vector2 vector, Vector2 scale) Parameters Type Name Description Vector2 vector Left operand. Vector2 scale Right operand. Returns Type Description Vector2 Result of the operation. | Improve this Doc View Source Multiply(Vector2, Single) Multiplies a vector by a scalar. Declaration public static Vector2 Multiply(Vector2 vector, float scale) Parameters Type Name Description Vector2 vector Left operand. System.Single scale Right operand. Returns Type Description Vector2 Result of the operation. | Improve this Doc View Source Multiply(ref Vector2, ref Vector2, out Vector2) Multiplies a vector by the components of a vector (scale). Declaration public static void Multiply(ref Vector2 vector, ref Vector2 scale, out Vector2 result) Parameters Type Name Description Vector2 vector Left operand. Vector2 scale Right operand. Vector2 result Result of the operation. | Improve this Doc View Source Multiply(ref Vector2, Single, out Vector2) Multiplies a vector by a scalar. Declaration public static void Multiply(ref Vector2 vector, float scale, out Vector2 result) Parameters Type Name Description Vector2 vector Left operand. System.Single scale Right operand. Vector2 result Result of the operation. | Improve this Doc View Source Normalize() Scales the Vector2 to unit length. Declaration public void Normalize() | Improve this Doc View Source Normalize(Vector2) Scale a vector to unit length Declaration public static Vector2 Normalize(Vector2 vec) Parameters Type Name Description Vector2 vec The input vector Returns Type Description Vector2 The normalized vector | Improve this Doc View Source Normalize(ref Vector2, out Vector2) Scale a vector to unit length Declaration public static void Normalize(ref Vector2 vec, out Vector2 result) Parameters Type Name Description Vector2 vec The input vector Vector2 result The normalized vector | Improve this Doc View Source Normalized() Returns a copy of the Vector2 scaled to unit length. Declaration public Vector2 Normalized() Returns Type Description Vector2 | Improve this Doc View Source NormalizeFast() Scales the Vector2 to approximately unit length. Declaration public void NormalizeFast() | Improve this Doc View Source NormalizeFast(Vector2) Scale a vector to approximately unit length Declaration public static Vector2 NormalizeFast(Vector2 vec) Parameters Type Name Description Vector2 vec The input vector Returns Type Description Vector2 The normalized vector | Improve this Doc View Source NormalizeFast(ref Vector2, out Vector2) Scale a vector to approximately unit length Declaration public static void NormalizeFast(ref Vector2 vec, out Vector2 result) Parameters Type Name Description Vector2 vec The input vector Vector2 result The normalized vector | Improve this Doc View Source PerpDot(Vector2, Vector2) Calculate the perpendicular dot (scalar) product of two vectors Declaration public static float PerpDot(Vector2 left, Vector2 right) Parameters Type Name Description Vector2 left First operand Vector2 right Second operand Returns Type Description System.Single The perpendicular dot product of the two inputs | Improve this Doc View Source PerpDot(ref Vector2, ref Vector2, out Single) Calculate the perpendicular dot (scalar) product of two vectors Declaration public static void PerpDot(ref Vector2 left, ref Vector2 right, out float result) Parameters Type Name Description Vector2 left First operand Vector2 right Second operand System.Single result The perpendicular dot product of the two inputs | Improve this Doc View Source Scale(Vector2) Scales this instance by the given parameter. Declaration [CLSCompliant(false)] [Obsolete(\"Use static Multiply() method instead.\")] public void Scale(Vector2 scale) Parameters Type Name Description Vector2 scale The scaling of the individual components. | Improve this Doc View Source Scale(ref Vector2) Scales this instance by the given parameter. Declaration [CLSCompliant(false)] [Obsolete(\"Use static Multiply() method instead.\")] public void Scale(ref Vector2 scale) Parameters Type Name Description Vector2 scale The scaling of the individual components. | Improve this Doc View Source Scale(Single, Single) Scales the current Vector2 by the given amounts. Declaration [Obsolete(\"Use static Multiply() method instead.\")] public void Scale(float sx, float sy) Parameters Type Name Description System.Single sx The scale of the X component. System.Single sy The scale of the Y component. | Improve this Doc View Source Sub(Vector2) Subtract the Vector passed as parameter from this instance. Declaration [CLSCompliant(false)] [Obsolete(\"Use static Subtract() method instead.\")] public void Sub(Vector2 right) Parameters Type Name Description Vector2 right Right operand. This parameter is only read from. | Improve this Doc View Source Sub(Vector2, Vector2) Subtract one Vector from another Declaration [Obsolete(\"Use static Subtract() method instead.\")] public static Vector2 Sub(Vector2 a, Vector2 b) Parameters Type Name Description Vector2 a First operand Vector2 b Second operand Returns Type Description Vector2 Result of subtraction | Improve this Doc View Source Sub(ref Vector2) Subtract the Vector passed as parameter from this instance. Declaration [CLSCompliant(false)] [Obsolete(\"Use static Subtract() method instead.\")] public void Sub(ref Vector2 right) Parameters Type Name Description Vector2 right Right operand. This parameter is only read from. | Improve this Doc View Source Sub(ref Vector2, ref Vector2, out Vector2) Subtract one Vector from another Declaration [Obsolete(\"Use static Subtract() method instead.\")] public static void Sub(ref Vector2 a, ref Vector2 b, out Vector2 result) Parameters Type Name Description Vector2 a First operand Vector2 b Second operand Vector2 result Result of subtraction | Improve this Doc View Source Subtract(Vector2, Vector2) Subtract one Vector from another Declaration public static Vector2 Subtract(Vector2 a, Vector2 b) Parameters Type Name Description Vector2 a First operand Vector2 b Second operand Returns Type Description Vector2 Result of subtraction | Improve this Doc View Source Subtract(ref Vector2, ref Vector2, out Vector2) Subtract one Vector from another Declaration public static void Subtract(ref Vector2 a, ref Vector2 b, out Vector2 result) Parameters Type Name Description Vector2 a First operand Vector2 b Second operand Vector2 result Result of subtraction | Improve this Doc View Source ToString() Returns a System.String that represents the current Vector2. Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() | Improve this Doc View Source Transform(Vector2, Quaternion) Transforms a vector by a quaternion rotation. Declaration public static Vector2 Transform(Vector2 vec, Quaternion quat) Parameters Type Name Description Vector2 vec The vector to transform. Quaternion quat The quaternion to rotate the vector by. Returns Type Description Vector2 The result of the operation. | Improve this Doc View Source Transform(ref Vector2, ref Quaternion, out Vector2) Transforms a vector by a quaternion rotation. Declaration public static void Transform(ref Vector2 vec, ref Quaternion quat, out Vector2 result) Parameters Type Name Description Vector2 vec The vector to transform. Quaternion quat The quaternion to rotate the vector by. Vector2 result The result of the operation. Operators | Improve this Doc View Source Addition(Vector2, Vector2) Adds the specified instances. Declaration public static Vector2 operator +(Vector2 left, Vector2 right) Parameters Type Name Description Vector2 left Left operand. Vector2 right Right operand. Returns Type Description Vector2 Result of addition. | Improve this Doc View Source Division(Vector2, Single) Divides the specified instance by a scalar. Declaration public static Vector2 operator /(Vector2 vec, float scale) Parameters Type Name Description Vector2 vec Left operand System.Single scale Right operand Returns Type Description Vector2 Result of the division. | Improve this Doc View Source Equality(Vector2, Vector2) Compares the specified instances for equality. Declaration public static bool operator ==(Vector2 left, Vector2 right) Parameters Type Name Description Vector2 left Left operand. Vector2 right Right operand. Returns Type Description System.Boolean True if both instances are equal; false otherwise. | Improve this Doc View Source Inequality(Vector2, Vector2) Compares the specified instances for inequality. Declaration public static bool operator !=(Vector2 left, Vector2 right) Parameters Type Name Description Vector2 left Left operand. Vector2 right Right operand. Returns Type Description System.Boolean True if both instances are not equal; false otherwise. | Improve this Doc View Source Multiply(Vector2, Vector2) Component-wise multiplication between the specified instance by a scale vector. Declaration public static Vector2 operator *(Vector2 vec, Vector2 scale) Parameters Type Name Description Vector2 vec Right operand. Vector2 scale Left operand. Returns Type Description Vector2 Result of multiplication. | Improve this Doc View Source Multiply(Vector2, Single) Multiplies the specified instance by a scalar. Declaration public static Vector2 operator *(Vector2 vec, float scale) Parameters Type Name Description Vector2 vec Left operand. System.Single scale Right operand. Returns Type Description Vector2 Result of multiplication. | Improve this Doc View Source Multiply(Single, Vector2) Multiplies the specified instance by a scalar. Declaration public static Vector2 operator *(float scale, Vector2 vec) Parameters Type Name Description System.Single scale Left operand. Vector2 vec Right operand. Returns Type Description Vector2 Result of multiplication. | Improve this Doc View Source Subtraction(Vector2, Vector2) Subtracts the specified instances. Declaration public static Vector2 operator -(Vector2 left, Vector2 right) Parameters Type Name Description Vector2 left Left operand. Vector2 right Right operand. Returns Type Description Vector2 Result of subtraction. | Improve this Doc View Source UnaryNegation(Vector2) Negates the specified instance. Declaration public static Vector2 operator -(Vector2 vec) Parameters Type Name Description Vector2 vec Operand. Returns Type Description Vector2 Result of negation. Implements System.IEquatable<T>"
  },
  "api/AGS.API.TextureWrap.html": {
    "href": "api/AGS.API.TextureWrap.html",
    "title": "Enum TextureWrap | MonoAGS Documentation",
    "keywords": "Enum TextureWrap How a texture is wrapped to fill an image. ITextureOffsetComponent Namespace : AGS.API Assembly : AGS.API.dll Syntax public enum TextureWrap Fields Name Description Clamp The texture will be stretched if needed to match the image. MirroredRepeat The texture will be tiled in a forwards-backwards-forwards-.. to match the image. Repeat The texture will be tiled by repeating it as needed to match the image."
  },
  "api/AGS.API.TextboxState.html": {
    "href": "api/AGS.API.TextboxState.html",
    "title": "Class TextboxState | MonoAGS Documentation",
    "keywords": "Class TextboxState Represents the state in which the textbox is currently in. Inheritance System.Object TextboxState Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AGS.API Assembly : AGS.API.dll Syntax public class TextboxState Constructors | Improve this Doc View Source TextboxState(String, Int32) Initializes a new instance of the TextboxState class. Declaration public TextboxState(string text, int caretPosition) Parameters Type Name Description System.String text Text. System.Int32 caretPosition Caret position. Properties | Improve this Doc View Source CaretPosition Gets or sets the caret position. Declaration public int CaretPosition { get; set; } Property Value Type Description System.Int32 The caret position. | Improve this Doc View Source Text Gets or sets the text. Declaration public string Text { get; set; } Property Value Type Description System.String The text. See Also IntendedState"
  },
  "api/AGS.API.TextBoxKeyPressingEventArgs.html": {
    "href": "api/AGS.API.TextBoxKeyPressingEventArgs.html",
    "title": "Class TextBoxKeyPressingEventArgs | MonoAGS Documentation",
    "keywords": "Class TextBoxKeyPressingEventArgs Event arguments for when a key is pressed on the textbox. Inheritance System.Object TextBoxKeyPressingEventArgs Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AGS.API Assembly : AGS.API.dll Syntax public class TextBoxKeyPressingEventArgs Constructors | Improve this Doc View Source TextBoxKeyPressingEventArgs(Key, TextboxState) Initializes a new instance of the TextBoxKeyPressingEventArgs class. Declaration public TextBoxKeyPressingEventArgs(Key pressedKey, TextboxState intendedState) Parameters Type Name Description Key pressedKey Pressed key. TextboxState intendedState Intended state. Properties | Improve this Doc View Source IntendedState Gets the state the textbox is intending to move to once the current operation is completed. You can edit this state when receiving an OnPressingKey event to override the result (i.e change the text or caret position). Declaration public TextboxState IntendedState { get; } Property Value Type Description TextboxState The state of the intended. | Improve this Doc View Source PressedKey Gets the pressed key. Declaration public Key PressedKey { get; } Property Value Type Description Key The pressed key. | Improve this Doc View Source ShouldCancel A subscriber of the event can canel processing the key input by setting this property to true. Declaration public bool ShouldCancel { get; set; } Property Value Type Description System.Boolean true if should cancel; otherwise, false ."
  },
  "api/AGS.API.SpriteSheetOrder.html": {
    "href": "api/AGS.API.SpriteSheetOrder.html",
    "title": "Enum SpriteSheetOrder | MonoAGS Documentation",
    "keywords": "Enum SpriteSheetOrder Determines the order in which a sprite sheet is read. Namespace : AGS.API Assembly : AGS.API.dll Syntax public enum SpriteSheetOrder Fields Name Description BottomLeftGoRight BottomLeftGoUp BottomRightGoLeft BottomRightGoUp TopLeftGoDown TopLeftGoRight TopRightGoDown TopRightGoLeft"
  },
  "api/AGS.API.SliderValueEventArgs.html": {
    "href": "api/AGS.API.SliderValueEventArgs.html",
    "title": "Class SliderValueEventArgs | MonoAGS Documentation",
    "keywords": "Class SliderValueEventArgs Event arguments for slider value change. Inheritance System.Object SliderValueEventArgs Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AGS.API Assembly : AGS.API.dll Syntax public class SliderValueEventArgs Constructors | Improve this Doc View Source SliderValueEventArgs(Single) Declaration public SliderValueEventArgs(float value) Parameters Type Name Description System.Single value Properties | Improve this Doc View Source Value Gets the slider's value. Declaration public float Value { get; } Property Value Type Description System.Single The value."
  },
  "api/AGS.API.MathHelper.html": {
    "href": "api/AGS.API.MathHelper.html",
    "title": "Class MathHelper | MonoAGS Documentation",
    "keywords": "Class MathHelper Contains common mathematical functions and constants. Inheritance System.Object MathHelper Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : AGS.API Assembly : AGS.API.dll Syntax public static class MathHelper Fields | Improve this Doc View Source E Defines the value of E as a System.Single . Declaration public const float E = 2.71828175F Field Value Type Description System.Single | Improve this Doc View Source Log10E Defines the base-10 logarithm of E. Declaration public const float Log10E = 0.4342945F Field Value Type Description System.Single | Improve this Doc View Source Log2E Defines the base-2 logarithm of E. Declaration public const float Log2E = 1.442695F Field Value Type Description System.Single | Improve this Doc View Source Pi Defines the value of Pi as a System.Single . Declaration public const float Pi = 3.14159274F Field Value Type Description System.Single | Improve this Doc View Source PiOver2 Defines the value of Pi divided by two as a System.Single . Declaration public const float PiOver2 = 1.57079637F Field Value Type Description System.Single | Improve this Doc View Source PiOver3 Defines the value of Pi divided by three as a System.Single . Declaration public const float PiOver3 = 1.04719758F Field Value Type Description System.Single | Improve this Doc View Source PiOver4 Definesthe value of Pi divided by four as a System.Single . Declaration public const float PiOver4 = 0.7853982F Field Value Type Description System.Single | Improve this Doc View Source PiOver6 Defines the value of Pi divided by six as a System.Single . Declaration public const float PiOver6 = 0.5235988F Field Value Type Description System.Single | Improve this Doc View Source ThreePiOver2 Defines the value of Pi multiplied by 3 and divided by two as a System.Single . Declaration public const float ThreePiOver2 = 4.712389F Field Value Type Description System.Single | Improve this Doc View Source TwoPi Defines the value of Pi multiplied by two as a System.Single . Declaration public const float TwoPi = 6.28318548F Field Value Type Description System.Single Methods | Improve this Doc View Source BinomialCoefficient(Int32, Int32) Calculates the binomial coefficient n above k . Declaration public static long BinomialCoefficient(int n, int k) Parameters Type Name Description System.Int32 n The n. System.Int32 k The k. Returns Type Description System.Int64 n! / (k! * (n - k)!) | Improve this Doc View Source Clamp(Double, Double, Double) Clamps a number between a minimum and a maximum. Declaration public static double Clamp(double n, double min, double max) Parameters Type Name Description System.Double n The number to clamp. System.Double min The minimum allowed value. System.Double max The maximum allowed value. Returns Type Description System.Double min, if n is lower than min; max, if n is higher than max; n otherwise. | Improve this Doc View Source Clamp(Int32, Int32, Int32) Clamps a number between a minimum and a maximum. Declaration public static int Clamp(int n, int min, int max) Parameters Type Name Description System.Int32 n The number to clamp. System.Int32 min The minimum allowed value. System.Int32 max The maximum allowed value. Returns Type Description System.Int32 min, if n is lower than min; max, if n is higher than max; n otherwise. | Improve this Doc View Source Clamp(Single, Single, Single) Clamps a number between a minimum and a maximum. Declaration public static float Clamp(float n, float min, float max) Parameters Type Name Description System.Single n The number to clamp. System.Single min The minimum allowed value. System.Single max The maximum allowed value. Returns Type Description System.Single min, if n is lower than min; max, if n is higher than max; n otherwise. | Improve this Doc View Source DegreesToRadians(Double) Convert degrees to radians Declaration public static double DegreesToRadians(double degrees) Parameters Type Name Description System.Double degrees An angle in degrees Returns Type Description System.Double The angle expressed in radians | Improve this Doc View Source DegreesToRadians(Single) Convert degrees to radians Declaration public static float DegreesToRadians(float degrees) Parameters Type Name Description System.Single degrees An angle in degrees Returns Type Description System.Single The angle expressed in radians | Improve this Doc View Source Factorial(Int32) Calculates the factorial of a given natural number. Declaration public static long Factorial(int n) Parameters Type Name Description System.Int32 n The number. Returns Type Description System.Int64 n! | Improve this Doc View Source InverseSqrtFast(Double) Returns an approximation of the inverse square root of left number. Declaration public static double InverseSqrtFast(double x) Parameters Type Name Description System.Double x A number. Returns Type Description System.Double An approximation of the inverse square root of the specified number, with an upper error bound of 0.001 Remarks This is an improved implementation of the the method known as Carmack's inverse square root which is found in the Quake III source code. This implementation comes from http://www.codemaestro.com/reviews/review00000105.html . For the history of this method, see http://www.beyond3d.com/content/articles/8/ | Improve this Doc View Source InverseSqrtFast(Single) Returns an approximation of the inverse square root of left number. Declaration public static float InverseSqrtFast(float x) Parameters Type Name Description System.Single x A number. Returns Type Description System.Single An approximation of the inverse square root of the specified number, with an upper error bound of 0.001 Remarks This is an improved implementation of the the method known as Carmack's inverse square root which is found in the Quake III source code. This implementation comes from http://www.codemaestro.com/reviews/review00000105.html . For the history of this method, see http://www.beyond3d.com/content/articles/8/ | Improve this Doc View Source NextPowerOfTwo(Double) Returns the next power of two that is larger than the specified number. Declaration public static double NextPowerOfTwo(double n) Parameters Type Name Description System.Double n The specified number. Returns Type Description System.Double The next power of two. | Improve this Doc View Source NextPowerOfTwo(Int32) Returns the next power of two that is larger than the specified number. Declaration public static int NextPowerOfTwo(int n) Parameters Type Name Description System.Int32 n The specified number. Returns Type Description System.Int32 The next power of two. | Improve this Doc View Source NextPowerOfTwo(Int64) Returns the next power of two that is larger than the specified number. Declaration public static long NextPowerOfTwo(long n) Parameters Type Name Description System.Int64 n The specified number. Returns Type Description System.Int64 The next power of two. | Improve this Doc View Source NextPowerOfTwo(Single) Returns the next power of two that is larger than the specified number. Declaration public static float NextPowerOfTwo(float n) Parameters Type Name Description System.Single n The specified number. Returns Type Description System.Single The next power of two. | Improve this Doc View Source RadiansToDegrees(Double) Convert radians to degrees Declaration public static double RadiansToDegrees(double radians) Parameters Type Name Description System.Double radians An angle in radians Returns Type Description System.Double The angle expressed in degrees | Improve this Doc View Source RadiansToDegrees(Single) Convert radians to degrees Declaration public static float RadiansToDegrees(float radians) Parameters Type Name Description System.Single radians An angle in radians Returns Type Description System.Single The angle expressed in degrees | Improve this Doc View Source Swap(ref Double, ref Double) Swaps two double values. Declaration public static void Swap(ref double a, ref double b) Parameters Type Name Description System.Double a The first value. System.Double b The second value. | Improve this Doc View Source Swap(ref Single, ref Single) Swaps two float values. Declaration public static void Swap(ref float a, ref float b) Parameters Type Name Description System.Single a The first value. System.Single b The second value."
  },
  "api/AGS.API.LoopingStyle.html": {
    "href": "api/AGS.API.LoopingStyle.html",
    "title": "Enum LoopingStyle | MonoAGS Documentation",
    "keywords": "Enum LoopingStyle Determines how the animation will run. Namespace : AGS.API Assembly : AGS.API.dll Syntax public enum LoopingStyle Fields Name Description Backwards Will animate the loop backwards, and then start again from the bottom BackwardsForwards Will animate the loop backwards, and then will it will go forwards, and start again Forwards Will animate the loop forwards, and then start again from the top ForwardsBackwards Will animate the loop forwards, and then it will go back, and start again"
  },
  "api/AGS.API.IUIControl.html": {
    "href": "api/AGS.API.IUIControl.html",
    "title": "Interface IUIControl | MonoAGS Documentation",
    "keywords": "Interface IUIControl A UI control is an object which has events like mouse click, to help the user interact with it. A UI control also has a skin component, for customing its look. All other GUIs (buttons, checkboxes, textboxes, etc) are also a UI control. Inherited Members IUIEvents.MouseEnter IUIEvents.MouseLeave IUIEvents.MouseMove IUIEvents.MouseClicked IUIEvents.MouseDoubleClicked IUIEvents.MouseDown IUIEvents.MouseUp IUIEvents.LostFocus IUIEvents.IsMouseIn ISkinComponent.Skin ISkinComponent.SkinTags IEntity.ID IEntity.DisplayName IEntity.GetFriendlyName() IComponentsCollection.AddComponent<TComponent>() IComponentsCollection.AddComponent(Type) IComponentsCollection.AddComponent<TComponent>(IComponent) IComponentsCollection.RemoveComponent<TComponent>() IComponentsCollection.RemoveComponent(Type) IComponentsCollection.RemoveComponent(IComponent) IComponentsCollection.PopComponent<TComponent>() IComponentsCollection.HasComponent<TComponent>() IComponentsCollection.HasComponent(Type) IComponentsCollection.HasComponent(IComponent) IComponentsCollection.GetComponent<TComponent>() IComponentsCollection.GetComponent(Type) IComponentsCollection.Bind<TComponent>(Action<TComponent>, Action<TComponent>) IComponentsCollection.Count IComponentsCollection.ComponentsInitialized IComponentsCollection.OnComponentsInitialized IComponentsCollection.OnComponentsChanged IComponentsCollection.OnDisposed(Action) System.Collections.Generic.IEnumerable<AGS.API.IComponent>.GetEnumerator() IHasRoomComponent.Room IHasRoomComponent.PreviousRoom IHasRoomComponent.OnRoomChanged IHasRoomComponent.ChangeRoomAsync(IRoom, Nullable<Single>, Nullable<Single>) IAnimationComponent.Animation IAnimationComponent.OnAnimationStarted IAnimationComponent.StartAnimation(IAnimation) IAnimationComponent.Animate(IAnimation) IAnimationComponent.AnimateAsync(IAnimation) IInTree<IObject>.TreeNode IColliderComponent.CenterPoint IColliderComponent.CollidesWith(Single, Single, IViewport) IVisibleComponent.Visible IVisibleComponent.UnderlyingVisible IEnabledComponent.Enabled IEnabledComponent.UnderlyingEnabled IEnabledComponent.ClickThrough ICustomPropertiesComponent.Properties IDrawableInfoComponent.RenderLayer IDrawableInfoComponent.IgnoreViewport IDrawableInfoComponent.IgnoreScalingArea IShaderComponent.Shader IImageComponent.IsImageVisible IImageComponent.CurrentSprite IImageComponent.SpriteProvider IBorderComponent.Border IPixelPerfectComponent.IsPixelPerfect IPixelPerfectCollidable.PixelPerfectHitTestArea IScale.Height IScale.Width IScale.ScaleX IScale.ScaleY IScale.Scale IScale.BaseSize IScale.ResetScale() IScale.ResetScale(Single, Single) IScale.ScaleTo(Single, Single) IScale.FlipHorizontally() IScale.FlipVertically() IRotate.Angle ITranslate.Position ITranslate.X ITranslate.Y ITranslate.Z IHasImage.Opacity IHasImage.Tint IHasImage.Brightness IHasImage.Pivot IHasImage.Image IModelMatrixComponent.GetModelMatrices() IModelMatrixComponent.OnMatrixChanged IModelMatrixComponent.ModelMatrixLockStep IBoundingBoxComponent.GetBoundingBoxes(IViewport) IBoundingBoxComponent.WorldBoundingBox IBoundingBoxComponent.OnBoundingBoxesChanged IBoundingBoxComponent.BoundingBoxLockStep IWorldPositionComponent.WorldX IWorldPositionComponent.WorldY IWorldPositionComponent.WorldXY IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IUIControl : IUIEvents, ISkinComponent, IObject, IEntity, IComponentsCollection, IEnumerable<IComponent>, IEnumerable, IHasRoomComponent, IAnimationComponent, IInObjectTreeComponent, IInTree<IObject>, IColliderComponent, IVisibleComponent, IEnabledComponent, ICustomPropertiesComponent, IDrawableInfoComponent, IShaderComponent, ITranslateComponent, IImageComponent, IBorderComponent, IScaleComponent, IRotateComponent, IPixelPerfectComponent, IPixelPerfectCollidable, IHasModelMatrix, IScale, IRotate, ITranslate, IHasImage, IModelMatrixComponent, IBoundingBoxComponent, IWorldPositionComponent, IComponent, IDisposable, INotifyPropertyChanged"
  },
  "api/AGS.API.ITreeViewComponent.html": {
    "href": "api/AGS.API.ITreeViewComponent.html",
    "title": "Interface ITreeViewComponent | MonoAGS Documentation",
    "keywords": "Interface ITreeViewComponent A component for displaying a hierarchical collection of text labels. Each label is a node in the tree which can be collapsed/expanded to hide/show its children. Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax [RequiredComponent(typeof(IInObjectTreeComponent), true)] [RequiredComponent(typeof(IDrawableInfoComponent), true)] public interface ITreeViewComponent : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source AllowSelection Gets or sets whether to allow selecting nodes in the tree. Declaration SelectionType AllowSelection { get; set; } Property Value Type Description SelectionType The allow selection. | Improve this Doc View Source HorizontalSpacing Gets or sets the horizontal spacing between each level in the tree. Declaration float HorizontalSpacing { get; set; } Property Value Type Description System.Single The horizontal spacing. | Improve this Doc View Source LayoutPaused Allow pausing/resuming the tree layout. Declaration bool LayoutPaused { get; set; } Property Value Type Description System.Boolean true if layout paused; otherwise, false . | Improve this Doc View Source LeftPadding Gets or sets the left padding for the tree view. Declaration float LeftPadding { get; set; } Property Value Type Description System.Single The left padding. | Improve this Doc View Source NodeViewProvider Gets or sets the node view provider, which is responsible for displaying a node in the tree. Declaration ITreeNodeViewProvider NodeViewProvider { get; set; } Property Value Type Description ITreeNodeViewProvider The node view provider. | Improve this Doc View Source OnNodeCollapsed An event which fires every time a node is expanded. Declaration IBlockingEvent<NodeEventArgs> OnNodeCollapsed { get; } Property Value Type Description IBlockingEvent < NodeEventArgs > | Improve this Doc View Source OnNodeExpanded An event which fires every time a node is expanded. Declaration IBlockingEvent<NodeEventArgs> OnNodeExpanded { get; } Property Value Type Description IBlockingEvent < NodeEventArgs > | Improve this Doc View Source OnNodeSelected An event which fires every time a node is selected (if AllowSelection is set to allow selection). Declaration IBlockingEvent<NodeEventArgs> OnNodeSelected { get; } Property Value Type Description IBlockingEvent < NodeEventArgs > | Improve this Doc View Source ScrollingContainer If the tree view is contained in a scrolling panel ( CreateScrollingPanel(IPanel, Single, Single, Single) ), you can set the containing contents panel here, which the tree view will then use to optimize performance by only loading the tree node views when they're inside the scrolling range. Declaration IEntity ScrollingContainer { get; set; } Property Value Type Description IEntity The scrolling container. | Improve this Doc View Source SearchFilter Gets or sets the search filter (a search text that filters the tree so that only items containing the text appear in the tree). Declaration string SearchFilter { get; set; } Property Value Type Description System.String The search filter. | Improve this Doc View Source SkipRenderingRoot Gets or sets a value indicating whether this ITreeViewComponent skip rendering the root node. This effectively means that the tree will show multiple \"detached\" roots (all the nodes in the second level in the tree), i.e it makes it possible for the tree view to show multiple \"trees\". Declaration bool SkipRenderingRoot { get; set; } Property Value Type Description System.Boolean true if skip rendering root; otherwise, false . | Improve this Doc View Source TopPadding Gets or sets the top padding for the tree view. Declaration float TopPadding { get; set; } Property Value Type Description System.Single The top padding. | Improve this Doc View Source Tree The tree of text items to show. Declaration ITreeStringNode Tree { get; set; } Property Value Type Description ITreeStringNode The tree. | Improve this Doc View Source VerticalSpacing Gets or sets the vertical spacing between each child in the tree. Declaration float VerticalSpacing { get; set; } Property Value Type Description System.Single The vertical spacing. Methods | Improve this Doc View Source Collapse(ITreeStringNode) Collapse the specified node. Declaration void Collapse(ITreeStringNode node) Parameters Type Name Description ITreeStringNode node Node. | Improve this Doc View Source Expand(ITreeStringNode) Expand the specified node. Declaration void Expand(ITreeStringNode node) Parameters Type Name Description ITreeStringNode node Node. | Improve this Doc View Source IsCollapsed(ITreeStringNode) Is the specified node collapsed (or expanded)? Declaration bool? IsCollapsed(ITreeStringNode node) Parameters Type Name Description ITreeStringNode node Node. Returns Type Description System.Nullable < System.Boolean > Null if the node is not in the tree, false if expanded, true if collapsed. | Improve this Doc View Source RefreshLayout() Forces a layout refresh for the tree (this usually should not be necessary, as the tree refreshes itself when it sees a need). Declaration void RefreshLayout() | Improve this Doc View Source Select(ITreeStringNode) Select the specified node in the tree. Declaration void Select(ITreeStringNode node) Parameters Type Name Description ITreeStringNode node Node."
  },
  "api/AGS.API.ITreeTableRowLayoutComponent.html": {
    "href": "api/AGS.API.ITreeTableRowLayoutComponent.html",
    "title": "Interface ITreeTableRowLayoutComponent | MonoAGS Documentation",
    "keywords": "Interface ITreeTableRowLayoutComponent Represents a row in a tree view that aligns its columns with other rows, based on ITreeTableLayout . Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ITreeTableRowLayoutComponent : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source FixedWidthOverrides Allow overriding the width for specific columns. The key is the index of the column (zero based, so 0 is the first column) and the value is the width. Declaration Dictionary<int, float> FixedWidthOverrides { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.Int32 , System.Single > The fixed width overrides. | Improve this Doc View Source RestrictionList Allows disabling specific entities from changing the overall aligned columns. Declaration IRestrictionList RestrictionList { get; } Property Value Type Description IRestrictionList The restriction list. | Improve this Doc View Source Table Gets or sets the table layout. Declaration ITreeTableLayout Table { get; set; } Property Value Type Description ITreeTableLayout The table layout."
  },
  "api/AGS.API.ITreeTableLayout.html": {
    "href": "api/AGS.API.ITreeTableLayout.html",
    "title": "Interface ITreeTableLayout | MonoAGS Documentation",
    "keywords": "Interface ITreeTableLayout Represents a layout of columns that is shared between nodes in a tree view, using a ITreeTableRowLayoutComponent . By sharing the interaces different nodes on the list can align the columns together. Inherited Members System.IDisposable.Dispose() Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ITreeTableLayout : IDisposable Properties | Improve this Doc View Source ColumnPadding Gets or sets the column padding. Declaration float ColumnPadding { get; set; } Property Value Type Description System.Single The column padding. | Improve this Doc View Source ColumnSizes Gets the column sizes. Declaration IAGSBindingList<float> ColumnSizes { get; } Property Value Type Description IAGSBindingList < System.Single > The column sizes. | Improve this Doc View Source OnQueryLayout The table layout fires this event when it needs to query the column sizes from all the rows. The rows respond by setting their sizes, so at the end of the event, the layout knows the biggest length needed for each column. Declaration IBlockingEvent<QueryLayoutEventArgs> OnQueryLayout { get; } Property Value Type Description IBlockingEvent < QueryLayoutEventArgs > The query layout event. | Improve this Doc View Source OnRefreshLayoutNeeded Once the table layout calculates new column sizes it fires this event, for which all the rows should listen and readjust their columns accordingly. If a specific row is passed, only that row needs to recalculate. If the passed row is null, all rows need to recalculate. Declaration IBlockingEvent<ITreeTableRowLayoutComponent> OnRefreshLayoutNeeded { get; } Property Value Type Description IBlockingEvent < ITreeTableRowLayoutComponent > The refresh layout event. | Improve this Doc View Source Rows Gets the rows. Declaration IAGSBindingList<ITreeTableRowLayoutComponent> Rows { get; } Property Value Type Description IAGSBindingList < ITreeTableRowLayoutComponent > The rows. | Improve this Doc View Source StartX Gets or sets the start x. Declaration float StartX { get; set; } Property Value Type Description System.Single The start x. Methods | Improve this Doc View Source PerformLayout() Performs the layout. Declaration void PerformLayout()"
  },
  "api/AGS.API.ITreeStringNode.html": {
    "href": "api/AGS.API.ITreeStringNode.html",
    "title": "Interface ITreeStringNode | MonoAGS Documentation",
    "keywords": "Interface ITreeStringNode A string tree node, which will be shown in a ITreeViewComponent . Inherited Members IStringItem.Text IStringItem.IdleTextConfig IStringItem.HoverTextConfig IStringItem.Properties IInTree<ITreeStringNode>.TreeNode IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ITreeStringNode : IStringItem, IInTree<ITreeStringNode>, IComponent, IDisposable, INotifyPropertyChanged"
  },
  "api/AGS.API.ITreeNodeViewProvider.html": {
    "href": "api/AGS.API.ITreeNodeViewProvider.html",
    "title": "Interface ITreeNodeViewProvider | MonoAGS Documentation",
    "keywords": "Interface ITreeNodeViewProvider The tree node view provider is responsible for displaying a node in a ITreeViewComponent control. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ITreeNodeViewProvider Methods | Improve this Doc View Source BeforeDisplayingNode(ITreeStringNode, ITreeNodeView, Boolean, Boolean, Boolean) Called before displaying the node view, and allows for changing the display based on the current state of the node. Declaration void BeforeDisplayingNode(ITreeStringNode item, ITreeNodeView nodeView, bool isCollapsed, bool isHovered, bool isSelected) Parameters Type Name Description ITreeStringNode item Item. ITreeNodeView nodeView Node view. System.Boolean isCollapsed If set to true is collapsed. System.Boolean isHovered If set to true is hovered. System.Boolean isSelected If set to true is selected. | Improve this Doc View Source CreateNode(ITreeStringNode, IRenderLayer, IObject) Creates a UI view for the text node. Declaration ITreeNodeView CreateNode(ITreeStringNode node, IRenderLayer layer, IObject parent) Parameters Type Name Description ITreeStringNode node The text node. IRenderLayer layer The rendering layer which all of the tree UI controls should use. IObject parent The parent for the node. Returns Type Description ITreeNodeView The node view."
  },
  "api/AGS.API.ITreeNodeView.html": {
    "href": "api/AGS.API.ITreeNodeView.html",
    "title": "Interface ITreeNodeView | MonoAGS Documentation",
    "keywords": "Interface ITreeNodeView Encapsulates all the UI controls needed to show a tree node in a ITreeViewComponent . Each node has a parent panel with two additional panels: a horizontal stack layout panel with an expand/collapse button and the text label, and a vertical panel for holding the children of the node. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ITreeNodeView Properties | Improve this Doc View Source ExpandButton Gets the expand/collapse button for the node. Declaration IButton ExpandButton { get; } Property Value Type Description IButton The expand button. | Improve this Doc View Source HorizontalPanel Gets the horizontal panel which contains the expand/collapse button and the text label. Declaration IPanel HorizontalPanel { get; } Property Value Type Description IPanel The horizontal panel. | Improve this Doc View Source OnRefreshDisplayNeeded An event that can be triggered to notify the tree view that this node needs to be re-rendered on screen. Declaration IBlockingEvent OnRefreshDisplayNeeded { get; } Property Value Type Description IBlockingEvent The on refresh display needed event. | Improve this Doc View Source ParentPanel Gets the parent panel which contains all of the controls in the node. Declaration IPanel ParentPanel { get; } Property Value Type Description IPanel The parent panel. | Improve this Doc View Source TreeItem Gets the text label for the node. Declaration IUIControl TreeItem { get; } Property Value Type Description IUIControl The tree item. | Improve this Doc View Source VerticalPanel Gets the vertical panel which contains all of the children of the node. Declaration IPanel VerticalPanel { get; } Property Value Type Description IPanel The vertical panel."
  },
  "api/AGS.API.ITreeNode-1.html": {
    "href": "api/AGS.API.ITreeNode-1.html",
    "title": "Interface ITreeNode<TItem> | MonoAGS Documentation",
    "keywords": "Interface ITreeNode<TItem> A node in a tree. A tree is a structure in which every node can have one parent (or no parent if it's the root) and several children (or no children, which will make it a leaf in the tree). Inherited Members System.IDisposable.Dispose() Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ITreeNode<TItem> : IDisposable where TItem : class, IInTree<TItem> Type Parameters Name Description TItem Properties | Improve this Doc View Source Children Gets the items contained in the children. Declaration IAGSBindingList<TItem> Children { get; } Property Value Type Description IAGSBindingList <TItem> The children. | Improve this Doc View Source ChildrenCount Gets the number of children this node has. Declaration int ChildrenCount { get; } Property Value Type Description System.Int32 The children count. | Improve this Doc View Source Node Gets the item contained in the node. Declaration TItem Node { get; } Property Value Type Description TItem The node. | Improve this Doc View Source OnParentChanged An event which fires whenever the parent for a node changes. Declaration IBlockingEvent OnParentChanged { get; } Property Value Type Description IBlockingEvent The event. | Improve this Doc View Source Parent Gets the item contained in the parent. Declaration TItem Parent { get; } Property Value Type Description TItem The parent. Methods | Improve this Doc View Source AddChild(TItem) Adds a child to the node. Declaration void AddChild(TItem child) Parameters Type Name Description TItem child Child. | Improve this Doc View Source AddChildren(List<TItem>) Adds the list of children to the node. Declaration void AddChildren(List<TItem> children) Parameters Type Name Description System.Collections.Generic.List <TItem> children Children. | Improve this Doc View Source FindDescendant(Predicate<TItem>) Find a descendant who matches a specific predicate. Declaration TItem FindDescendant(Predicate<TItem> isMatch) Parameters Type Name Description System.Predicate <TItem> isMatch The predicate. Returns Type Description TItem The descendant, or null if not found. Examples For example, to find a child with a specific id: var child = tree.FindDescendant(item => item.Entity.ID == \"My ID\"); | Improve this Doc View Source FindPreviousSibling(Predicate<TItem>) Finds the previous sibling which matches a specific predicate. Declaration TItem FindPreviousSibling(Predicate<TItem> isMatch) Parameters Type Name Description System.Predicate <TItem> isMatch Is match. Returns Type Description TItem The previous sibling. | Improve this Doc View Source GetRoot() Returns the root of the tree (the node which has no parent). Declaration TItem GetRoot() Returns Type Description TItem The root. | Improve this Doc View Source HasChild(TItem) Is the specified item a child of this node? Declaration bool HasChild(TItem child) Parameters Type Name Description TItem child Child. Returns Type Description System.Boolean true , if it is a child of the node, false otherwise. | Improve this Doc View Source InsertChild(Int32, TItem) Inserts the child to the node at the specified index. Declaration void InsertChild(int index, TItem child) Parameters Type Name Description System.Int32 index Index. TItem child Child. | Improve this Doc View Source RemoveChild(TItem) Removes the specified child from the node. Declaration void RemoveChild(TItem child) Parameters Type Name Description TItem child Child. | Improve this Doc View Source SetParent(ITreeNode<TItem>) Sets a new parent for the node. Declaration void SetParent(ITreeNode<TItem> parent) Parameters Type Name Description ITreeNode <TItem> parent Parent. | Improve this Doc View Source StealParent(ITreeNode<TItem>) \"Steals\" the parent from the specified node: this will make this node have the specified node's parent as its parent, and the specified node will remain with no parent. Declaration void StealParent(ITreeNode<TItem> victim) Parameters Type Name Description ITreeNode <TItem> victim Victim."
  },
  "api/AGS.API.ITranslateComponent.html": {
    "href": "api/AGS.API.ITranslateComponent.html",
    "title": "Interface ITranslateComponent | MonoAGS Documentation",
    "keywords": "Interface ITranslateComponent Allows changing the position of an entity. Inherited Members ITranslate.Position ITranslate.X ITranslate.Y ITranslate.Z IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ITranslateComponent : ITranslate, IComponent, IDisposable, INotifyPropertyChanged"
  },
  "api/AGS.API.ITranslate.html": {
    "href": "api/AGS.API.ITranslate.html",
    "title": "Interface ITranslate | MonoAGS Documentation",
    "keywords": "Interface ITranslate Allows changing the position of entities/sprites. Inherited Members System.ComponentModel.INotifyPropertyChanged.PropertyChanged System.IDisposable.Dispose() Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ITranslate : INotifyPropertyChanged, IDisposable Properties | Improve this Doc View Source Position Gets or sets the location. (X,Y) are used to place the entity/sprite in 2D space (in local coordinates). The local coordinates are the world coordinates if the entity has no parent, otherwise its the coordinates relative to the parent. Z is used for deciding how the entities/sprites are ordered in 2D space (higher Z in front). If Z and Y are the same when setting the location, then Z will be bound to Y: whenever Y moves, Z moves, which will make entities closer to the bottom appear in front, which is the desired behavior in most scenarios. You can change this behavior by explicitly setting Z to a different value. Declaration Position Position { get; set; } Property Value Type Description Position The location. See Also IWorldPositionComponent | Improve this Doc View Source X Gets or sets the x coordinate (in local coordinates). The local coordinates are the world coordinates if the entity has no parent, otherwise its the coordinates relative to the parent. Declaration float X { get; set; } Property Value Type Description System.Single The x. See Also WorldX | Improve this Doc View Source Y Gets or sets the y coordinate (in local coordinates). The local coordinates are the world coordinates if the entity has no parent, otherwise its the coordinates relative to the parent. Declaration float Y { get; set; } Property Value Type Description System.Single The y. See Also WorldY | Improve this Doc View Source Z Gets or sets the z property. Z is used for deciding how the entities/sprites are ordered in 2D space (higher Z in front). If Z and Y are the same when setting the location, then Z will be bound to Y: whenever Y moves, Z moves, which will make entities closer to the bottom appear in front, which is the desired behavior in most scenarios. You can change this behavior by explicitly setting Z to a different value. Declaration float Z { get; set; } Property Value Type Description System.Single The z."
  },
  "api/AGS.API.ITransformMatrix.html": {
    "href": "api/AGS.API.ITransformMatrix.html",
    "title": "Interface ITransformMatrix | MonoAGS Documentation",
    "keywords": "Interface ITransformMatrix Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ITransformMatrix Properties | Improve this Doc View Source Elements Declaration float[] Elements { get; } Property Value Type Description System.Single []"
  },
  "api/AGS.API.ITextureOffsetComponent.html": {
    "href": "api/AGS.API.ITextureOffsetComponent.html",
    "title": "Interface ITextureOffsetComponent | MonoAGS Documentation",
    "keywords": "Interface ITextureOffsetComponent Allows changing the starting offset from which the texture will be rendered. This can be useful, for example, when dealing with a tiled texture (i.e when the ITextureConfig has either wrapX or wrapY as Repeat or MirroredRepeat ) when you want to animate the tile. Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ITextureOffsetComponent : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source TextureOffset Gets or sets the texture starting offset from which it will be rendered. The units are in relation to the texture's size, where (0,0) is the top-left of the texture, and (1,1) is the bottom-right of the texture (note that if the value is under 0 or above 1, the behavior of the texture is determined based on wrapping configurations in ITextureConfig . Declaration PointF TextureOffset { get; set; } Property Value Type Description PointF The texture offset."
  },
  "api/AGS.API.ITextureFactory.html": {
    "href": "api/AGS.API.ITextureFactory.html",
    "title": "Interface ITextureFactory | MonoAGS Documentation",
    "keywords": "Interface ITextureFactory A factory for creating textures. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ITextureFactory Methods | Improve this Doc View Source CreateTexture(String) Creates the texture from the identifier (or returns an empty texture if the id is null). Declaration ITexture CreateTexture(string id) Parameters Type Name Description System.String id The texture id (path in the file system, for example). Returns Type Description ITexture The texture."
  },
  "api/AGS.API.ITextureConfig.html": {
    "href": "api/AGS.API.ITextureConfig.html",
    "title": "Interface ITextureConfig | MonoAGS Documentation",
    "keywords": "Interface ITextureConfig Various configurations for a texture. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ITextureConfig Properties | Improve this Doc View Source ScaleDownFilter Which filters will be used to scale down the texture if needed? Declaration ScaleDownFilters ScaleDownFilter { get; } Property Value Type Description ScaleDownFilters | Improve this Doc View Source ScaleUpFilter Which filters will be used to scale up the texture if needed? Declaration ScaleUpFilters ScaleUpFilter { get; } Property Value Type Description ScaleUpFilters | Improve this Doc View Source WrapX How would the texture be wrapped to match the image on its horizontal axis? ITextureOffsetComponent Declaration TextureWrap WrapX { get; } Property Value Type Description TextureWrap | Improve this Doc View Source WrapY How would the texture be wrapped to match the image on its vertical axis? ITextureOffsetComponent Declaration TextureWrap WrapY { get; } Property Value Type Description TextureWrap"
  },
  "api/AGS.API.IPanel.html": {
    "href": "api/AGS.API.IPanel.html",
    "title": "Interface IPanel | MonoAGS Documentation",
    "keywords": "Interface IPanel A panel is a UI control which hosts other UI controls. Note: the panel is in fact completely unnecessary, as any other UI control can host UI controls as well, but it's here as it provides a clear intent on its use. Inherited Members IUIEvents.MouseEnter IUIEvents.MouseLeave IUIEvents.MouseMove IUIEvents.MouseClicked IUIEvents.MouseDoubleClicked IUIEvents.MouseDown IUIEvents.MouseUp IUIEvents.LostFocus IUIEvents.IsMouseIn ISkinComponent.Skin ISkinComponent.SkinTags IEntity.ID IEntity.DisplayName IEntity.GetFriendlyName() IComponentsCollection.AddComponent<TComponent>() IComponentsCollection.AddComponent(Type) IComponentsCollection.AddComponent<TComponent>(IComponent) IComponentsCollection.RemoveComponent<TComponent>() IComponentsCollection.RemoveComponent(Type) IComponentsCollection.RemoveComponent(IComponent) IComponentsCollection.PopComponent<TComponent>() IComponentsCollection.HasComponent<TComponent>() IComponentsCollection.HasComponent(Type) IComponentsCollection.HasComponent(IComponent) IComponentsCollection.GetComponent<TComponent>() IComponentsCollection.GetComponent(Type) IComponentsCollection.Bind<TComponent>(Action<TComponent>, Action<TComponent>) IComponentsCollection.Count IComponentsCollection.ComponentsInitialized IComponentsCollection.OnComponentsInitialized IComponentsCollection.OnComponentsChanged IComponentsCollection.OnDisposed(Action) System.Collections.Generic.IEnumerable<AGS.API.IComponent>.GetEnumerator() IHasRoomComponent.Room IHasRoomComponent.PreviousRoom IHasRoomComponent.OnRoomChanged IHasRoomComponent.ChangeRoomAsync(IRoom, Nullable<Single>, Nullable<Single>) IAnimationComponent.Animation IAnimationComponent.OnAnimationStarted IAnimationComponent.StartAnimation(IAnimation) IAnimationComponent.Animate(IAnimation) IAnimationComponent.AnimateAsync(IAnimation) IInTree<IObject>.TreeNode IColliderComponent.CenterPoint IColliderComponent.CollidesWith(Single, Single, IViewport) IVisibleComponent.Visible IVisibleComponent.UnderlyingVisible IEnabledComponent.Enabled IEnabledComponent.UnderlyingEnabled IEnabledComponent.ClickThrough ICustomPropertiesComponent.Properties IDrawableInfoComponent.RenderLayer IDrawableInfoComponent.IgnoreViewport IDrawableInfoComponent.IgnoreScalingArea IShaderComponent.Shader IImageComponent.IsImageVisible IImageComponent.CurrentSprite IImageComponent.SpriteProvider IBorderComponent.Border IPixelPerfectComponent.IsPixelPerfect IPixelPerfectCollidable.PixelPerfectHitTestArea IScale.Height IScale.Width IScale.ScaleX IScale.ScaleY IScale.Scale IScale.BaseSize IScale.ResetScale() IScale.ResetScale(Single, Single) IScale.ScaleTo(Single, Single) IScale.FlipHorizontally() IScale.FlipVertically() IRotate.Angle ITranslate.Position ITranslate.X ITranslate.Y ITranslate.Z IHasImage.Opacity IHasImage.Tint IHasImage.Brightness IHasImage.Pivot IHasImage.Image IModelMatrixComponent.GetModelMatrices() IModelMatrixComponent.OnMatrixChanged IModelMatrixComponent.ModelMatrixLockStep IBoundingBoxComponent.GetBoundingBoxes(IViewport) IBoundingBoxComponent.WorldBoundingBox IBoundingBoxComponent.OnBoundingBoxesChanged IBoundingBoxComponent.BoundingBoxLockStep IWorldPositionComponent.WorldX IWorldPositionComponent.WorldY IWorldPositionComponent.WorldXY IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IPanel : IUIControl, IUIEvents, ISkinComponent, IObject, IEntity, IComponentsCollection, IEnumerable<IComponent>, IEnumerable, IHasRoomComponent, IAnimationComponent, IInObjectTreeComponent, IInTree<IObject>, IColliderComponent, IVisibleComponent, IEnabledComponent, ICustomPropertiesComponent, IDrawableInfoComponent, IShaderComponent, ITranslateComponent, IImageComponent, IBorderComponent, IScaleComponent, IRotateComponent, IPixelPerfectComponent, IPixelPerfectCollidable, IHasModelMatrix, IScale, IRotate, ITranslate, IHasImage, IModelMatrixComponent, IBoundingBoxComponent, IWorldPositionComponent, IComponent, IDisposable, INotifyPropertyChanged"
  },
  "api/AGS.API.IOutfitFactory.html": {
    "href": "api/AGS.API.IOutfitFactory.html",
    "title": "Interface IOutfitFactory | MonoAGS Documentation",
    "keywords": "Interface IOutfitFactory A factory for creating animation outfits for characters. The factory conveniently allows for idle, walk and speak animations, where other animations can be added to the outfit manually. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IOutfitFactory Methods | Improve this Doc View Source LoadOutfitFromFolders(String, String, String, String, String, String, String, String, String, String, String, String, String, IAnimationConfiguration, ILoadImageConfig) Loads the outfit animation from several folders (each folder contains one animation). The folders can be resource folders, or actual folders on the file system (see cref=\"IRsourceLoader\"/>. Declaration IOutfit LoadOutfitFromFolders(string baseFolder, string walkLeftFolder = null, string walkRightFolder = null, string walkDownFolder = null, string walkUpFolder = null, string idleLeftFolder = null, string idleRightFolder = null, string idleDownFolder = null, string idleUpFolder = null, string speakLeftFolder = null, string speakRightFolder = null, string speakDownFolder = null, string speakUpFolder = null, IAnimationConfiguration animationConfig = null, ILoadImageConfig loadConfig = null) Parameters Type Name Description System.String baseFolder Base folder, all other folders will be on a relative path from this folder. System.String walkLeftFolder Walk left folder. System.String walkRightFolder Walk right folder. System.String walkDownFolder Walk down folder. System.String walkUpFolder Walk up folder. System.String idleLeftFolder Idle left folder. System.String idleRightFolder Idle right folder. System.String idleDownFolder Idle down folder. System.String idleUpFolder Idle up folder. System.String speakLeftFolder Speak left folder. System.String speakRightFolder Speak right folder. System.String speakDownFolder Speak down folder. System.String speakUpFolder Speak up folder. IAnimationConfiguration animationConfig Animation configuration to be applied for all animations. ILoadImageConfig loadConfig Load image configuration to be applied for all images. Returns Type Description IOutfit The outfit from folders. | Improve this Doc View Source LoadOutfitFromFoldersAsync(String, String, String, String, String, String, String, String, String, String, String, String, String, IAnimationConfiguration, ILoadImageConfig) Loads the outfit animation from several folders asynchronously (each folder contains one animation). The folders can be resource folders, or actual folders on the file system ( IResourceLoader ). Declaration Task<IOutfit> LoadOutfitFromFoldersAsync(string baseFolder, string walkLeftFolder = null, string walkRightFolder = null, string walkDownFolder = null, string walkUpFolder = null, string idleLeftFolder = null, string idleRightFolder = null, string idleDownFolder = null, string idleUpFolder = null, string speakLeftFolder = null, string speakRightFolder = null, string speakDownFolder = null, string speakUpFolder = null, IAnimationConfiguration animationConfig = null, ILoadImageConfig loadConfig = null) Parameters Type Name Description System.String baseFolder Base folder, all other folders will be on a relative path from this folder. System.String walkLeftFolder Walk left folder. System.String walkRightFolder Walk right folder. System.String walkDownFolder Walk down folder. System.String walkUpFolder Walk up folder. System.String idleLeftFolder Idle left folder. System.String idleRightFolder Idle right folder. System.String idleDownFolder Idle down folder. System.String idleUpFolder Idle up folder. System.String speakLeftFolder Speak left folder. System.String speakRightFolder Speak right folder. System.String speakDownFolder Speak down folder. System.String speakUpFolder Speak up folder. IAnimationConfiguration animationConfig Animation configuration to be applied for all animations. ILoadImageConfig loadConfig Load image configuration to be applied for all images. Returns Type Description System.Threading.Tasks.Task < IOutfit > The outfit from folders."
  },
  "api/AGS.API.ILockStep.html": {
    "href": "api/AGS.API.ILockStep.html",
    "title": "Interface ILockStep | MonoAGS Documentation",
    "keywords": "Interface ILockStep A mechanism to lock changes for various components, to ensure multiple changes happen at once. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ILockStep Methods | Improve this Doc View Source Lock() Locks the component from making changes. Declaration void Lock() | Improve this Doc View Source PrepareForUnlock() Prepares the component for unlocking (changes are calculated based on everything that happened since the lock), but no events are not fired yet. Declaration void PrepareForUnlock() | Improve this Doc View Source Unlock() Unlock this component and fires any change events if there were changes. Declaration void Unlock()"
  },
  "api/AGS.API.ILoadImageConfig.html": {
    "href": "api/AGS.API.ILoadImageConfig.html",
    "title": "Interface ILoadImageConfig | MonoAGS Documentation",
    "keywords": "Interface ILoadImageConfig Configuration to be used when loading images. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ILoadImageConfig Properties | Improve this Doc View Source TextureConfig Gets the configuration of the texture (scaling filter, should the texture be tiled or not). Declaration ITextureConfig TextureConfig { get; } Property Value Type Description ITextureConfig | Improve this Doc View Source TransparentColorSamplePoint For loading non 32-bit images (i.e with no alpha), you can select any color on the image to act as the transparent color. (0,0) for selecting the color on the top-left pixel of the image. Declaration Point? TransparentColorSamplePoint { get; } Property Value Type Description System.Nullable < Point > The transparent color sample point."
  },
  "api/AGS.API.IListboxComponent.html": {
    "href": "api/AGS.API.IListboxComponent.html",
    "title": "Interface IListboxComponent | MonoAGS Documentation",
    "keywords": "Interface IListboxComponent A component for displaying a list of items (as text), and allowing selecting an item from the list. Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax [RequiredComponent(typeof(IScaleComponent), true)] [RequiredComponent(typeof(IInObjectTreeComponent), true)] [RequiredComponent(typeof(IImageComponent), true)] [RequiredComponent(typeof(IStackLayoutComponent), true)] [RequiredComponent(typeof(IVisibleComponent), true)] public interface IListboxComponent : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source Items Gets the list of items which are up for selection. Declaration IAGSBindingList<IStringItem> Items { get; } Property Value Type Description IAGSBindingList < IStringItem > The items. | Improve this Doc View Source ListItemFactory Gets or sets the factory function for creating the UI controls which will be displayed for each item in the list. The function gets the text of the item and should return a UI control. Declaration Func<string, IUIControl> ListItemFactory { get; set; } Property Value Type Description System.Func < System.String , IUIControl > The list item factory. | Improve this Doc View Source ListItemUIControls Gets the list item UI controls. Declaration IEnumerable<IUIControl> ListItemUIControls { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IUIControl > The item UI controls. | Improve this Doc View Source MaxHeight Gets or sets the maximum height of the box. If it is expected for the items in the list to exceed the height, scrollbars should be added to the list ( CreateScrollingPanel(IPanel, Single, Single, Single) ). Declaration float MaxHeight { get; set; } Property Value Type Description System.Single The maximum height. | Improve this Doc View Source MaxWidth Gets or sets the maximum width of the box. If it is expected for the items in the list to exceed the width, scrollbars should be added to the list ( CreateScrollingPanel(IPanel, Single, Single, Single) ). Declaration float MaxWidth { get; set; } Property Value Type Description System.Single The maximum width. | Improve this Doc View Source MinHeight Gets or sets the minimum height for the box. Declaration float MinHeight { get; set; } Property Value Type Description System.Single The minimum height. | Improve this Doc View Source MinWidth Gets or sets the minimum width for the box. Declaration float MinWidth { get; set; } Property Value Type Description System.Single The minimum width. | Improve this Doc View Source OnSelectedItemChanged An event which fires whenever the selected item in the dropdown was changed (this can be because the user selected an item, or because the SelectedIndex was set from code). Declaration IBlockingEvent<ListboxItemArgs> OnSelectedItemChanged { get; } Property Value Type Description IBlockingEvent < ListboxItemArgs > The on selected item changed event. | Improve this Doc View Source OnSelectedItemChanging An event which fires whenever the selected item in the dropdown is in the process of being changed (this can be because the user selected an item, or because the SelectedIndex was set from code). The selection has not been applied yet in this event, and can be cancelled by the event subscriber by settings ShouldCancel to true. Declaration IEvent<ListboxItemChangingArgs> OnSelectedItemChanging { get; } Property Value Type Description IEvent < ListboxItemChangingArgs > The on selected item changing event. | Improve this Doc View Source Padding Gets or sets the padding that will be added to the box (this is performed before applying min/max width/height). Declaration SizeF Padding { get; set; } Property Value Type Description SizeF The padding. | Improve this Doc View Source SearchFilter Gets or sets the search filter (a search text that filters the tree so that only items containing the text appear in the list). Declaration string SearchFilter { get; set; } Property Value Type Description System.String The search filter. | Improve this Doc View Source SelectedIndex Gets or sets the selected item index (a 0 based index of the items list). Declaration int SelectedIndex { get; set; } Property Value Type Description System.Int32 The index of the selected. | Improve this Doc View Source SelectedItem Gets the selected item. Declaration IStringItem SelectedItem { get; } Property Value Type Description IStringItem The selected item."
  },
  "api/AGS.API.IListbox.html": {
    "href": "api/AGS.API.IListbox.html",
    "title": "Interface IListbox | MonoAGS Documentation",
    "keywords": "Interface IListbox Represents a listbox (a GUI view of a list of items). Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IListbox Properties | Improve this Doc View Source ContentsPanel The panel containing the listbox items. Declaration IPanel ContentsPanel { get; } Property Value Type Description IPanel The contents panel. | Improve this Doc View Source ListboxComponent The listbox component. Declaration IListboxComponent ListboxComponent { get; } Property Value Type Description IListboxComponent The listbox component. | Improve this Doc View Source ScrollingPanel The containing panel which carries the scroll bars, if the listbox is configured to have scrollbars (otherwise, this will be null). Declaration IPanel ScrollingPanel { get; } Property Value Type Description IPanel The scrolling panel."
  },
  "api/AGS.API.ILabel.html": {
    "href": "api/AGS.API.ILabel.html",
    "title": "Interface ILabel | MonoAGS Documentation",
    "keywords": "Interface ILabel A pre-set entity with all of the UI control components, plus a text component for displaying text. Inherited Members ITextComponent.TextConfig ITextComponent.Text ITextComponent.LabelRenderSize ITextComponent.TextVisible ITextComponent.TextBackgroundVisible ITextComponent.TextHeight ITextComponent.TextWidth ITextComponent.OnLabelSizeChanged ITextComponent.CustomImageSize ITextComponent.CustomImageResolutionFactor ITextComponent.CustomTextCrop ITextComponent.TextBoundingBoxes ITextComponent.CaretPosition ITextComponent.RenderCaret ITextComponent.CaretXOffset ITextComponent.PrepareTextBoundingBoxes() ITextComponent.TextLockStep IUIEvents.MouseEnter IUIEvents.MouseLeave IUIEvents.MouseMove IUIEvents.MouseClicked IUIEvents.MouseDoubleClicked IUIEvents.MouseDown IUIEvents.MouseUp IUIEvents.LostFocus IUIEvents.IsMouseIn ISkinComponent.Skin ISkinComponent.SkinTags IEntity.ID IEntity.DisplayName IEntity.GetFriendlyName() IComponentsCollection.AddComponent<TComponent>() IComponentsCollection.AddComponent(Type) IComponentsCollection.AddComponent<TComponent>(IComponent) IComponentsCollection.RemoveComponent<TComponent>() IComponentsCollection.RemoveComponent(Type) IComponentsCollection.RemoveComponent(IComponent) IComponentsCollection.PopComponent<TComponent>() IComponentsCollection.HasComponent<TComponent>() IComponentsCollection.HasComponent(Type) IComponentsCollection.HasComponent(IComponent) IComponentsCollection.GetComponent<TComponent>() IComponentsCollection.GetComponent(Type) IComponentsCollection.Bind<TComponent>(Action<TComponent>, Action<TComponent>) IComponentsCollection.Count IComponentsCollection.ComponentsInitialized IComponentsCollection.OnComponentsInitialized IComponentsCollection.OnComponentsChanged IComponentsCollection.OnDisposed(Action) System.Collections.Generic.IEnumerable<AGS.API.IComponent>.GetEnumerator() IHasRoomComponent.Room IHasRoomComponent.PreviousRoom IHasRoomComponent.OnRoomChanged IHasRoomComponent.ChangeRoomAsync(IRoom, Nullable<Single>, Nullable<Single>) IAnimationComponent.Animation IAnimationComponent.OnAnimationStarted IAnimationComponent.StartAnimation(IAnimation) IAnimationComponent.Animate(IAnimation) IAnimationComponent.AnimateAsync(IAnimation) IInTree<IObject>.TreeNode IColliderComponent.CenterPoint IColliderComponent.CollidesWith(Single, Single, IViewport) IVisibleComponent.Visible IVisibleComponent.UnderlyingVisible IEnabledComponent.Enabled IEnabledComponent.UnderlyingEnabled IEnabledComponent.ClickThrough ICustomPropertiesComponent.Properties IDrawableInfoComponent.RenderLayer IDrawableInfoComponent.IgnoreViewport IDrawableInfoComponent.IgnoreScalingArea IShaderComponent.Shader IImageComponent.IsImageVisible IImageComponent.CurrentSprite IImageComponent.SpriteProvider IBorderComponent.Border IPixelPerfectComponent.IsPixelPerfect IPixelPerfectCollidable.PixelPerfectHitTestArea IScale.Height IScale.Width IScale.ScaleX IScale.ScaleY IScale.Scale IScale.BaseSize IScale.ResetScale() IScale.ResetScale(Single, Single) IScale.ScaleTo(Single, Single) IScale.FlipHorizontally() IScale.FlipVertically() IRotate.Angle ITranslate.Position ITranslate.X ITranslate.Y ITranslate.Z IHasImage.Opacity IHasImage.Tint IHasImage.Brightness IHasImage.Pivot IHasImage.Image IModelMatrixComponent.GetModelMatrices() IModelMatrixComponent.OnMatrixChanged IModelMatrixComponent.ModelMatrixLockStep IBoundingBoxComponent.GetBoundingBoxes(IViewport) IBoundingBoxComponent.WorldBoundingBox IBoundingBoxComponent.OnBoundingBoxesChanged IBoundingBoxComponent.BoundingBoxLockStep IWorldPositionComponent.WorldX IWorldPositionComponent.WorldY IWorldPositionComponent.WorldXY IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ILabel : ITextComponent, IUIControl, IUIEvents, ISkinComponent, IObject, IEntity, IComponentsCollection, IEnumerable<IComponent>, IEnumerable, IHasRoomComponent, IAnimationComponent, IInObjectTreeComponent, IInTree<IObject>, IColliderComponent, IVisibleComponent, IEnabledComponent, ICustomPropertiesComponent, IDrawableInfoComponent, IShaderComponent, ITranslateComponent, IImageComponent, IBorderComponent, IScaleComponent, IRotateComponent, IPixelPerfectComponent, IPixelPerfectCollidable, IHasModelMatrix, IScale, IRotate, ITranslate, IHasImage, IModelMatrixComponent, IBoundingBoxComponent, IWorldPositionComponent, IComponent, IDisposable, INotifyPropertyChanged"
  },
  "api/AGS.API.IJumpOffsetComponent.html": {
    "href": "api/AGS.API.IJumpOffsetComponent.html",
    "title": "Interface IJumpOffsetComponent | MonoAGS Documentation",
    "keywords": "Interface IJumpOffsetComponent Jump offset allows changing the position of the entity without affecting its X,Y and Z co-ordinates. This means that it won't affect the rendering order, collision tests, etc. This can be used for having a character jump in the air, for example, without causing it to appear behind objects which shouldn't be in front. This is also used by the engine for scrolling contents inside a scrolling panel. Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IJumpOffsetComponent : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source JumpOffset Gets or sets the jump offset. Declaration PointF JumpOffset { get; set; } Property Value Type Description PointF The jump offset."
  },
  "api/AGS.API.IInventoryWindowComponent.html": {
    "href": "api/AGS.API.IInventoryWindowComponent.html",
    "title": "Interface IInventoryWindowComponent | MonoAGS Documentation",
    "keywords": "Interface IInventoryWindowComponent An inventory window allows displaying inventory items in a window. Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax [RequiredComponent(typeof(IScaleComponent), true)] [RequiredComponent(typeof(IInObjectTreeComponent), true)] public interface IInventoryWindowComponent : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source Inventory Gets or sets the inventory which is displayed in the window. Declaration IInventory Inventory { get; set; } Property Value Type Description IInventory The inventory. | Improve this Doc View Source ItemSize Gets or sets the size which is allocated to each inventory item in the window. Declaration SizeF ItemSize { get; set; } Property Value Type Description SizeF The size of the item. | Improve this Doc View Source ItemsPerRow Gets the number of items that fit in one row. Declaration int ItemsPerRow { get; } Property Value Type Description System.Int32 The items per row. | Improve this Doc View Source PaddingBetweenItems Optional padding to apply between the inventory items. Declaration SizeF PaddingBetweenItems { get; set; } Property Value Type Description SizeF The padding between the inventory items. | Improve this Doc View Source PaddingBottom Optional padding from the bottom side of the inventory window containing panel. Declaration float PaddingBottom { get; set; } Property Value Type Description System.Single The bottom padding. | Improve this Doc View Source PaddingLeft Optional padding from the left side of the inventory window containing panel. Declaration float PaddingLeft { get; set; } Property Value Type Description System.Single The left padding. | Improve this Doc View Source PaddingRight Optional padding from the right side of the inventory window containing panel. Declaration float PaddingRight { get; set; } Property Value Type Description System.Single The right padding. | Improve this Doc View Source PaddingTop Optional padding from the top side of the inventory window containing panel. Declaration float PaddingTop { get; set; } Property Value Type Description System.Single The top padding. | Improve this Doc View Source RowCount Gets the number of rows the inventory currently needs to be fully displayed. Declaration int RowCount { get; } Property Value Type Description System.Int32 The row count. | Improve this Doc View Source TopItem Gets or sets the top item index for the current view of the window. If the top item is 0, the window will show starting from the first item, and up to the number of items that fit in the window. If the top item is 1, the window will skip the first item, and so on. Declaration int TopItem { get; set; } Property Value Type Description System.Int32 The top item. Methods | Improve this Doc View Source ScrollDown() Scrolls the inventory window down one row if possible ( TopItem will change accordingly) Declaration void ScrollDown() | Improve this Doc View Source ScrollUp() Scrolls the inventory window up one row if possible ( TopItem will change accordingly). Declaration void ScrollUp() See Also IInventory IInventoryItem"
  },
  "api/AGS.API.IInventoryWindow.html": {
    "href": "api/AGS.API.IInventoryWindow.html",
    "title": "Interface IInventoryWindow | MonoAGS Documentation",
    "keywords": "Interface IInventoryWindow A pre-set entity with all of the UI control components, plus an inventory window component, for displaying inventory items in a window. Inherited Members IUIEvents.MouseEnter IUIEvents.MouseLeave IUIEvents.MouseMove IUIEvents.MouseClicked IUIEvents.MouseDoubleClicked IUIEvents.MouseDown IUIEvents.MouseUp IUIEvents.LostFocus IUIEvents.IsMouseIn ISkinComponent.Skin ISkinComponent.SkinTags IEntity.ID IEntity.DisplayName IEntity.GetFriendlyName() IComponentsCollection.AddComponent<TComponent>() IComponentsCollection.AddComponent(Type) IComponentsCollection.AddComponent<TComponent>(IComponent) IComponentsCollection.RemoveComponent<TComponent>() IComponentsCollection.RemoveComponent(Type) IComponentsCollection.RemoveComponent(IComponent) IComponentsCollection.PopComponent<TComponent>() IComponentsCollection.HasComponent<TComponent>() IComponentsCollection.HasComponent(Type) IComponentsCollection.HasComponent(IComponent) IComponentsCollection.GetComponent<TComponent>() IComponentsCollection.GetComponent(Type) IComponentsCollection.Bind<TComponent>(Action<TComponent>, Action<TComponent>) IComponentsCollection.Count IComponentsCollection.ComponentsInitialized IComponentsCollection.OnComponentsInitialized IComponentsCollection.OnComponentsChanged IComponentsCollection.OnDisposed(Action) System.Collections.Generic.IEnumerable<AGS.API.IComponent>.GetEnumerator() IHasRoomComponent.Room IHasRoomComponent.PreviousRoom IHasRoomComponent.OnRoomChanged IHasRoomComponent.ChangeRoomAsync(IRoom, Nullable<Single>, Nullable<Single>) IAnimationComponent.Animation IAnimationComponent.OnAnimationStarted IAnimationComponent.StartAnimation(IAnimation) IAnimationComponent.Animate(IAnimation) IAnimationComponent.AnimateAsync(IAnimation) IInTree<IObject>.TreeNode IColliderComponent.CenterPoint IColliderComponent.CollidesWith(Single, Single, IViewport) IVisibleComponent.Visible IVisibleComponent.UnderlyingVisible IEnabledComponent.Enabled IEnabledComponent.UnderlyingEnabled IEnabledComponent.ClickThrough ICustomPropertiesComponent.Properties IDrawableInfoComponent.RenderLayer IDrawableInfoComponent.IgnoreViewport IDrawableInfoComponent.IgnoreScalingArea IShaderComponent.Shader IImageComponent.IsImageVisible IImageComponent.CurrentSprite IImageComponent.SpriteProvider IBorderComponent.Border IPixelPerfectComponent.IsPixelPerfect IPixelPerfectCollidable.PixelPerfectHitTestArea IScale.Height IScale.Width IScale.ScaleX IScale.ScaleY IScale.Scale IScale.BaseSize IScale.ResetScale() IScale.ResetScale(Single, Single) IScale.ScaleTo(Single, Single) IScale.FlipHorizontally() IScale.FlipVertically() IRotate.Angle ITranslate.Position ITranslate.X ITranslate.Y ITranslate.Z IHasImage.Opacity IHasImage.Tint IHasImage.Brightness IHasImage.Pivot IHasImage.Image IModelMatrixComponent.GetModelMatrices() IModelMatrixComponent.OnMatrixChanged IModelMatrixComponent.ModelMatrixLockStep IBoundingBoxComponent.GetBoundingBoxes(IViewport) IBoundingBoxComponent.WorldBoundingBox IBoundingBoxComponent.OnBoundingBoxesChanged IBoundingBoxComponent.BoundingBoxLockStep IWorldPositionComponent.WorldX IWorldPositionComponent.WorldY IWorldPositionComponent.WorldXY IInventoryWindowComponent.ItemSize IInventoryWindowComponent.Inventory IInventoryWindowComponent.TopItem IInventoryWindowComponent.PaddingLeft IInventoryWindowComponent.PaddingRight IInventoryWindowComponent.PaddingBottom IInventoryWindowComponent.PaddingTop IInventoryWindowComponent.PaddingBetweenItems IInventoryWindowComponent.ScrollUp() IInventoryWindowComponent.ScrollDown() IInventoryWindowComponent.ItemsPerRow IInventoryWindowComponent.RowCount IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IInventoryWindow : IUIControl, IUIEvents, ISkinComponent, IObject, IEntity, IComponentsCollection, IEnumerable<IComponent>, IEnumerable, IHasRoomComponent, IAnimationComponent, IInObjectTreeComponent, IInTree<IObject>, IColliderComponent, IVisibleComponent, IEnabledComponent, ICustomPropertiesComponent, IDrawableInfoComponent, IShaderComponent, ITranslateComponent, IImageComponent, IBorderComponent, IScaleComponent, IRotateComponent, IPixelPerfectComponent, IPixelPerfectCollidable, IHasModelMatrix, IScale, IRotate, ITranslate, IHasImage, IModelMatrixComponent, IBoundingBoxComponent, IWorldPositionComponent, IInventoryWindowComponent, IComponent, IDisposable, INotifyPropertyChanged See Also IInventory IInventoryItem"
  },
  "api/AGS.API.IInObjectTreeComponent.html": {
    "href": "api/AGS.API.IInObjectTreeComponent.html",
    "title": "Interface IInObjectTreeComponent | MonoAGS Documentation",
    "keywords": "Interface IInObjectTreeComponent A component which adds the ability for an entity to be a part of an object's tree. Inherited Members IInTree<IObject>.TreeNode IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IInObjectTreeComponent : IInTree<IObject>, IComponent, IDisposable, INotifyPropertyChanged See Also IComponent"
  },
  "api/AGS.API.IImageComponent.html": {
    "href": "api/AGS.API.IImageComponent.html",
    "title": "Interface IImageComponent | MonoAGS Documentation",
    "keywords": "Interface IImageComponent A component which allows setting an image to the entity. Inherited Members IHasImage.Opacity IHasImage.Tint IHasImage.Brightness IHasImage.Pivot IHasImage.Image IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax [RequiredComponent(typeof(IScaleComponent), true)] [RequiredComponent(typeof(IBoundingBoxComponent), true)] public interface IImageComponent : IHasImage, IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source CurrentSprite Gets sprite to render. Declaration ISprite CurrentSprite { get; } Property Value Type Description ISprite The sprite. | Improve this Doc View Source IsImageVisible Gets or sets a value indicating whether this image is visible. Note that the difference between this and Visible is that this property controls the image renderer only, and the Visible property controls all renderers for the entity. Declaration bool IsImageVisible { get; set; } Property Value Type Description System.Boolean true if is image visible; otherwise, false . | Improve this Doc View Source SpriteProvider Gets or sets sprite provider. Declaration ISpriteProvider SpriteProvider { get; set; } Property Value Type Description ISpriteProvider The sprite provider implementation."
  },
  "api/AGS.API.IImage.html": {
    "href": "api/AGS.API.IImage.html",
    "title": "Interface IImage | MonoAGS Documentation",
    "keywords": "Interface IImage Represents an image that can be rendered on screen (usually as part of an animation). Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IImage Properties | Improve this Doc View Source Height Gets the height of the image (in pixels). Declaration float Height { get; } Property Value Type Description System.Single The height. | Improve this Doc View Source ID Gets the unique ID that represents that image. It will usually be the file path (unless the image is part of a sprite sheet, in that case the file path will not be a unique identifier). Declaration string ID { get; } Property Value Type Description System.String The identifier. | Improve this Doc View Source LoadConfig Gets the configuration with which the image was loaded. Declaration ILoadImageConfig LoadConfig { get; } Property Value Type Description ILoadImageConfig The load configuration. | Improve this Doc View Source OriginalBitmap Gets the original bitmap that this image is taken from. Declaration IBitmap OriginalBitmap { get; } Property Value Type Description IBitmap The original bitmap. | Improve this Doc View Source SpriteSheet If the image is part of a sprite sheet, this will return the sprite sheet data. Otherwise, this will return null. Declaration ISpriteSheet SpriteSheet { get; } Property Value Type Description ISpriteSheet The sprite sheet. | Improve this Doc View Source Texture Gets the texture. Declaration ITexture Texture { get; } Property Value Type Description ITexture The texture. | Improve this Doc View Source Width Gets the width of the image (in pixels). Declaration float Width { get; } Property Value Type Description System.Single The width."
  },
  "api/AGS.API.IIconFactory.html": {
    "href": "api/AGS.API.IIconFactory.html",
    "title": "Interface IIconFactory | MonoAGS Documentation",
    "keywords": "Interface IIconFactory A factory for creating icons. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IIconFactory Methods | Improve this Doc View Source GetArrowIcon(ArrowDirection, Nullable<Color>) Creates an arrow icon. Declaration IBorderStyle GetArrowIcon(ArrowDirection direction, Color? color = default(Color? )) Parameters Type Name Description ArrowDirection direction Direction. System.Nullable < Color > color Color. Returns Type Description IBorderStyle The arrow icon. | Improve this Doc View Source GetFileIcon(Boolean, Nullable<Color>, Nullable<Color>, Nullable<Color>, Nullable<Color>) Creates a file icon. Declaration ISelectableIcon GetFileIcon(bool isSelected = false, Color? color = default(Color? ), Color? foldColor = default(Color? ), Color? selectedColor = default(Color? ), Color? selectedFoldColor = default(Color? )) Parameters Type Name Description System.Boolean isSelected Is the icon selected. System.Nullable < Color > color Color. System.Nullable < Color > foldColor Fold color. System.Nullable < Color > selectedColor Seleced color. System.Nullable < Color > selectedFoldColor Selected fold color. Returns Type Description ISelectableIcon The file icon. | Improve this Doc View Source GetFolderIcon(Boolean, Nullable<Color>, Nullable<Color>, Nullable<Color>, Nullable<Color>) Creates a folder icon. Declaration ISelectableIcon GetFolderIcon(bool isSelected = false, Color? color = default(Color? ), Color? foldColor = default(Color? ), Color? selectedColor = default(Color? ), Color? selectedFoldColor = default(Color? )) Parameters Type Name Description System.Boolean isSelected Is the icon selected. System.Nullable < Color > color Color. System.Nullable < Color > foldColor Fold color. System.Nullable < Color > selectedColor Seleced color. System.Nullable < Color > selectedFoldColor Selected fold color. Returns Type Description ISelectableIcon The folder icon. | Improve this Doc View Source GetXIcon(Single, Single, Nullable<Color>) Create an \"X\" icon (for close windows buttons, for example). Declaration IBorderStyle GetXIcon(float lineWidth = 3F, float padding = 3F, Color? color = default(Color? )) Parameters Type Name Description System.Single lineWidth Line width. System.Single padding Padding. System.Nullable < Color > color Color (leave empty for red). Returns Type Description IBorderStyle The icon."
  },
  "api/AGS.API.ICropChildrenComponent.html": {
    "href": "api/AGS.API.ICropChildrenComponent.html",
    "title": "Interface ICropChildrenComponent | MonoAGS Documentation",
    "keywords": "Interface ICropChildrenComponent This component allows cropping all children to the parent's size. For example, you can have an object to represent a TV, then crop all of its children entities, so the entities will not get out of the boundaries of the TV (giving the appearance that it's really a TV). Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax [RequiredComponent(typeof(IInObjectTreeComponent), true)] [RequiredComponent(typeof(IScaleComponent), true)] [RequiredComponent(typeof(IBoundingBoxComponent), true)] public interface ICropChildrenComponent : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source CropChildrenEnabled Gets or sets a value indicating whether this ICropChildrenComponent crop children is enabled. Declaration bool CropChildrenEnabled { get; set; } Property Value Type Description System.Boolean true if crop children enabled; otherwise, false . | Improve this Doc View Source EntitiesToSkipCrop A list of child entities (their IDs) that will not be cropped by the component. Declaration IConcurrentHashSet<string> EntitiesToSkipCrop { get; } Property Value Type Description IConcurrentHashSet < System.String > The entities to skip crop. | Improve this Doc View Source StartPoint Gets or sets the start point for the crop area, where (0,0) is the top-left corner. Declaration PointF StartPoint { get; set; } Property Value Type Description PointF The start point."
  },
  "api/AGS.API.ICoordinates.html": {
    "href": "api/AGS.API.ICoordinates.html",
    "title": "Interface ICoordinates | MonoAGS Documentation",
    "keywords": "Interface ICoordinates Utility methods to help convert between different coordinate systems: Window coordinates: those are the coordinates of the window which hosts the game (the units are based on the number of pixels the window has on your screen- determined from your screen resolution and display size). World coordinates: those are the coordinates of your game world (the units are based on your virtual resolution). Viewport coordinates: the game might have multiple viewports on the screen (for example, in a split-screen game). Each viewport can have its own coordinates. The world coordinates are actually the main viewport coordinates. Object coordinates: each object in the game can have its own coordinates. First, it can be using a IRenderLayer which has a different resolution than your world's resolution. Secondly, if the object is a child of another object, then the coordinate system is relative to the parent. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ICoordinates Methods | Improve this Doc View Source IsWorldInWindow(PointF) Checks if the given world position is inside the window. Declaration bool IsWorldInWindow(PointF worldPosition) Parameters Type Name Description PointF worldPosition World position. Returns Type Description System.Boolean true , if world position is inside the window, false otherwise. | Improve this Doc View Source ViewportToWindow(IViewport, PointF) Converts viewport coordinates to window coordinates. Declaration PointF ViewportToWindow(IViewport viewport, PointF position) Parameters Type Name Description IViewport viewport Viewport. PointF position Position. Returns Type Description PointF | Improve this Doc View Source ViewportXToWindowX(IViewport, Single) Converts a viewport X coordinate to the window X coordinate. Declaration float ViewportXToWindowX(IViewport viewport, float x) Parameters Type Name Description IViewport viewport Viewport. System.Single x The x coordinate. Returns Type Description System.Single | Improve this Doc View Source ViewportYToWindowY(IViewport, Single) Converts a viewport Y coordinate to the window Y coordinate. Declaration float ViewportYToWindowY(IViewport viewport, float y) Parameters Type Name Description IViewport viewport Viewport. System.Single y The y coordinate. Returns Type Description System.Single | Improve this Doc View Source WindowToObject(IViewport, IObject, PointF) Converts window coordinates to object coordinates. Declaration PointF WindowToObject(IViewport viewport, IObject obj, PointF position) Parameters Type Name Description IViewport viewport Viewport. IObject obj Object. PointF position Position. Returns Type Description PointF | Improve this Doc View Source WindowToViewport(IViewport, PointF) Converts window coordinates to viewport coordinates. Declaration PointF WindowToViewport(IViewport viewport, PointF position) Parameters Type Name Description IViewport viewport Viewport. PointF position Position. Returns Type Description PointF | Improve this Doc View Source WindowToWorld(PointF) Converts window coordinates to world coordinates. Declaration PointF WindowToWorld(PointF position) Parameters Type Name Description PointF position Position. Returns Type Description PointF | Improve this Doc View Source WindowXToViewportX(IViewport, Single) Converts a window X coordinate to the viewport X coordinate. Declaration float WindowXToViewportX(IViewport viewport, float x) Parameters Type Name Description IViewport viewport Viewport. System.Single x The x coordinate. Returns Type Description System.Single | Improve this Doc View Source WindowXToWorldX(Single) Converts a window X coordinate to the world X coordinate. Declaration float WindowXToWorldX(float x) Parameters Type Name Description System.Single x The x coordinate. Returns Type Description System.Single | Improve this Doc View Source WindowYToViewportY(IViewport, Single) Converts a window Y coordinate to the viewport Y coordinate. Declaration float WindowYToViewportY(IViewport viewport, float y) Parameters Type Name Description IViewport viewport Viewport. System.Single y The y coordinate. Returns Type Description System.Single | Improve this Doc View Source WindowYToWorldY(Single) Converts a window Y coordinate to the world Y coordinate. Declaration float WindowYToWorldY(float y) Parameters Type Name Description System.Single y The y coordinate. Returns Type Description System.Single | Improve this Doc View Source WorldToWindow(PointF) Converts world coordinates to window coordinates. Declaration PointF WorldToWindow(PointF position) Parameters Type Name Description PointF position Position. Returns Type Description PointF | Improve this Doc View Source WorldXToWindowX(Single) Converts a world X coordinate to the window X coordinate. Declaration float WorldXToWindowX(float x) Parameters Type Name Description System.Single x The x coordinate. Returns Type Description System.Single | Improve this Doc View Source WorldYToWindowY(Single) Converts a world Y coordinate to the window Y coordinate. Declaration float WorldYToWindowY(float y) Parameters Type Name Description System.Single y The y coordinate. Returns Type Description System.Single"
  },
  "api/AGS.API.ICharacter.html": {
    "href": "api/AGS.API.ICharacter.html",
    "title": "Interface ICharacter | MonoAGS Documentation",
    "keywords": "Interface ICharacter A character is an entity with pre-set components (like talk, walk, and inventory) which is useful to depict adventure game characters. Inherited Members IEntity.ID IEntity.DisplayName IEntity.GetFriendlyName() IComponentsCollection.AddComponent<TComponent>() IComponentsCollection.AddComponent(Type) IComponentsCollection.AddComponent<TComponent>(IComponent) IComponentsCollection.RemoveComponent<TComponent>() IComponentsCollection.RemoveComponent(Type) IComponentsCollection.RemoveComponent(IComponent) IComponentsCollection.PopComponent<TComponent>() IComponentsCollection.HasComponent<TComponent>() IComponentsCollection.HasComponent(Type) IComponentsCollection.HasComponent(IComponent) IComponentsCollection.GetComponent<TComponent>() IComponentsCollection.GetComponent(Type) IComponentsCollection.Bind<TComponent>(Action<TComponent>, Action<TComponent>) IComponentsCollection.Count IComponentsCollection.ComponentsInitialized IComponentsCollection.OnComponentsInitialized IComponentsCollection.OnComponentsChanged IComponentsCollection.OnDisposed(Action) System.Collections.Generic.IEnumerable<AGS.API.IComponent>.GetEnumerator() IHasRoomComponent.Room IHasRoomComponent.PreviousRoom IHasRoomComponent.OnRoomChanged IHasRoomComponent.ChangeRoomAsync(IRoom, Nullable<Single>, Nullable<Single>) IAnimationComponent.Animation IAnimationComponent.OnAnimationStarted IAnimationComponent.StartAnimation(IAnimation) IAnimationComponent.Animate(IAnimation) IAnimationComponent.AnimateAsync(IAnimation) IInTree<IObject>.TreeNode IColliderComponent.CenterPoint IColliderComponent.CollidesWith(Single, Single, IViewport) IVisibleComponent.Visible IVisibleComponent.UnderlyingVisible IEnabledComponent.Enabled IEnabledComponent.UnderlyingEnabled IEnabledComponent.ClickThrough ICustomPropertiesComponent.Properties IDrawableInfoComponent.RenderLayer IDrawableInfoComponent.IgnoreViewport IDrawableInfoComponent.IgnoreScalingArea IShaderComponent.Shader IImageComponent.IsImageVisible IImageComponent.CurrentSprite IImageComponent.SpriteProvider IBorderComponent.Border IPixelPerfectComponent.IsPixelPerfect IPixelPerfectCollidable.PixelPerfectHitTestArea IScale.Height IScale.Width IScale.ScaleX IScale.ScaleY IScale.Scale IScale.BaseSize IScale.ResetScale() IScale.ResetScale(Single, Single) IScale.ScaleTo(Single, Single) IScale.FlipHorizontally() IScale.FlipVertically() IRotate.Angle ITranslate.Position ITranslate.X ITranslate.Y ITranslate.Z IHasImage.Opacity IHasImage.Tint IHasImage.Brightness IHasImage.Pivot IHasImage.Image IModelMatrixComponent.GetModelMatrices() IModelMatrixComponent.OnMatrixChanged IModelMatrixComponent.ModelMatrixLockStep IBoundingBoxComponent.GetBoundingBoxes(IViewport) IBoundingBoxComponent.WorldBoundingBox IBoundingBoxComponent.OnBoundingBoxesChanged IBoundingBoxComponent.BoundingBoxLockStep IWorldPositionComponent.WorldX IWorldPositionComponent.WorldY IWorldPositionComponent.WorldXY ISayComponent.SpeechConfig ISayComponent.OnBeforeSay ISayComponent.SayAsync(String, Nullable<PointF>, Nullable<PointF>) IWalkComponent.WalkStep IWalkComponent.AdjustWalkSpeedToScaleArea IWalkComponent.MovementLinkedToAnimation IWalkComponent.IsWalking IWalkComponent.WalkDestination IWalkComponent.DebugDrawWalkPath IWalkComponent.WalkAsync(Position, Boolean) IWalkComponent.WalkStraightAsync(Position) IWalkComponent.StopWalkingAsync() IWalkComponent.PlaceOnWalkableArea() IFaceDirectionComponent.Direction IFaceDirectionComponent.CurrentDirectionalAnimation IFaceDirectionComponent.FaceDirectionAsync(Direction) IFaceDirectionComponent.FaceDirectionAsync(IObject) IFaceDirectionComponent.FaceDirectionAsync(Single, Single) IFaceDirectionComponent.FaceDirectionAsync(Single, Single, Single, Single) IOutfitComponent.Outfit IInventoryComponent.Inventory IFollowComponent.Follow(IObject, IFollowSettings) IFollowComponent.TargetBeingFollowed IFollowComponent.StopFollowingAsync() IHotspotComponent.Interactions IHotspotComponent.WalkPoint IHotspotComponent.DisplayHotspot IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ICharacter : IObject, IEntity, IComponentsCollection, IEnumerable<IComponent>, IEnumerable, IHasRoomComponent, IAnimationComponent, IInObjectTreeComponent, IInTree<IObject>, IColliderComponent, IVisibleComponent, IEnabledComponent, ICustomPropertiesComponent, IDrawableInfoComponent, IShaderComponent, ITranslateComponent, IImageComponent, IBorderComponent, IScaleComponent, IRotateComponent, IPixelPerfectComponent, IPixelPerfectCollidable, IHasModelMatrix, IScale, IRotate, ITranslate, IHasImage, IModelMatrixComponent, IBoundingBoxComponent, IWorldPositionComponent, ISayComponent, IWalkComponent, IFaceDirectionComponent, IOutfitComponent, IInventoryComponent, IFollowComponent, IHotspotComponent, IComponent, IDisposable, INotifyPropertyChanged"
  },
  "api/AGS.API.ICamera.html": {
    "href": "api/AGS.API.ICamera.html",
    "title": "Interface ICamera | MonoAGS Documentation",
    "keywords": "Interface ICamera The camera is a script that is executed each game tick, and manipulates the viewport. The default camera tracks the target (usually the player) by slowly moving the viewport (in a smooth transition) so the target is at the center, while also adjusting the zoom if the target is standing in a IZoomArea . You can however implement your own camera, where each room can have a different camera if desired. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface ICamera Properties | Improve this Doc View Source Enabled Gets or sets a value indicating whether this ICamera is enabled. If the camera is disabled then the viewport will not be updated by the camera, you can still update the viewport manually. If the camera is enabled and you attempt to set the viewport manually, the camera (depending on the implementation, but this is true for the default camera) will slowly change the viewport to center the target. Declaration bool Enabled { get; set; } Property Value Type Description System.Boolean true if enabled; otherwise, false . | Improve this Doc View Source Target Gets or sets the target which the camera will be following. Declaration Func<IObject> Target { get; set; } Property Value Type Description System.Func < IObject > The target. Methods | Improve this Doc View Source Tick(IViewport, RectangleF, Size, Boolean) Executes the next tick. This is called on each tick by the engine, you don't need to call it yourself. Declaration void Tick(IViewport viewport, RectangleF roomLimits, Size virtualResolution, bool resetPosition) Parameters Type Name Description IViewport viewport The viewport to manipulate. RectangleF roomLimits Room limits, as provided by IRoomLimitsProvider . Size virtualResolution The game's virtual resolution. System.Boolean resetPosition If set to true reset position, i.e the camera will not do a smooth transition, but go straight to the target destination."
  },
  "api/AGS.API.IButtonComponent.html": {
    "href": "api/AGS.API.IButtonComponent.html",
    "title": "Interface IButtonComponent | MonoAGS Documentation",
    "keywords": "Interface IButtonComponent A button component allows having the entity behave like a button. Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax [RequiredComponent(typeof(IUIEvents), true)] [RequiredComponent(typeof(IAnimationComponent), true)] [RequiredComponent(typeof(ITextComponent), false)] [RequiredComponent(typeof(IImageComponent), false)] [RequiredComponent(typeof(IBorderComponent), false)] public interface IButtonComponent : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source HoverAnimation Gets or sets the hover animation of the button (when the mouse hovers over the button). Declaration ButtonAnimation HoverAnimation { get; set; } Property Value Type Description ButtonAnimation The hover animation. | Improve this Doc View Source IdleAnimation Gets or sets the idle animation of the button (the animation when a button is not pushed or hovered). Declaration ButtonAnimation IdleAnimation { get; set; } Property Value Type Description ButtonAnimation The idle animation. | Improve this Doc View Source PushedAnimation Gets or sets the pushed animation of the button (when the user clicks the button). Declaration ButtonAnimation PushedAnimation { get; set; } Property Value Type Description ButtonAnimation The pushed animation."
  },
  "api/AGS.API.IButton.html": {
    "href": "api/AGS.API.IButton.html",
    "title": "Interface IButton | MonoAGS Documentation",
    "keywords": "Interface IButton A pre-set entity with all of the UI control components, plus a button component and a text component. Inherited Members IUIEvents.MouseEnter IUIEvents.MouseLeave IUIEvents.MouseMove IUIEvents.MouseClicked IUIEvents.MouseDoubleClicked IUIEvents.MouseDown IUIEvents.MouseUp IUIEvents.LostFocus IUIEvents.IsMouseIn ISkinComponent.Skin ISkinComponent.SkinTags IEntity.ID IEntity.DisplayName IEntity.GetFriendlyName() IComponentsCollection.AddComponent<TComponent>() IComponentsCollection.AddComponent(Type) IComponentsCollection.AddComponent<TComponent>(IComponent) IComponentsCollection.RemoveComponent<TComponent>() IComponentsCollection.RemoveComponent(Type) IComponentsCollection.RemoveComponent(IComponent) IComponentsCollection.PopComponent<TComponent>() IComponentsCollection.HasComponent<TComponent>() IComponentsCollection.HasComponent(Type) IComponentsCollection.HasComponent(IComponent) IComponentsCollection.GetComponent<TComponent>() IComponentsCollection.GetComponent(Type) IComponentsCollection.Bind<TComponent>(Action<TComponent>, Action<TComponent>) IComponentsCollection.Count IComponentsCollection.ComponentsInitialized IComponentsCollection.OnComponentsInitialized IComponentsCollection.OnComponentsChanged IComponentsCollection.OnDisposed(Action) System.Collections.Generic.IEnumerable<AGS.API.IComponent>.GetEnumerator() IHasRoomComponent.Room IHasRoomComponent.PreviousRoom IHasRoomComponent.OnRoomChanged IHasRoomComponent.ChangeRoomAsync(IRoom, Nullable<Single>, Nullable<Single>) IAnimationComponent.Animation IAnimationComponent.OnAnimationStarted IAnimationComponent.StartAnimation(IAnimation) IAnimationComponent.Animate(IAnimation) IAnimationComponent.AnimateAsync(IAnimation) IInTree<IObject>.TreeNode IColliderComponent.CenterPoint IColliderComponent.CollidesWith(Single, Single, IViewport) IVisibleComponent.Visible IVisibleComponent.UnderlyingVisible IEnabledComponent.Enabled IEnabledComponent.UnderlyingEnabled IEnabledComponent.ClickThrough ICustomPropertiesComponent.Properties IDrawableInfoComponent.RenderLayer IDrawableInfoComponent.IgnoreViewport IDrawableInfoComponent.IgnoreScalingArea IShaderComponent.Shader IImageComponent.IsImageVisible IImageComponent.CurrentSprite IImageComponent.SpriteProvider IBorderComponent.Border IPixelPerfectComponent.IsPixelPerfect IPixelPerfectCollidable.PixelPerfectHitTestArea IScale.Height IScale.Width IScale.ScaleX IScale.ScaleY IScale.Scale IScale.BaseSize IScale.ResetScale() IScale.ResetScale(Single, Single) IScale.ScaleTo(Single, Single) IScale.FlipHorizontally() IScale.FlipVertically() IRotate.Angle ITranslate.Position ITranslate.X ITranslate.Y ITranslate.Z IHasImage.Opacity IHasImage.Tint IHasImage.Brightness IHasImage.Pivot IHasImage.Image IModelMatrixComponent.GetModelMatrices() IModelMatrixComponent.OnMatrixChanged IModelMatrixComponent.ModelMatrixLockStep IBoundingBoxComponent.GetBoundingBoxes(IViewport) IBoundingBoxComponent.WorldBoundingBox IBoundingBoxComponent.OnBoundingBoxesChanged IBoundingBoxComponent.BoundingBoxLockStep IWorldPositionComponent.WorldX IWorldPositionComponent.WorldY IWorldPositionComponent.WorldXY ITextComponent.TextConfig ITextComponent.Text ITextComponent.LabelRenderSize ITextComponent.TextVisible ITextComponent.TextBackgroundVisible ITextComponent.TextHeight ITextComponent.TextWidth ITextComponent.OnLabelSizeChanged ITextComponent.CustomImageSize ITextComponent.CustomImageResolutionFactor ITextComponent.CustomTextCrop ITextComponent.TextBoundingBoxes ITextComponent.CaretPosition ITextComponent.RenderCaret ITextComponent.CaretXOffset ITextComponent.PrepareTextBoundingBoxes() ITextComponent.TextLockStep IButtonComponent.IdleAnimation IButtonComponent.HoverAnimation IButtonComponent.PushedAnimation IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IButton : IUIControl, IUIEvents, ISkinComponent, IObject, IEntity, IComponentsCollection, IEnumerable<IComponent>, IEnumerable, IHasRoomComponent, IAnimationComponent, IInObjectTreeComponent, IInTree<IObject>, IColliderComponent, IVisibleComponent, IEnabledComponent, ICustomPropertiesComponent, IDrawableInfoComponent, IShaderComponent, ITranslateComponent, IImageComponent, IBorderComponent, IScaleComponent, IRotateComponent, IPixelPerfectComponent, IPixelPerfectCollidable, IHasModelMatrix, IScale, IRotate, ITranslate, IHasImage, IModelMatrixComponent, IBoundingBoxComponent, IWorldPositionComponent, ITextComponent, IButtonComponent, IComponent, IDisposable, INotifyPropertyChanged"
  },
  "api/AGS.API.IBrushLoader.html": {
    "href": "api/AGS.API.IBrushLoader.html",
    "title": "Interface IBrushLoader | MonoAGS Documentation",
    "keywords": "Interface IBrushLoader Loads a brush Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IBrushLoader Methods | Improve this Doc View Source LoadHatchBrush(HatchStyle, Color, Color) Declaration IBrush LoadHatchBrush(HatchStyle hatchStyle, Color color, Color backgroundColor) Parameters Type Name Description HatchStyle hatchStyle Color color Color backgroundColor Returns Type Description IBrush | Improve this Doc View Source LoadLinearBrush(Color[], IBlend, IColorBlend, ITransformMatrix, WrapMode, Boolean) Loads a linear color brush (this is currently only supported on desktop). Declaration IBrush LoadLinearBrush(Color[] linearColors, IBlend blend, IColorBlend interpolationColors, ITransformMatrix transform, WrapMode wrapMode, bool gammaCorrection) Parameters Type Name Description Color [] linearColors Linear colors. IBlend blend Blend. IColorBlend interpolationColors Interpolation colors. ITransformMatrix transform Transform. WrapMode wrapMode Wrap mode. System.Boolean gammaCorrection If set to true gamma correction. Returns Type Description IBrush The linear brush. | Improve this Doc View Source LoadLinearBrush(Point, Point, Color, Color) Loads a linear color brush (this is currently only supported on desktop). Declaration IBrush LoadLinearBrush(Point point1, Point point2, Color color1, Color color2) Parameters Type Name Description Point point1 Point1. Point point2 Point2. Color color1 Color1. Color color2 Color2. Returns Type Description IBrush The linear brush. | Improve this Doc View Source LoadPathsGradientBrush(Color, PointF, IBlend, PointF, Color[], IColorBlend, ITransformMatrix, WrapMode) Declaration IBrush LoadPathsGradientBrush(Color centerColor, PointF centerPoint, IBlend blend, PointF focusScales, Color[] surroundColors, IColorBlend interpolationColors, ITransformMatrix transform, WrapMode wrapMode) Parameters Type Name Description Color centerColor PointF centerPoint IBlend blend PointF focusScales Color [] surroundColors IColorBlend interpolationColors ITransformMatrix transform WrapMode wrapMode Returns Type Description IBrush | Improve this Doc View Source LoadPathsGradientBrush(Point[]) Declaration IBrush LoadPathsGradientBrush(Point[] points) Parameters Type Name Description Point [] points Returns Type Description IBrush | Improve this Doc View Source LoadSolidBrush(Color) Loads a solid color brush. Declaration IBrush LoadSolidBrush(Color color) Parameters Type Name Description Color color Color. Returns Type Description IBrush The solid brush."
  },
  "api/AGS.API.IBrush.html": {
    "href": "api/AGS.API.IBrush.html",
    "title": "Interface IBrush | MonoAGS Documentation",
    "keywords": "Interface IBrush A brush which can be used to draw. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IBrush Properties | Improve this Doc View Source BackgroundColor Declaration Color BackgroundColor { get; } Property Value Type Description Color | Improve this Doc View Source Blend Declaration IBlend Blend { get; } Property Value Type Description IBlend | Improve this Doc View Source CenterPoint Declaration PointF CenterPoint { get; } Property Value Type Description PointF | Improve this Doc View Source Color Gets the brush primary color. Declaration Color Color { get; } Property Value Type Description Color The color. | Improve this Doc View Source FocusScales Declaration PointF FocusScales { get; } Property Value Type Description PointF | Improve this Doc View Source GammaCorrection Declaration bool GammaCorrection { get; } Property Value Type Description System.Boolean | Improve this Doc View Source HatchStyle Declaration HatchStyle HatchStyle { get; } Property Value Type Description HatchStyle | Improve this Doc View Source InterpolationColors Declaration IColorBlend InterpolationColors { get; } Property Value Type Description IColorBlend | Improve this Doc View Source LinearColors Declaration Color[] LinearColors { get; } Property Value Type Description Color [] | Improve this Doc View Source Transform Declaration ITransformMatrix Transform { get; } Property Value Type Description ITransformMatrix | Improve this Doc View Source Type Gets the brush type (currently only Solid is supported on all platforms, though other brushes are expected to work on desktop). Declaration BrushType Type { get; } Property Value Type Description BrushType The type. | Improve this Doc View Source WrapMode Declaration WrapMode WrapMode { get; } Property Value Type Description WrapMode"
  },
  "api/AGS.API.IBoundingBoxWithChildrenComponent.html": {
    "href": "api/AGS.API.IBoundingBoxWithChildrenComponent.html",
    "title": "Interface IBoundingBoxWithChildrenComponent | MonoAGS Documentation",
    "keywords": "Interface IBoundingBoxWithChildrenComponent Allows to query the size of the entity combined with all its children (i.e the size of the minimal bounding box that surrounds them all). Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax [RequiredComponent(typeof(IBoundingBoxComponent), true)] [RequiredComponent(typeof(IInObjectTreeComponent), true)] public interface IBoundingBoxWithChildrenComponent : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source BoundingBoxWithChildren Gets the bounding box which wraps around the entity and all its children. Declaration AGSBoundingBox BoundingBoxWithChildren { get; } Property Value Type Description AGSBoundingBox The size with children. | Improve this Doc View Source EntitiesToSkip Allows excluding entities from the bounding box calculation. Declaration IConcurrentHashSet<string> EntitiesToSkip { get; } Property Value Type Description IConcurrentHashSet < System.String > The entities to skip. | Improve this Doc View Source IncludeSelf Gets or sets a value indicating whether the bounding box calculation includes the entity's size as well (true by default). Declaration bool IncludeSelf { get; set; } Property Value Type Description System.Boolean true if include self; otherwise, false . | Improve this Doc View Source LockStep Allows locking the component from changing (to allow for changing multiple components \"at once\"). Declaration ILockStep LockStep { get; } Property Value Type Description ILockStep The lock step. | Improve this Doc View Source OnBoundingBoxWithChildrenChanged An event which fires whenever the bounding box with children changes. Declaration IBlockingEvent OnBoundingBoxWithChildrenChanged { get; } Property Value Type Description IBlockingEvent The on bounding box with children changed. | Improve this Doc View Source PreCropBoundingBoxWithChildren Gets the bounding box which wraps around the entity and all its children before any of the children was cropped (for entities which has the ICropSelfComponent attached to them. Declaration AGSBoundingBox PreCropBoundingBoxWithChildren { get; } Property Value Type Description AGSBoundingBox The pre crop bounding box with children."
  },
  "api/AGS.API.IBoundingBoxComponent.html": {
    "href": "api/AGS.API.IBoundingBoxComponent.html",
    "title": "Interface IBoundingBoxComponent | MonoAGS Documentation",
    "keywords": "Interface IBoundingBoxComponent A component that calculates the bounding box of the entity. This is for both the bounding box used to render the entity, and for collision checks. Inherited Members IComponent.Name IComponent.Entity IComponent.RegistrationType IComponent.Init(IEntity, Type) IComponent.AfterInit() System.IDisposable.Dispose() System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : AGS.API Assembly : AGS.API.dll Syntax [RequiredComponent(typeof(IModelMatrixComponent), true)] [RequiredComponent(typeof(IImageComponent), true)] [RequiredComponent(typeof(IDrawableInfoComponent), true)] [RequiredComponent(typeof(IHasRoomComponent), true)] [RequiredComponent(typeof(ICropSelfComponent), false)] public interface IBoundingBoxComponent : IComponent, IDisposable, INotifyPropertyChanged Properties | Improve this Doc View Source BoundingBoxLockStep Allows locking the component from changing (to allow for changing multiple components \"at once\"). Declaration ILockStep BoundingBoxLockStep { get; } Property Value Type Description ILockStep The lock step. | Improve this Doc View Source OnBoundingBoxesChanged An event which fires whenever the bounding boxes for the entity change. Declaration IBlockingEvent OnBoundingBoxesChanged { get; } Property Value Type Description IBlockingEvent The on bounding boxes changed event. | Improve this Doc View Source WorldBoundingBox Gets the entity's bounding box in world co-ordinates (can be used for hit-tests). Declaration AGSBoundingBox WorldBoundingBox { get; } Property Value Type Description AGSBoundingBox The world bounding box. Methods | Improve this Doc View Source GetBoundingBoxes(IViewport) Gets the bounding boxes which surrounds the entity. Declaration AGSBoundingBoxes GetBoundingBoxes(IViewport viewport) Parameters Type Name Description IViewport viewport Returns Type Description AGSBoundingBoxes The bounding boxes."
  },
  "api/AGS.API.IBlockingEvent-1.html": {
    "href": "api/AGS.API.IBlockingEvent-1.html",
    "title": "Interface IBlockingEvent<TEventArgs> | MonoAGS Documentation",
    "keywords": "Interface IBlockingEvent<TEventArgs> Represents an event which can be subscribed and invoked synchronously. An event is a notification for something that has happened. Interested parties can subscribe to the event and be notified when it triggers ( https://en.wikipedia.org/wiki/Event-driven_programming ). Inherited Members System.IDisposable.Dispose() Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IBlockingEvent<TEventArgs> : IDisposable Type Parameters Name Description TEventArgs Properties | Improve this Doc View Source SubscribersCount Gets the number of subscribers to the event. Declaration int SubscribersCount { get; } Property Value Type Description System.Int32 The subscribers count. Methods | Improve this Doc View Source Invoke(TEventArgs) Invoke the event synchronously (i.e will wait for all subscribers to process the event before moving on). Declaration void Invoke(TEventArgs args) Parameters Type Name Description TEventArgs args Event arguments which can be used to provide additional data. | Improve this Doc View Source Subscribe(ClaimableCallbackWithArgs<TEventArgs>, CallbackPriority) Subscribe the specified callback to the event. Once subscribed, whenever the event happens this callback will be called. In addition, this specific overload allows you to claim the event so that subscribers which follow you on the list will not receive the event. For an example- ClaimableCallback . Declaration void Subscribe(ClaimableCallbackWithArgs<TEventArgs> callback, CallbackPriority priority = CallbackPriority.Normal) Parameters Type Name Description ClaimableCallbackWithArgs <TEventArgs> callback Callback. CallbackPriority priority The callback priority (determines the order in which the subscribers get the events). | Improve this Doc View Source Subscribe(Action, CallbackPriority) Subscribe the specified callback to the event. Once subscribed, whenever the event happens this callback will be called. Declaration void Subscribe(Action callback, CallbackPriority priority = CallbackPriority.Normal) Parameters Type Name Description System.Action callback Callback. CallbackPriority priority The callback priority (determines the order in which the subscribers get the events). | Improve this Doc View Source Subscribe(Action<TEventArgs>, CallbackPriority) Subscribe the specified callback to the event. Once subscribed, whenever the event happens this callback will be called. Declaration void Subscribe(Action<TEventArgs> callback, CallbackPriority priority = CallbackPriority.Normal) Parameters Type Name Description System.Action <TEventArgs> callback Callback. CallbackPriority priority The callback priority (determines the order in which the subscribers get the events). | Improve this Doc View Source Unsubscribe(ClaimableCallbackWithArgs<TEventArgs>, CallbackPriority) Unsubscribe the specified callback from the event. This will stops notifications to call this callback. Declaration void Unsubscribe(ClaimableCallbackWithArgs<TEventArgs> callback, CallbackPriority priority = CallbackPriority.Normal) Parameters Type Name Description ClaimableCallbackWithArgs <TEventArgs> callback Callback. CallbackPriority priority The callback priority (determines the order in which the subscribers get the events). | Improve this Doc View Source Unsubscribe(Action, CallbackPriority) Unsubscribe the specified callback from the event. This will stops notifications to call this callback. Declaration void Unsubscribe(Action callback, CallbackPriority priority = CallbackPriority.Normal) Parameters Type Name Description System.Action callback Callback. CallbackPriority priority The callback priority (determines the order in which the subscribers get the events). | Improve this Doc View Source Unsubscribe(Action<TEventArgs>, CallbackPriority) Unsubscribe the specified callback from the event. This will stops notifications to call this callback. Declaration void Unsubscribe(Action<TEventArgs> callback, CallbackPriority priority = CallbackPriority.Normal) Parameters Type Name Description System.Action <TEventArgs> callback Callback. CallbackPriority priority The callback priority (determines the order in which the subscribers get the events). | Improve this Doc View Source WaitUntilAsync(Predicate<TEventArgs>, CallbackPriority) Asynchronously wait until the event fires and the specific condition applies. Declaration Task WaitUntilAsync(Predicate<TEventArgs> condition, CallbackPriority priority = CallbackPriority.Normal) Parameters Type Name Description System.Predicate <TEventArgs> condition The condition we are waiting to apply before moving on. CallbackPriority priority The callback priority (determines the order in which the subscribers get the events). Returns Type Description System.Threading.Tasks.Task The task to be awaited."
  },
  "api/AGS.API.IBlend.html": {
    "href": "api/AGS.API.IBlend.html",
    "title": "Interface IBlend | MonoAGS Documentation",
    "keywords": "Interface IBlend Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IBlend Properties | Improve this Doc View Source Factors Declaration float[] Factors { get; } Property Value Type Description System.Single [] | Improve this Doc View Source Positions Declaration float[] Positions { get; } Property Value Type Description System.Single []"
  },
  "api/AGS.API.IBitmapTextDraw.html": {
    "href": "api/AGS.API.IBitmapTextDraw.html",
    "title": "Interface IBitmapTextDraw | MonoAGS Documentation",
    "keywords": "Interface IBitmapTextDraw This interface allows drawing text on a bitmap. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IBitmapTextDraw Methods | Improve this Doc View Source CreateContext() Creates the drawing context which should be disposed after drawing the text. Declaration IDisposable CreateContext() Returns Type Description System.IDisposable The context. | Improve this Doc View Source DrawText(String, ITextConfig, SizeF, SizeF, Int32, Int32, Single) Draws the text on the bitmap. Declaration void DrawText(string text, ITextConfig config, SizeF textSize, SizeF baseSize, int maxWidth, int height, float xOffset) Parameters Type Name Description System.String text Text to draw. ITextConfig config Configuration to apply when drawing the text. SizeF textSize The expected text size. SizeF baseSize The size of the text container, based on which the text should be aligned. System.Int32 maxWidth The maximum width allowed for the text (use int.MaxValue for unlimited width). System.Int32 height The expected height of the text after adding padding and outline. System.Single xOffset An optional x pixels to offset the drawn text."
  },
  "api/AGS.API.IBitmapLoader.html": {
    "href": "api/AGS.API.IBitmapLoader.html",
    "title": "Interface IBitmapLoader | MonoAGS Documentation",
    "keywords": "Interface IBitmapLoader This interface allows creating bitmaps. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IBitmapLoader Methods | Improve this Doc View Source Load(Int32, Int32) Creates an empty bitmap with the specified width and height (in pixels). Declaration IBitmap Load(int width, int height) Parameters Type Name Description System.Int32 width Width. System.Int32 height Height. Returns Type Description IBitmap The bitmap. | Improve this Doc View Source Load(Stream) Create a bitmap from a stream of data (this could be loaded from a file, or some other stream like from a network, or from memory). Declaration IBitmap Load(Stream stream) Parameters Type Name Description System.IO.Stream stream Stream. Returns Type Description IBitmap The bitmap."
  },
  "api/AGS.API.IAudioFactory.html": {
    "href": "api/AGS.API.IAudioFactory.html",
    "title": "Interface IAudioFactory | MonoAGS Documentation",
    "keywords": "Interface IAudioFactory A factory to load audio clips from files. Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IAudioFactory Methods | Improve this Doc View Source LoadAudioClip(String, String) Loads the audio clip from the file/resource path. Declaration IAudioClip LoadAudioClip(string filePath, string id = null) Parameters Type Name Description System.String filePath File path. System.String id A unique identifier for the clip, if null, the file/resource path will be used as id. Returns Type Description IAudioClip The audio clip. | Improve this Doc View Source LoadAudioClipAsync(String, String) Loads the audio clip from the file/resource path asynchronously. Declaration Task<IAudioClip> LoadAudioClipAsync(string filePath, string id = null) Parameters Type Name Description System.String filePath File path. System.String id A unique identifier for the clip, if null, the file/resource path will be used as id. Returns Type Description System.Threading.Tasks.Task < IAudioClip > The audio clip."
  },
  "api/AGS.API.IAudioClip.html": {
    "href": "api/AGS.API.IAudioClip.html",
    "title": "Interface IAudioClip | MonoAGS Documentation",
    "keywords": "Interface IAudioClip An audio clip that can be played multiple times during the game. The audio clip should be loaded from a file using IAudioFactory . You can then set its properties (volume, pitch, panning) which will be used for all sounds played from this clip. Note that an audio clip is the template for the sound, whereas ISound is the actual playing sound instance. Inherited Members ISoundProperties.Volume ISoundProperties.Pitch ISoundProperties.Panning ISoundProperties.Tags ISoundPlayer.Play(Boolean, ISoundProperties) ISoundPlayer.Play(Single, Boolean) ISoundPlayer.PlayAndWait(ISoundProperties) ISoundPlayer.PlayAndWait(Single) ISoundPlayer.IsPlaying ISoundPlayer.CurrentlyPlayingSounds ISoundPlayer.OnSoundStarted ISoundPlayer.OnSoundCompleted Namespace : AGS.API Assembly : AGS.API.dll Syntax public interface IAudioClip : ISoundProperties, ISoundPlayer Properties | Improve this Doc View Source Duration Gets duration of the sound in seconds. Declaration float Duration { get; } Property Value Type Description System.Single | Improve this Doc View Source ID A unique identifier for the audio clip. Declaration string ID { get; } Property Value Type Description System.String The identifier."
  }
}